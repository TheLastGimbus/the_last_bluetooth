// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:ffi' as ffi;
import 'dart:isolate' show ReceivePort;

import 'package:jni/internal_helpers_for_jnigen.dart';
import 'package:jni/jni.dart' as jni;

/// from: java.util.UUID
class UUID extends jni.JObject {
  @override
  late final jni.JObjType<UUID> $type = type;

  UUID.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'java/util/UUID');

  /// The type which includes information such as the signature of this class.
  static const type = $UUIDType();
  static final _id_new0 = _class.constructorId(
    r'(JJ)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64, ffi.Int64)>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void <init>(long j, long j1)
  /// The returned object must be released after use, by calling the [release] method.
  factory UUID(
    int j,
    int j1,
  ) {
    return UUID.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr, j, j1)
            .reference);
  }

  static final _id_randomUUID = _class.staticMethodId(
    r'randomUUID',
    r'()Ljava/util/UUID;',
  );

  static final _randomUUID = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.util.UUID randomUUID()
  /// The returned object must be released after use, by calling the [release] method.
  static UUID randomUUID() {
    return _randomUUID(
            _class.reference.pointer, _id_randomUUID as jni.JMethodIDPtr)
        .object(const $UUIDType());
  }

  static final _id_nameUUIDFromBytes = _class.staticMethodId(
    r'nameUUIDFromBytes',
    r'([B)Ljava/util/UUID;',
  );

  static final _nameUUIDFromBytes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.UUID nameUUIDFromBytes(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  static UUID nameUUIDFromBytes(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _nameUUIDFromBytes(_class.reference.pointer,
            _id_nameUUIDFromBytes as jni.JMethodIDPtr, bs.reference.pointer)
        .object(const $UUIDType());
  }

  static final _id_fromString = _class.staticMethodId(
    r'fromString',
    r'(Ljava/lang/String;)Ljava/util/UUID;',
  );

  static final _fromString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.UUID fromString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static UUID fromString(
    jni.JString string,
  ) {
    return _fromString(_class.reference.pointer,
            _id_fromString as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $UUIDType());
  }

  static final _id_getLeastSignificantBits = _class.instanceMethodId(
    r'getLeastSignificantBits',
    r'()J',
  );

  static final _getLeastSignificantBits = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getLeastSignificantBits()
  int getLeastSignificantBits() {
    return _getLeastSignificantBits(
            reference.pointer, _id_getLeastSignificantBits as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getMostSignificantBits = _class.instanceMethodId(
    r'getMostSignificantBits',
    r'()J',
  );

  static final _getMostSignificantBits = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getMostSignificantBits()
  int getMostSignificantBits() {
    return _getMostSignificantBits(
            reference.pointer, _id_getMostSignificantBits as jni.JMethodIDPtr)
        .long;
  }

  static final _id_version = _class.instanceMethodId(
    r'version',
    r'()I',
  );

  static final _version = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int version()
  int version() {
    return _version(reference.pointer, _id_version as jni.JMethodIDPtr).integer;
  }

  static final _id_variant = _class.instanceMethodId(
    r'variant',
    r'()I',
  );

  static final _variant = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int variant()
  int variant() {
    return _variant(reference.pointer, _id_variant as jni.JMethodIDPtr).integer;
  }

  static final _id_timestamp = _class.instanceMethodId(
    r'timestamp',
    r'()J',
  );

  static final _timestamp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long timestamp()
  int timestamp() {
    return _timestamp(reference.pointer, _id_timestamp as jni.JMethodIDPtr)
        .long;
  }

  static final _id_clockSequence = _class.instanceMethodId(
    r'clockSequence',
    r'()I',
  );

  static final _clockSequence = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int clockSequence()
  int clockSequence() {
    return _clockSequence(
            reference.pointer, _id_clockSequence as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_node = _class.instanceMethodId(
    r'node',
    r'()J',
  );

  static final _node = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long node()
  int node() {
    return _node(reference.pointer, _id_node as jni.JMethodIDPtr).long;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r'compareTo',
    r'(Ljava/util/UUID;)I',
  );

  static final _compareTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.util.UUID uUID)
  int compareTo(
    UUID uUID,
  ) {
    return _compareTo(reference.pointer, _id_compareTo as jni.JMethodIDPtr,
            uUID.reference.pointer)
        .integer;
  }

  static final _id_compareTo1 = _class.instanceMethodId(
    r'compareTo',
    r'(Ljava/lang/Object;)I',
  );

  static final _compareTo1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(
    jni.JObject object,
  ) {
    return _compareTo1(reference.pointer, _id_compareTo1 as jni.JMethodIDPtr,
            object.reference.pointer)
        .integer;
  }
}

final class $UUIDType extends jni.JObjType<UUID> {
  const $UUIDType();

  @override
  String get signature => r'Ljava/util/UUID;';

  @override
  UUID fromReference(jni.JReference reference) => UUID.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UUIDType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UUIDType) && other is $UUIDType;
  }
}

/// from: java.io.InputStream
class InputStream extends jni.JObject {
  @override
  late final jni.JObjType<InputStream> $type = type;

  InputStream.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'java/io/InputStream');

  /// The type which includes information such as the signature of this class.
  static const type = $InputStreamType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory InputStream() {
    return InputStream.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_nullInputStream = _class.staticMethodId(
    r'nullInputStream',
    r'()Ljava/io/InputStream;',
  );

  static final _nullInputStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.io.InputStream nullInputStream()
  /// The returned object must be released after use, by calling the [release] method.
  static InputStream nullInputStream() {
    return _nullInputStream(
            _class.reference.pointer, _id_nullInputStream as jni.JMethodIDPtr)
        .object(const $InputStreamType());
  }

  static final _id_read = _class.instanceMethodId(
    r'read',
    r'()I',
  );

  static final _read = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int read()
  int read() {
    return _read(reference.pointer, _id_read as jni.JMethodIDPtr).integer;
  }

  static final _id_read1 = _class.instanceMethodId(
    r'read',
    r'([B)I',
  );

  static final _read1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int read(byte[] bs)
  int read1(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _read1(reference.pointer, _id_read1 as jni.JMethodIDPtr,
            bs.reference.pointer)
        .integer;
  }

  static final _id_read2 = _class.instanceMethodId(
    r'read',
    r'([BII)I',
  );

  static final _read2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int read(byte[] bs, int i, int i1)
  int read2(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return _read2(reference.pointer, _id_read2 as jni.JMethodIDPtr,
            bs.reference.pointer, i, i1)
        .integer;
  }

  static final _id_readAllBytes = _class.instanceMethodId(
    r'readAllBytes',
    r'()[B',
  );

  static final _readAllBytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public byte[] readAllBytes()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> readAllBytes() {
    return _readAllBytes(
            reference.pointer, _id_readAllBytes as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_readNBytes = _class.instanceMethodId(
    r'readNBytes',
    r'(I)[B',
  );

  static final _readNBytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public byte[] readNBytes(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> readNBytes(
    int i,
  ) {
    return _readNBytes(reference.pointer, _id_readNBytes as jni.JMethodIDPtr, i)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_readNBytes1 = _class.instanceMethodId(
    r'readNBytes',
    r'([BII)I',
  );

  static final _readNBytes1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public int readNBytes(byte[] bs, int i, int i1)
  int readNBytes1(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return _readNBytes1(reference.pointer, _id_readNBytes1 as jni.JMethodIDPtr,
            bs.reference.pointer, i, i1)
        .integer;
  }

  static final _id_skip = _class.instanceMethodId(
    r'skip',
    r'(J)J',
  );

  static final _skip = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public long skip(long j)
  int skip(
    int j,
  ) {
    return _skip(reference.pointer, _id_skip as jni.JMethodIDPtr, j).long;
  }

  static final _id_skipNBytes = _class.instanceMethodId(
    r'skipNBytes',
    r'(J)V',
  );

  static final _skipNBytes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void skipNBytes(long j)
  void skipNBytes(
    int j,
  ) {
    _skipNBytes(reference.pointer, _id_skipNBytes as jni.JMethodIDPtr, j)
        .check();
  }

  static final _id_available = _class.instanceMethodId(
    r'available',
    r'()I',
  );

  static final _available = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int available()
  int available() {
    return _available(reference.pointer, _id_available as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_mark = _class.instanceMethodId(
    r'mark',
    r'(I)V',
  );

  static final _mark = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void mark(int i)
  void mark(
    int i,
  ) {
    _mark(reference.pointer, _id_mark as jni.JMethodIDPtr, i).check();
  }

  static final _id_reset = _class.instanceMethodId(
    r'reset',
    r'()V',
  );

  static final _reset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void reset()
  void reset() {
    _reset(reference.pointer, _id_reset as jni.JMethodIDPtr).check();
  }

  static final _id_markSupported = _class.instanceMethodId(
    r'markSupported',
    r'()Z',
  );

  static final _markSupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean markSupported()
  bool markSupported() {
    return _markSupported(
            reference.pointer, _id_markSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_transferTo = _class.instanceMethodId(
    r'transferTo',
    r'(Ljava/io/OutputStream;)J',
  );

  static final _transferTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public long transferTo(java.io.OutputStream outputStream)
  int transferTo(
    OutputStream outputStream,
  ) {
    return _transferTo(reference.pointer, _id_transferTo as jni.JMethodIDPtr,
            outputStream.reference.pointer)
        .long;
  }
}

final class $InputStreamType extends jni.JObjType<InputStream> {
  const $InputStreamType();

  @override
  String get signature => r'Ljava/io/InputStream;';

  @override
  InputStream fromReference(jni.JReference reference) =>
      InputStream.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($InputStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($InputStreamType) && other is $InputStreamType;
  }
}

/// from: java.io.OutputStream
class OutputStream extends jni.JObject {
  @override
  late final jni.JObjType<OutputStream> $type = type;

  OutputStream.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'java/io/OutputStream');

  /// The type which includes information such as the signature of this class.
  static const type = $OutputStreamType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory OutputStream() {
    return OutputStream.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_nullOutputStream = _class.staticMethodId(
    r'nullOutputStream',
    r'()Ljava/io/OutputStream;',
  );

  static final _nullOutputStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.io.OutputStream nullOutputStream()
  /// The returned object must be released after use, by calling the [release] method.
  static OutputStream nullOutputStream() {
    return _nullOutputStream(
            _class.reference.pointer, _id_nullOutputStream as jni.JMethodIDPtr)
        .object(const $OutputStreamType());
  }

  static final _id_write = _class.instanceMethodId(
    r'write',
    r'(I)V',
  );

  static final _write = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void write(int i)
  void write(
    int i,
  ) {
    _write(reference.pointer, _id_write as jni.JMethodIDPtr, i).check();
  }

  static final _id_write1 = _class.instanceMethodId(
    r'write',
    r'([B)V',
  );

  static final _write1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void write(byte[] bs)
  void write1(
    jni.JArray<jni.jbyte> bs,
  ) {
    _write1(reference.pointer, _id_write1 as jni.JMethodIDPtr,
            bs.reference.pointer)
        .check();
  }

  static final _id_write2 = _class.instanceMethodId(
    r'write',
    r'([BII)V',
  );

  static final _write2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void write(byte[] bs, int i, int i1)
  void write2(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    _write2(reference.pointer, _id_write2 as jni.JMethodIDPtr,
            bs.reference.pointer, i, i1)
        .check();
  }

  static final _id_flush = _class.instanceMethodId(
    r'flush',
    r'()V',
  );

  static final _flush = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void flush()
  void flush() {
    _flush(reference.pointer, _id_flush as jni.JMethodIDPtr).check();
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }
}

final class $OutputStreamType extends jni.JObjType<OutputStream> {
  const $OutputStreamType();

  @override
  String get signature => r'Ljava/io/OutputStream;';

  @override
  OutputStream fromReference(jni.JReference reference) =>
      OutputStream.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($OutputStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($OutputStreamType) &&
        other is $OutputStreamType;
  }
}

/// from: android.bluetooth.BluetoothAdapter$LeScanCallback
class BluetoothAdapter_LeScanCallback extends jni.JObject {
  @override
  late final jni.JObjType<BluetoothAdapter_LeScanCallback> $type = type;

  BluetoothAdapter_LeScanCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/bluetooth/BluetoothAdapter$LeScanCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $BluetoothAdapter_LeScanCallbackType();
  static final _id_onLeScan = _class.instanceMethodId(
    r'onLeScan',
    r'(Landroid/bluetooth/BluetoothDevice;I[B)V',
  );

  static final _onLeScan = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onLeScan(android.bluetooth.BluetoothDevice bluetoothDevice, int i, byte[] bs)
  void onLeScan(
    BluetoothDevice bluetoothDevice,
    int i,
    jni.JArray<jni.jbyte> bs,
  ) {
    _onLeScan(reference.pointer, _id_onLeScan as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer, i, bs.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $BluetoothAdapter_LeScanCallbackImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onLeScan(Landroid/bluetooth/BluetoothDevice;I[B)V') {
        _$impls[$p]!.onLeScan(
          $a[0].castTo(const $BluetoothDeviceType(), releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2].castTo(const jni.JArrayType(jni.jbyteType()),
              releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory BluetoothAdapter_LeScanCallback.implement(
    $BluetoothAdapter_LeScanCallbackImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = BluetoothAdapter_LeScanCallback.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'android.bluetooth.BluetoothAdapter$LeScanCallback',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $BluetoothAdapter_LeScanCallbackImpl {
  factory $BluetoothAdapter_LeScanCallbackImpl({
    required void Function(
            BluetoothDevice bluetoothDevice, int i, jni.JArray<jni.jbyte> bs)
        onLeScan,
  }) = _$BluetoothAdapter_LeScanCallbackImpl;

  void onLeScan(
      BluetoothDevice bluetoothDevice, int i, jni.JArray<jni.jbyte> bs);
}

class _$BluetoothAdapter_LeScanCallbackImpl
    implements $BluetoothAdapter_LeScanCallbackImpl {
  _$BluetoothAdapter_LeScanCallbackImpl({
    required void Function(
            BluetoothDevice bluetoothDevice, int i, jni.JArray<jni.jbyte> bs)
        onLeScan,
  }) : _onLeScan = onLeScan;

  final void Function(
          BluetoothDevice bluetoothDevice, int i, jni.JArray<jni.jbyte> bs)
      _onLeScan;

  void onLeScan(
      BluetoothDevice bluetoothDevice, int i, jni.JArray<jni.jbyte> bs) {
    return _onLeScan(bluetoothDevice, i, bs);
  }
}

final class $BluetoothAdapter_LeScanCallbackType
    extends jni.JObjType<BluetoothAdapter_LeScanCallback> {
  const $BluetoothAdapter_LeScanCallbackType();

  @override
  String get signature =>
      r'Landroid/bluetooth/BluetoothAdapter$LeScanCallback;';

  @override
  BluetoothAdapter_LeScanCallback fromReference(jni.JReference reference) =>
      BluetoothAdapter_LeScanCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BluetoothAdapter_LeScanCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter_LeScanCallbackType) &&
        other is $BluetoothAdapter_LeScanCallbackType;
  }
}

/// from: android.bluetooth.BluetoothAdapter
class BluetoothAdapter extends jni.JObject {
  @override
  late final jni.JObjType<BluetoothAdapter> $type = type;

  BluetoothAdapter.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/bluetooth/BluetoothAdapter');

  /// The type which includes information such as the signature of this class.
  static const type = $BluetoothAdapterType();
  static final _id_ACTION_CONNECTION_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_CONNECTION_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CONNECTION_STATE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CONNECTION_STATE_CHANGED =>
      _id_ACTION_CONNECTION_STATE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_DISCOVERY_FINISHED = _class.staticFieldId(
    r'ACTION_DISCOVERY_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DISCOVERY_FINISHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DISCOVERY_FINISHED =>
      _id_ACTION_DISCOVERY_FINISHED.get(_class, const jni.JStringType());

  static final _id_ACTION_DISCOVERY_STARTED = _class.staticFieldId(
    r'ACTION_DISCOVERY_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DISCOVERY_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DISCOVERY_STARTED =>
      _id_ACTION_DISCOVERY_STARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_LOCAL_NAME_CHANGED = _class.staticFieldId(
    r'ACTION_LOCAL_NAME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_LOCAL_NAME_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCAL_NAME_CHANGED =>
      _id_ACTION_LOCAL_NAME_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_REQUEST_DISCOVERABLE = _class.staticFieldId(
    r'ACTION_REQUEST_DISCOVERABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_REQUEST_DISCOVERABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REQUEST_DISCOVERABLE =>
      _id_ACTION_REQUEST_DISCOVERABLE.get(_class, const jni.JStringType());

  static final _id_ACTION_REQUEST_ENABLE = _class.staticFieldId(
    r'ACTION_REQUEST_ENABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_REQUEST_ENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REQUEST_ENABLE =>
      _id_ACTION_REQUEST_ENABLE.get(_class, const jni.JStringType());

  static final _id_ACTION_SCAN_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_SCAN_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SCAN_MODE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCAN_MODE_CHANGED =>
      _id_ACTION_SCAN_MODE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_STATE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_STATE_CHANGED =>
      _id_ACTION_STATE_CHANGED.get(_class, const jni.JStringType());

  /// from: static public final int ERROR
  static const ERROR = -2147483648;
  static final _id_EXTRA_CONNECTION_STATE = _class.staticFieldId(
    r'EXTRA_CONNECTION_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CONNECTION_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONNECTION_STATE =>
      _id_EXTRA_CONNECTION_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_DISCOVERABLE_DURATION = _class.staticFieldId(
    r'EXTRA_DISCOVERABLE_DURATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DISCOVERABLE_DURATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DISCOVERABLE_DURATION =>
      _id_EXTRA_DISCOVERABLE_DURATION.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCAL_NAME = _class.staticFieldId(
    r'EXTRA_LOCAL_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_LOCAL_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCAL_NAME =>
      _id_EXTRA_LOCAL_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_PREVIOUS_CONNECTION_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_CONNECTION_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PREVIOUS_CONNECTION_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PREVIOUS_CONNECTION_STATE =>
      _id_EXTRA_PREVIOUS_CONNECTION_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_PREVIOUS_SCAN_MODE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_SCAN_MODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PREVIOUS_SCAN_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PREVIOUS_SCAN_MODE =>
      _id_EXTRA_PREVIOUS_SCAN_MODE.get(_class, const jni.JStringType());

  static final _id_EXTRA_PREVIOUS_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PREVIOUS_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PREVIOUS_STATE =>
      _id_EXTRA_PREVIOUS_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_SCAN_MODE = _class.staticFieldId(
    r'EXTRA_SCAN_MODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SCAN_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SCAN_MODE =>
      _id_EXTRA_SCAN_MODE.get(_class, const jni.JStringType());

  static final _id_EXTRA_STATE = _class.staticFieldId(
    r'EXTRA_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_STATE =>
      _id_EXTRA_STATE.get(_class, const jni.JStringType());

  /// from: static public final int SCAN_MODE_CONNECTABLE
  static const SCAN_MODE_CONNECTABLE = 21;

  /// from: static public final int SCAN_MODE_CONNECTABLE_DISCOVERABLE
  static const SCAN_MODE_CONNECTABLE_DISCOVERABLE = 23;

  /// from: static public final int SCAN_MODE_NONE
  static const SCAN_MODE_NONE = 20;

  /// from: static public final int STATE_CONNECTED
  static const STATE_CONNECTED = 2;

  /// from: static public final int STATE_CONNECTING
  static const STATE_CONNECTING = 1;

  /// from: static public final int STATE_DISCONNECTED
  static const STATE_DISCONNECTED = 0;

  /// from: static public final int STATE_DISCONNECTING
  static const STATE_DISCONNECTING = 3;

  /// from: static public final int STATE_OFF
  static const STATE_OFF = 10;

  /// from: static public final int STATE_ON
  static const STATE_ON = 12;

  /// from: static public final int STATE_TURNING_OFF
  static const STATE_TURNING_OFF = 13;

  /// from: static public final int STATE_TURNING_ON
  static const STATE_TURNING_ON = 11;
  static final _id_getDefaultAdapter = _class.staticMethodId(
    r'getDefaultAdapter',
    r'()Landroid/bluetooth/BluetoothAdapter;',
  );

  static final _getDefaultAdapter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public android.bluetooth.BluetoothAdapter getDefaultAdapter()
  /// The returned object must be released after use, by calling the [release] method.
  static BluetoothAdapter getDefaultAdapter() {
    return _getDefaultAdapter(
            _class.reference.pointer, _id_getDefaultAdapter as jni.JMethodIDPtr)
        .object(const $BluetoothAdapterType());
  }

  static final _id_getRemoteDevice = _class.instanceMethodId(
    r'getRemoteDevice',
    r'(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice getRemoteDevice(
    jni.JString string,
  ) {
    return _getRemoteDevice(reference.pointer,
            _id_getRemoteDevice as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $BluetoothDeviceType());
  }

  static final _id_getRemoteLeDevice = _class.instanceMethodId(
    r'getRemoteLeDevice',
    r'(Ljava/lang/String;I)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteLeDevice = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.bluetooth.BluetoothDevice getRemoteLeDevice(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice getRemoteLeDevice(
    jni.JString string,
    int i,
  ) {
    return _getRemoteLeDevice(
            reference.pointer,
            _id_getRemoteLeDevice as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $BluetoothDeviceType());
  }

  static final _id_getRemoteDevice1 = _class.instanceMethodId(
    r'getRemoteDevice',
    r'([B)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothDevice getRemoteDevice(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice getRemoteDevice1(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _getRemoteDevice1(reference.pointer,
            _id_getRemoteDevice1 as jni.JMethodIDPtr, bs.reference.pointer)
        .object(const $BluetoothDeviceType());
  }

  static final _id_getBluetoothLeAdvertiser = _class.instanceMethodId(
    r'getBluetoothLeAdvertiser',
    r'()Landroid/bluetooth/le/BluetoothLeAdvertiser;',
  );

  static final _getBluetoothLeAdvertiser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBluetoothLeAdvertiser() {
    return _getBluetoothLeAdvertiser(
            reference.pointer, _id_getBluetoothLeAdvertiser as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getBluetoothLeScanner = _class.instanceMethodId(
    r'getBluetoothLeScanner',
    r'()Landroid/bluetooth/le/BluetoothLeScanner;',
  );

  static final _getBluetoothLeScanner = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBluetoothLeScanner() {
    return _getBluetoothLeScanner(
            reference.pointer, _id_getBluetoothLeScanner as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isEnabled = _class.instanceMethodId(
    r'isEnabled',
    r'()Z',
  );

  static final _isEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isEnabled()
  bool isEnabled() {
    return _isEnabled(reference.pointer, _id_isEnabled as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getState = _class.instanceMethodId(
    r'getState',
    r'()I',
  );

  static final _getState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getState()
  int getState() {
    return _getState(reference.pointer, _id_getState as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_enable = _class.instanceMethodId(
    r'enable',
    r'()Z',
  );

  static final _enable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean enable()
  bool enable() {
    return _enable(reference.pointer, _id_enable as jni.JMethodIDPtr).boolean;
  }

  static final _id_disable = _class.instanceMethodId(
    r'disable',
    r'()Z',
  );

  static final _disable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean disable()
  bool disable() {
    return _disable(reference.pointer, _id_disable as jni.JMethodIDPtr).boolean;
  }

  static final _id_getAddress = _class.instanceMethodId(
    r'getAddress',
    r'()Ljava/lang/String;',
  );

  static final _getAddress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAddress()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddress() {
    return _getAddress(reference.pointer, _id_getAddress as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getName() {
    return _getName(reference.pointer, _id_getName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setName = _class.instanceMethodId(
    r'setName',
    r'(Ljava/lang/String;)Z',
  );

  static final _setName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setName(java.lang.String string)
  bool setName(
    jni.JString string,
  ) {
    return _setName(reference.pointer, _id_setName as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getScanMode = _class.instanceMethodId(
    r'getScanMode',
    r'()I',
  );

  static final _getScanMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getScanMode()
  int getScanMode() {
    return _getScanMode(reference.pointer, _id_getScanMode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDiscoverableTimeout = _class.instanceMethodId(
    r'getDiscoverableTimeout',
    r'()Ljava/time/Duration;',
  );

  static final _getDiscoverableTimeout = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.time.Duration getDiscoverableTimeout()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDiscoverableTimeout() {
    return _getDiscoverableTimeout(
            reference.pointer, _id_getDiscoverableTimeout as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_startDiscovery = _class.instanceMethodId(
    r'startDiscovery',
    r'()Z',
  );

  static final _startDiscovery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean startDiscovery()
  bool startDiscovery() {
    return _startDiscovery(
            reference.pointer, _id_startDiscovery as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_cancelDiscovery = _class.instanceMethodId(
    r'cancelDiscovery',
    r'()Z',
  );

  static final _cancelDiscovery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean cancelDiscovery()
  bool cancelDiscovery() {
    return _cancelDiscovery(
            reference.pointer, _id_cancelDiscovery as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDiscovering = _class.instanceMethodId(
    r'isDiscovering',
    r'()Z',
  );

  static final _isDiscovering = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isDiscovering()
  bool isDiscovering() {
    return _isDiscovering(
            reference.pointer, _id_isDiscovering as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isMultipleAdvertisementSupported = _class.instanceMethodId(
    r'isMultipleAdvertisementSupported',
    r'()Z',
  );

  static final _isMultipleAdvertisementSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public boolean isMultipleAdvertisementSupported()
  bool isMultipleAdvertisementSupported() {
    return _isMultipleAdvertisementSupported(reference.pointer,
            _id_isMultipleAdvertisementSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOffloadedFilteringSupported = _class.instanceMethodId(
    r'isOffloadedFilteringSupported',
    r'()Z',
  );

  static final _isOffloadedFilteringSupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isOffloadedFilteringSupported()
  bool isOffloadedFilteringSupported() {
    return _isOffloadedFilteringSupported(reference.pointer,
            _id_isOffloadedFilteringSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOffloadedScanBatchingSupported = _class.instanceMethodId(
    r'isOffloadedScanBatchingSupported',
    r'()Z',
  );

  static final _isOffloadedScanBatchingSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public boolean isOffloadedScanBatchingSupported()
  bool isOffloadedScanBatchingSupported() {
    return _isOffloadedScanBatchingSupported(reference.pointer,
            _id_isOffloadedScanBatchingSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLe2MPhySupported = _class.instanceMethodId(
    r'isLe2MPhySupported',
    r'()Z',
  );

  static final _isLe2MPhySupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isLe2MPhySupported()
  bool isLe2MPhySupported() {
    return _isLe2MPhySupported(
            reference.pointer, _id_isLe2MPhySupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLeCodedPhySupported = _class.instanceMethodId(
    r'isLeCodedPhySupported',
    r'()Z',
  );

  static final _isLeCodedPhySupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isLeCodedPhySupported()
  bool isLeCodedPhySupported() {
    return _isLeCodedPhySupported(
            reference.pointer, _id_isLeCodedPhySupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLeExtendedAdvertisingSupported = _class.instanceMethodId(
    r'isLeExtendedAdvertisingSupported',
    r'()Z',
  );

  static final _isLeExtendedAdvertisingSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public boolean isLeExtendedAdvertisingSupported()
  bool isLeExtendedAdvertisingSupported() {
    return _isLeExtendedAdvertisingSupported(reference.pointer,
            _id_isLeExtendedAdvertisingSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLePeriodicAdvertisingSupported = _class.instanceMethodId(
    r'isLePeriodicAdvertisingSupported',
    r'()Z',
  );

  static final _isLePeriodicAdvertisingSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public boolean isLePeriodicAdvertisingSupported()
  bool isLePeriodicAdvertisingSupported() {
    return _isLePeriodicAdvertisingSupported(reference.pointer,
            _id_isLePeriodicAdvertisingSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLeAudioSupported = _class.instanceMethodId(
    r'isLeAudioSupported',
    r'()I',
  );

  static final _isLeAudioSupported = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int isLeAudioSupported()
  int isLeAudioSupported() {
    return _isLeAudioSupported(
            reference.pointer, _id_isLeAudioSupported as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isLeAudioBroadcastSourceSupported = _class.instanceMethodId(
    r'isLeAudioBroadcastSourceSupported',
    r'()I',
  );

  static final _isLeAudioBroadcastSourceSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int isLeAudioBroadcastSourceSupported()
  int isLeAudioBroadcastSourceSupported() {
    return _isLeAudioBroadcastSourceSupported(reference.pointer,
            _id_isLeAudioBroadcastSourceSupported as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isLeAudioBroadcastAssistantSupported =
      _class.instanceMethodId(
    r'isLeAudioBroadcastAssistantSupported',
    r'()I',
  );

  static final _isLeAudioBroadcastAssistantSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int isLeAudioBroadcastAssistantSupported()
  int isLeAudioBroadcastAssistantSupported() {
    return _isLeAudioBroadcastAssistantSupported(reference.pointer,
            _id_isLeAudioBroadcastAssistantSupported as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLeMaximumAdvertisingDataLength = _class.instanceMethodId(
    r'getLeMaximumAdvertisingDataLength',
    r'()I',
  );

  static final _getLeMaximumAdvertisingDataLength =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int getLeMaximumAdvertisingDataLength()
  int getLeMaximumAdvertisingDataLength() {
    return _getLeMaximumAdvertisingDataLength(reference.pointer,
            _id_getLeMaximumAdvertisingDataLength as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMaxConnectedAudioDevices = _class.instanceMethodId(
    r'getMaxConnectedAudioDevices',
    r'()I',
  );

  static final _getMaxConnectedAudioDevices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getMaxConnectedAudioDevices()
  int getMaxConnectedAudioDevices() {
    return _getMaxConnectedAudioDevices(reference.pointer,
            _id_getMaxConnectedAudioDevices as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBondedDevices = _class.instanceMethodId(
    r'getBondedDevices',
    r'()Ljava/util/Set;',
  );

  static final _getBondedDevices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getBondedDevices()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<BluetoothDevice> getBondedDevices() {
    return _getBondedDevices(
            reference.pointer, _id_getBondedDevices as jni.JMethodIDPtr)
        .object(const jni.JSetType($BluetoothDeviceType()));
  }

  static final _id_getProfileConnectionState = _class.instanceMethodId(
    r'getProfileConnectionState',
    r'(I)I',
  );

  static final _getProfileConnectionState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public int getProfileConnectionState(int i)
  int getProfileConnectionState(
    int i,
  ) {
    return _getProfileConnectionState(reference.pointer,
            _id_getProfileConnectionState as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_listenUsingRfcommWithServiceRecord = _class.instanceMethodId(
    r'listenUsingRfcommWithServiceRecord',
    r'(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingRfcommWithServiceRecord =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String string, java.util.UUID uUID)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject listenUsingRfcommWithServiceRecord(
    jni.JString string,
    UUID uUID,
  ) {
    return _listenUsingRfcommWithServiceRecord(
            reference.pointer,
            _id_listenUsingRfcommWithServiceRecord as jni.JMethodIDPtr,
            string.reference.pointer,
            uUID.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_listenUsingInsecureRfcommWithServiceRecord =
      _class.instanceMethodId(
    r'listenUsingInsecureRfcommWithServiceRecord',
    r'(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingInsecureRfcommWithServiceRecord =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String string, java.util.UUID uUID)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject listenUsingInsecureRfcommWithServiceRecord(
    jni.JString string,
    UUID uUID,
  ) {
    return _listenUsingInsecureRfcommWithServiceRecord(
            reference.pointer,
            _id_listenUsingInsecureRfcommWithServiceRecord as jni.JMethodIDPtr,
            string.reference.pointer,
            uUID.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getProfileProxy = _class.instanceMethodId(
    r'getProfileProxy',
    r'(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z',
  );

  static final _getProfileProxy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getProfileProxy(android.content.Context context, android.bluetooth.BluetoothProfile$ServiceListener serviceListener, int i)
  bool getProfileProxy(
    Context context,
    jni.JObject serviceListener,
    int i,
  ) {
    return _getProfileProxy(
            reference.pointer,
            _id_getProfileProxy as jni.JMethodIDPtr,
            context.reference.pointer,
            serviceListener.reference.pointer,
            i)
        .boolean;
  }

  static final _id_closeProfileProxy = _class.instanceMethodId(
    r'closeProfileProxy',
    r'(ILandroid/bluetooth/BluetoothProfile;)V',
  );

  static final _closeProfileProxy = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void closeProfileProxy(int i, android.bluetooth.BluetoothProfile bluetoothProfile)
  void closeProfileProxy(
    int i,
    jni.JObject bluetoothProfile,
  ) {
    _closeProfileProxy(
            reference.pointer,
            _id_closeProfileProxy as jni.JMethodIDPtr,
            i,
            bluetoothProfile.reference.pointer)
        .check();
  }

  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void finalize()
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }

  static final _id_checkBluetoothAddress = _class.staticMethodId(
    r'checkBluetoothAddress',
    r'(Ljava/lang/String;)Z',
  );

  static final _checkBluetoothAddress = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean checkBluetoothAddress(java.lang.String string)
  static bool checkBluetoothAddress(
    jni.JString string,
  ) {
    return _checkBluetoothAddress(
            _class.reference.pointer,
            _id_checkBluetoothAddress as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_startLeScan = _class.instanceMethodId(
    r'startLeScan',
    r'(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z',
  );

  static final _startLeScan = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)
  bool startLeScan(
    BluetoothAdapter_LeScanCallback leScanCallback,
  ) {
    return _startLeScan(reference.pointer, _id_startLeScan as jni.JMethodIDPtr,
            leScanCallback.reference.pointer)
        .boolean;
  }

  static final _id_startLeScan1 = _class.instanceMethodId(
    r'startLeScan',
    r'([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z',
  );

  static final _startLeScan1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startLeScan(java.util.UUID[] uUIDs, android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)
  bool startLeScan1(
    jni.JArray<UUID> uUIDs,
    BluetoothAdapter_LeScanCallback leScanCallback,
  ) {
    return _startLeScan1(
            reference.pointer,
            _id_startLeScan1 as jni.JMethodIDPtr,
            uUIDs.reference.pointer,
            leScanCallback.reference.pointer)
        .boolean;
  }

  static final _id_stopLeScan = _class.instanceMethodId(
    r'stopLeScan',
    r'(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V',
  );

  static final _stopLeScan = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)
  void stopLeScan(
    BluetoothAdapter_LeScanCallback leScanCallback,
  ) {
    _stopLeScan(reference.pointer, _id_stopLeScan as jni.JMethodIDPtr,
            leScanCallback.reference.pointer)
        .check();
  }

  static final _id_listenUsingL2capChannel = _class.instanceMethodId(
    r'listenUsingL2capChannel',
    r'()Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingL2capChannel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.BluetoothServerSocket listenUsingL2capChannel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject listenUsingL2capChannel() {
    return _listenUsingL2capChannel(
            reference.pointer, _id_listenUsingL2capChannel as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_listenUsingInsecureL2capChannel = _class.instanceMethodId(
    r'listenUsingInsecureL2capChannel',
    r'()Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingInsecureL2capChannel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capChannel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject listenUsingInsecureL2capChannel() {
    return _listenUsingInsecureL2capChannel(reference.pointer,
            _id_listenUsingInsecureL2capChannel as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $BluetoothAdapterType extends jni.JObjType<BluetoothAdapter> {
  const $BluetoothAdapterType();

  @override
  String get signature => r'Landroid/bluetooth/BluetoothAdapter;';

  @override
  BluetoothAdapter fromReference(jni.JReference reference) =>
      BluetoothAdapter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BluetoothAdapterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapterType) &&
        other is $BluetoothAdapterType;
  }
}

/// from: android.bluetooth.BluetoothDevice
class BluetoothDevice extends jni.JObject {
  @override
  late final jni.JObjType<BluetoothDevice> $type = type;

  BluetoothDevice.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/bluetooth/BluetoothDevice');

  /// The type which includes information such as the signature of this class.
  static const type = $BluetoothDeviceType();
  static final _id_ACTION_ACL_CONNECTED = _class.staticFieldId(
    r'ACTION_ACL_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ACL_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ACL_CONNECTED =>
      _id_ACTION_ACL_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_ACL_DISCONNECTED = _class.staticFieldId(
    r'ACTION_ACL_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ACL_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ACL_DISCONNECTED =>
      _id_ACTION_ACL_DISCONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_ACL_DISCONNECT_REQUESTED = _class.staticFieldId(
    r'ACTION_ACL_DISCONNECT_REQUESTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ACL_DISCONNECT_REQUESTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ACL_DISCONNECT_REQUESTED =>
      _id_ACTION_ACL_DISCONNECT_REQUESTED.get(_class, const jni.JStringType());

  static final _id_ACTION_ALIAS_CHANGED = _class.staticFieldId(
    r'ACTION_ALIAS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ALIAS_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ALIAS_CHANGED =>
      _id_ACTION_ALIAS_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_BOND_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_BOND_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_BOND_STATE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BOND_STATE_CHANGED =>
      _id_ACTION_BOND_STATE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_CLASS_CHANGED = _class.staticFieldId(
    r'ACTION_CLASS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CLASS_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CLASS_CHANGED =>
      _id_ACTION_CLASS_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_FOUND = _class.staticFieldId(
    r'ACTION_FOUND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_FOUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_FOUND =>
      _id_ACTION_FOUND.get(_class, const jni.JStringType());

  static final _id_ACTION_NAME_CHANGED = _class.staticFieldId(
    r'ACTION_NAME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_NAME_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_NAME_CHANGED =>
      _id_ACTION_NAME_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_PAIRING_REQUEST = _class.staticFieldId(
    r'ACTION_PAIRING_REQUEST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PAIRING_REQUEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PAIRING_REQUEST =>
      _id_ACTION_PAIRING_REQUEST.get(_class, const jni.JStringType());

  static final _id_ACTION_UUID = _class.staticFieldId(
    r'ACTION_UUID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_UUID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UUID =>
      _id_ACTION_UUID.get(_class, const jni.JStringType());

  /// from: static public final int ADDRESS_TYPE_PUBLIC
  static const ADDRESS_TYPE_PUBLIC = 0;

  /// from: static public final int ADDRESS_TYPE_RANDOM
  static const ADDRESS_TYPE_RANDOM = 1;

  /// from: static public final int ADDRESS_TYPE_UNKNOWN
  static const ADDRESS_TYPE_UNKNOWN = 65535;

  /// from: static public final int BOND_BONDED
  static const BOND_BONDED = 12;

  /// from: static public final int BOND_BONDING
  static const BOND_BONDING = 11;

  /// from: static public final int BOND_NONE
  static const BOND_NONE = 10;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: static public final int DEVICE_TYPE_CLASSIC
  static const DEVICE_TYPE_CLASSIC = 1;

  /// from: static public final int DEVICE_TYPE_DUAL
  static const DEVICE_TYPE_DUAL = 3;

  /// from: static public final int DEVICE_TYPE_LE
  static const DEVICE_TYPE_LE = 2;

  /// from: static public final int DEVICE_TYPE_UNKNOWN
  static const DEVICE_TYPE_UNKNOWN = 0;

  /// from: static public final int ERROR
  static const ERROR = -2147483648;
  static final _id_EXTRA_BOND_STATE = _class.staticFieldId(
    r'EXTRA_BOND_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_BOND_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BOND_STATE =>
      _id_EXTRA_BOND_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_CLASS = _class.staticFieldId(
    r'EXTRA_CLASS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CLASS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CLASS =>
      _id_EXTRA_CLASS.get(_class, const jni.JStringType());

  static final _id_EXTRA_DEVICE = _class.staticFieldId(
    r'EXTRA_DEVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DEVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DEVICE =>
      _id_EXTRA_DEVICE.get(_class, const jni.JStringType());

  static final _id_EXTRA_IS_COORDINATED_SET_MEMBER = _class.staticFieldId(
    r'EXTRA_IS_COORDINATED_SET_MEMBER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_IS_COORDINATED_SET_MEMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_IS_COORDINATED_SET_MEMBER =>
      _id_EXTRA_IS_COORDINATED_SET_MEMBER.get(_class, const jni.JStringType());

  static final _id_EXTRA_NAME = _class.staticFieldId(
    r'EXTRA_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_NAME =>
      _id_EXTRA_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_PAIRING_KEY = _class.staticFieldId(
    r'EXTRA_PAIRING_KEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PAIRING_KEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PAIRING_KEY =>
      _id_EXTRA_PAIRING_KEY.get(_class, const jni.JStringType());

  static final _id_EXTRA_PAIRING_VARIANT = _class.staticFieldId(
    r'EXTRA_PAIRING_VARIANT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PAIRING_VARIANT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PAIRING_VARIANT =>
      _id_EXTRA_PAIRING_VARIANT.get(_class, const jni.JStringType());

  static final _id_EXTRA_PREVIOUS_BOND_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_BOND_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PREVIOUS_BOND_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PREVIOUS_BOND_STATE =>
      _id_EXTRA_PREVIOUS_BOND_STATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_RSSI = _class.staticFieldId(
    r'EXTRA_RSSI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_RSSI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RSSI =>
      _id_EXTRA_RSSI.get(_class, const jni.JStringType());

  static final _id_EXTRA_TRANSPORT = _class.staticFieldId(
    r'EXTRA_TRANSPORT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_TRANSPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TRANSPORT =>
      _id_EXTRA_TRANSPORT.get(_class, const jni.JStringType());

  static final _id_EXTRA_UUID = _class.staticFieldId(
    r'EXTRA_UUID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_UUID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_UUID =>
      _id_EXTRA_UUID.get(_class, const jni.JStringType());

  /// from: static public final int PAIRING_VARIANT_PASSKEY_CONFIRMATION
  static const PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2;

  /// from: static public final int PAIRING_VARIANT_PIN
  static const PAIRING_VARIANT_PIN = 0;

  /// from: static public final int PHY_LE_1M
  static const PHY_LE_1M = 1;

  /// from: static public final int PHY_LE_1M_MASK
  static const PHY_LE_1M_MASK = 1;

  /// from: static public final int PHY_LE_2M
  static const PHY_LE_2M = 2;

  /// from: static public final int PHY_LE_2M_MASK
  static const PHY_LE_2M_MASK = 2;

  /// from: static public final int PHY_LE_CODED
  static const PHY_LE_CODED = 3;

  /// from: static public final int PHY_LE_CODED_MASK
  static const PHY_LE_CODED_MASK = 4;

  /// from: static public final int PHY_OPTION_NO_PREFERRED
  static const PHY_OPTION_NO_PREFERRED = 0;

  /// from: static public final int PHY_OPTION_S2
  static const PHY_OPTION_S2 = 1;

  /// from: static public final int PHY_OPTION_S8
  static const PHY_OPTION_S8 = 2;

  /// from: static public final int TRANSPORT_AUTO
  static const TRANSPORT_AUTO = 0;

  /// from: static public final int TRANSPORT_BREDR
  static const TRANSPORT_BREDR = 1;

  /// from: static public final int TRANSPORT_LE
  static const TRANSPORT_LE = 2;
  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_getAddress = _class.instanceMethodId(
    r'getAddress',
    r'()Ljava/lang/String;',
  );

  static final _getAddress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAddress()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAddress() {
    return _getAddress(reference.pointer, _id_getAddress as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getName() {
    return _getName(reference.pointer, _id_getName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getType()
  int getType() {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr).integer;
  }

  static final _id_getAlias = _class.instanceMethodId(
    r'getAlias',
    r'()Ljava/lang/String;',
  );

  static final _getAlias = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAlias()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAlias() {
    return _getAlias(reference.pointer, _id_getAlias as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setAlias = _class.instanceMethodId(
    r'setAlias',
    r'(Ljava/lang/String;)I',
  );

  static final _setAlias = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int setAlias(java.lang.String string)
  int setAlias(
    jni.JString string,
  ) {
    return _setAlias(reference.pointer, _id_setAlias as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_createBond = _class.instanceMethodId(
    r'createBond',
    r'()Z',
  );

  static final _createBond = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean createBond()
  bool createBond() {
    return _createBond(reference.pointer, _id_createBond as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getBondState = _class.instanceMethodId(
    r'getBondState',
    r'()I',
  );

  static final _getBondState = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getBondState()
  int getBondState() {
    return _getBondState(
            reference.pointer, _id_getBondState as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBluetoothClass = _class.instanceMethodId(
    r'getBluetoothClass',
    r'()Landroid/bluetooth/BluetoothClass;',
  );

  static final _getBluetoothClass = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.BluetoothClass getBluetoothClass()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBluetoothClass() {
    return _getBluetoothClass(
            reference.pointer, _id_getBluetoothClass as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getUuids = _class.instanceMethodId(
    r'getUuids',
    r'()[Landroid/os/ParcelUuid;',
  );

  static final _getUuids = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.os.ParcelUuid[] getUuids()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<ParcelUuid> getUuids() {
    return _getUuids(reference.pointer, _id_getUuids as jni.JMethodIDPtr)
        .object(const jni.JArrayType($ParcelUuidType()));
  }

  static final _id_fetchUuidsWithSdp = _class.instanceMethodId(
    r'fetchUuidsWithSdp',
    r'()Z',
  );

  static final _fetchUuidsWithSdp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean fetchUuidsWithSdp()
  bool fetchUuidsWithSdp() {
    return _fetchUuidsWithSdp(
            reference.pointer, _id_fetchUuidsWithSdp as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setPin = _class.instanceMethodId(
    r'setPin',
    r'([B)Z',
  );

  static final _setPin = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean setPin(byte[] bs)
  bool setPin(
    jni.JArray<jni.jbyte> bs,
  ) {
    return _setPin(reference.pointer, _id_setPin as jni.JMethodIDPtr,
            bs.reference.pointer)
        .boolean;
  }

  static final _id_setPairingConfirmation = _class.instanceMethodId(
    r'setPairingConfirmation',
    r'(Z)Z',
  );

  static final _setPairingConfirmation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean setPairingConfirmation(boolean z)
  bool setPairingConfirmation(
    bool z,
  ) {
    return _setPairingConfirmation(reference.pointer,
            _id_setPairingConfirmation as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_createRfcommSocketToServiceRecord = _class.instanceMethodId(
    r'createRfcommSocketToServiceRecord',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createRfcommSocketToServiceRecord =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID uUID)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket createRfcommSocketToServiceRecord(
    UUID uUID,
  ) {
    return _createRfcommSocketToServiceRecord(
            reference.pointer,
            _id_createRfcommSocketToServiceRecord as jni.JMethodIDPtr,
            uUID.reference.pointer)
        .object(const $BluetoothSocketType());
  }

  static final _id_createInsecureRfcommSocketToServiceRecord =
      _class.instanceMethodId(
    r'createInsecureRfcommSocketToServiceRecord',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createInsecureRfcommSocketToServiceRecord =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID uUID)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket createInsecureRfcommSocketToServiceRecord(
    UUID uUID,
  ) {
    return _createInsecureRfcommSocketToServiceRecord(
            reference.pointer,
            _id_createInsecureRfcommSocketToServiceRecord as jni.JMethodIDPtr,
            uUID.reference.pointer)
        .object(const $BluetoothSocketType());
  }

  static final _id_connectGatt = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject connectGatt(
    Context context,
    bool z,
    jni.JObject bluetoothGattCallback,
  ) {
    return _connectGatt(
            reference.pointer,
            _id_connectGatt as jni.JMethodIDPtr,
            context.reference.pointer,
            z ? 1 : 0,
            bluetoothGattCallback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_connectGatt1 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject connectGatt1(
    Context context,
    bool z,
    jni.JObject bluetoothGattCallback,
    int i,
  ) {
    return _connectGatt1(
            reference.pointer,
            _id_connectGatt1 as jni.JMethodIDPtr,
            context.reference.pointer,
            z ? 1 : 0,
            bluetoothGattCallback.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_connectGatt2 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject connectGatt2(
    Context context,
    bool z,
    jni.JObject bluetoothGattCallback,
    int i,
    int i1,
  ) {
    return _connectGatt2(
            reference.pointer,
            _id_connectGatt2 as jni.JMethodIDPtr,
            context.reference.pointer,
            z ? 1 : 0,
            bluetoothGattCallback.reference.pointer,
            i,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_connectGatt3 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;IILandroid/os/Handler;)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i, int i1, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject connectGatt3(
    Context context,
    bool z,
    jni.JObject bluetoothGattCallback,
    int i,
    int i1,
    jni.JObject handler,
  ) {
    return _connectGatt3(
            reference.pointer,
            _id_connectGatt3 as jni.JMethodIDPtr,
            context.reference.pointer,
            z ? 1 : 0,
            bluetoothGattCallback.reference.pointer,
            i,
            i1,
            handler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createL2capChannel = _class.instanceMethodId(
    r'createL2capChannel',
    r'(I)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createL2capChannel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.bluetooth.BluetoothSocket createL2capChannel(int i)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket createL2capChannel(
    int i,
  ) {
    return _createL2capChannel(
            reference.pointer, _id_createL2capChannel as jni.JMethodIDPtr, i)
        .object(const $BluetoothSocketType());
  }

  static final _id_createInsecureL2capChannel = _class.instanceMethodId(
    r'createInsecureL2capChannel',
    r'(I)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createInsecureL2capChannel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.bluetooth.BluetoothSocket createInsecureL2capChannel(int i)
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket createInsecureL2capChannel(
    int i,
  ) {
    return _createInsecureL2capChannel(reference.pointer,
            _id_createInsecureL2capChannel as jni.JMethodIDPtr, i)
        .object(const $BluetoothSocketType());
  }
}

final class $BluetoothDeviceType extends jni.JObjType<BluetoothDevice> {
  const $BluetoothDeviceType();

  @override
  String get signature => r'Landroid/bluetooth/BluetoothDevice;';

  @override
  BluetoothDevice fromReference(jni.JReference reference) =>
      BluetoothDevice.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BluetoothDeviceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothDeviceType) &&
        other is $BluetoothDeviceType;
  }
}

/// from: android.bluetooth.BluetoothManager
class BluetoothManager extends jni.JObject {
  @override
  late final jni.JObjType<BluetoothManager> $type = type;

  BluetoothManager.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/bluetooth/BluetoothManager');

  /// The type which includes information such as the signature of this class.
  static const type = $BluetoothManagerType();
  static final _id_getAdapter = _class.instanceMethodId(
    r'getAdapter',
    r'()Landroid/bluetooth/BluetoothAdapter;',
  );

  static final _getAdapter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.BluetoothAdapter getAdapter()
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothAdapter getAdapter() {
    return _getAdapter(reference.pointer, _id_getAdapter as jni.JMethodIDPtr)
        .object(const $BluetoothAdapterType());
  }

  static final _id_getConnectionState = _class.instanceMethodId(
    r'getConnectionState',
    r'(Landroid/bluetooth/BluetoothDevice;I)I',
  );

  static final _getConnectionState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getConnectionState(android.bluetooth.BluetoothDevice bluetoothDevice, int i)
  int getConnectionState(
    BluetoothDevice bluetoothDevice,
    int i,
  ) {
    return _getConnectionState(
            reference.pointer,
            _id_getConnectionState as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer,
            i)
        .integer;
  }

  static final _id_getConnectedDevices = _class.instanceMethodId(
    r'getConnectedDevices',
    r'(I)Ljava/util/List;',
  );

  static final _getConnectedDevices = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.util.List getConnectedDevices(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<BluetoothDevice> getConnectedDevices(
    int i,
  ) {
    return _getConnectedDevices(
            reference.pointer, _id_getConnectedDevices as jni.JMethodIDPtr, i)
        .object(const jni.JListType($BluetoothDeviceType()));
  }

  static final _id_getDevicesMatchingConnectionStates = _class.instanceMethodId(
    r'getDevicesMatchingConnectionStates',
    r'(I[I)Ljava/util/List;',
  );

  static final _getDevicesMatchingConnectionStates =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  int, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List getDevicesMatchingConnectionStates(int i, java.lang.Object[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JList<BluetoothDevice> getDevicesMatchingConnectionStates(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _getDevicesMatchingConnectionStates(
            reference.pointer,
            _id_getDevicesMatchingConnectionStates as jni.JMethodIDPtr,
            i,
            is0.reference.pointer)
        .object(const jni.JListType($BluetoothDeviceType()));
  }

  static final _id_openGattServer = _class.instanceMethodId(
    r'openGattServer',
    r'(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;',
  );

  static final _openGattServer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.bluetooth.BluetoothGattServer openGattServer(android.content.Context context, android.bluetooth.BluetoothGattServerCallback bluetoothGattServerCallback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openGattServer(
    Context context,
    jni.JObject bluetoothGattServerCallback,
  ) {
    return _openGattServer(
            reference.pointer,
            _id_openGattServer as jni.JMethodIDPtr,
            context.reference.pointer,
            bluetoothGattServerCallback.reference.pointer)
        .object(const jni.JObjectType());
  }
}

final class $BluetoothManagerType extends jni.JObjType<BluetoothManager> {
  const $BluetoothManagerType();

  @override
  String get signature => r'Landroid/bluetooth/BluetoothManager;';

  @override
  BluetoothManager fromReference(jni.JReference reference) =>
      BluetoothManager.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BluetoothManagerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothManagerType) &&
        other is $BluetoothManagerType;
  }
}

/// from: android.bluetooth.BluetoothSocket
class BluetoothSocket extends jni.JObject {
  @override
  late final jni.JObjType<BluetoothSocket> $type = type;

  BluetoothSocket.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/bluetooth/BluetoothSocket');

  /// The type which includes information such as the signature of this class.
  static const type = $BluetoothSocketType();

  /// from: static public final int TYPE_L2CAP
  static const TYPE_L2CAP = 3;

  /// from: static public final int TYPE_RFCOMM
  static const TYPE_RFCOMM = 1;

  /// from: static public final int TYPE_SCO
  static const TYPE_SCO = 2;
  static final _id_finalize = _class.instanceMethodId(
    r'finalize',
    r'()V',
  );

  static final _finalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void finalize()
  void finalize() {
    _finalize(reference.pointer, _id_finalize as jni.JMethodIDPtr).check();
  }

  static final _id_getRemoteDevice = _class.instanceMethodId(
    r'getRemoteDevice',
    r'()Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.bluetooth.BluetoothDevice getRemoteDevice()
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice getRemoteDevice() {
    return _getRemoteDevice(
            reference.pointer, _id_getRemoteDevice as jni.JMethodIDPtr)
        .object(const $BluetoothDeviceType());
  }

  static final _id_getInputStream = _class.instanceMethodId(
    r'getInputStream',
    r'()Ljava/io/InputStream;',
  );

  static final _getInputStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.io.InputStream getInputStream()
  /// The returned object must be released after use, by calling the [release] method.
  InputStream getInputStream() {
    return _getInputStream(
            reference.pointer, _id_getInputStream as jni.JMethodIDPtr)
        .object(const $InputStreamType());
  }

  static final _id_getOutputStream = _class.instanceMethodId(
    r'getOutputStream',
    r'()Ljava/io/OutputStream;',
  );

  static final _getOutputStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.io.OutputStream getOutputStream()
  /// The returned object must be released after use, by calling the [release] method.
  OutputStream getOutputStream() {
    return _getOutputStream(
            reference.pointer, _id_getOutputStream as jni.JMethodIDPtr)
        .object(const $OutputStreamType());
  }

  static final _id_isConnected = _class.instanceMethodId(
    r'isConnected',
    r'()Z',
  );

  static final _isConnected = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isConnected()
  bool isConnected() {
    return _isConnected(reference.pointer, _id_isConnected as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_connect = _class.instanceMethodId(
    r'connect',
    r'()V',
  );

  static final _connect = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void connect()
  void connect() {
    _connect(reference.pointer, _id_connect as jni.JMethodIDPtr).check();
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void close()
  void close() {
    _close(reference.pointer, _id_close as jni.JMethodIDPtr).check();
  }

  static final _id_getMaxTransmitPacketSize = _class.instanceMethodId(
    r'getMaxTransmitPacketSize',
    r'()I',
  );

  static final _getMaxTransmitPacketSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getMaxTransmitPacketSize()
  int getMaxTransmitPacketSize() {
    return _getMaxTransmitPacketSize(
            reference.pointer, _id_getMaxTransmitPacketSize as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMaxReceivePacketSize = _class.instanceMethodId(
    r'getMaxReceivePacketSize',
    r'()I',
  );

  static final _getMaxReceivePacketSize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getMaxReceivePacketSize()
  int getMaxReceivePacketSize() {
    return _getMaxReceivePacketSize(
            reference.pointer, _id_getMaxReceivePacketSize as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getConnectionType = _class.instanceMethodId(
    r'getConnectionType',
    r'()I',
  );

  static final _getConnectionType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getConnectionType()
  int getConnectionType() {
    return _getConnectionType(
            reference.pointer, _id_getConnectionType as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $BluetoothSocketType extends jni.JObjType<BluetoothSocket> {
  const $BluetoothSocketType();

  @override
  String get signature => r'Landroid/bluetooth/BluetoothSocket;';

  @override
  BluetoothSocket fromReference(jni.JReference reference) =>
      BluetoothSocket.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BluetoothSocketType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothSocketType) &&
        other is $BluetoothSocketType;
  }
}

/// from: android.content.BroadcastReceiver$PendingResult
class BroadcastReceiver_PendingResult extends jni.JObject {
  @override
  late final jni.JObjType<BroadcastReceiver_PendingResult> $type = type;

  BroadcastReceiver_PendingResult.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/BroadcastReceiver$PendingResult');

  /// The type which includes information such as the signature of this class.
  static const type = $BroadcastReceiver_PendingResultType();
  static final _id_setResultCode = _class.instanceMethodId(
    r'setResultCode',
    r'(I)V',
  );

  static final _setResultCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setResultCode(int i)
  void setResultCode(
    int i,
  ) {
    _setResultCode(reference.pointer, _id_setResultCode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getResultCode = _class.instanceMethodId(
    r'getResultCode',
    r'()I',
  );

  static final _getResultCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getResultCode()
  int getResultCode() {
    return _getResultCode(
            reference.pointer, _id_getResultCode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setResultData = _class.instanceMethodId(
    r'setResultData',
    r'(Ljava/lang/String;)V',
  );

  static final _setResultData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResultData(java.lang.String string)
  void setResultData(
    jni.JString string,
  ) {
    _setResultData(reference.pointer, _id_setResultData as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getResultData = _class.instanceMethodId(
    r'getResultData',
    r'()Ljava/lang/String;',
  );

  static final _getResultData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getResultData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getResultData() {
    return _getResultData(
            reference.pointer, _id_getResultData as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setResultExtras = _class.instanceMethodId(
    r'setResultExtras',
    r'(Landroid/os/Bundle;)V',
  );

  static final _setResultExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResultExtras(android.os.Bundle bundle)
  void setResultExtras(
    jni.JObject bundle,
  ) {
    _setResultExtras(reference.pointer, _id_setResultExtras as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getResultExtras = _class.instanceMethodId(
    r'getResultExtras',
    r'(Z)Landroid/os/Bundle;',
  );

  static final _getResultExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.os.Bundle getResultExtras(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResultExtras(
    bool z,
  ) {
    return _getResultExtras(reference.pointer,
            _id_getResultExtras as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _setResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResult(int i, java.lang.String string, android.os.Bundle bundle)
  void setResult(
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _setResult(reference.pointer, _id_setResult as jni.JMethodIDPtr, i,
            string.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_getAbortBroadcast = _class.instanceMethodId(
    r'getAbortBroadcast',
    r'()Z',
  );

  static final _getAbortBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getAbortBroadcast()
  bool getAbortBroadcast() {
    return _getAbortBroadcast(
            reference.pointer, _id_getAbortBroadcast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_abortBroadcast = _class.instanceMethodId(
    r'abortBroadcast',
    r'()V',
  );

  static final _abortBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void abortBroadcast()
  void abortBroadcast() {
    _abortBroadcast(reference.pointer, _id_abortBroadcast as jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearAbortBroadcast = _class.instanceMethodId(
    r'clearAbortBroadcast',
    r'()V',
  );

  static final _clearAbortBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void clearAbortBroadcast()
  void clearAbortBroadcast() {
    _clearAbortBroadcast(
            reference.pointer, _id_clearAbortBroadcast as jni.JMethodIDPtr)
        .check();
  }

  static final _id_finish = _class.instanceMethodId(
    r'finish',
    r'()V',
  );

  static final _finish = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void finish()
  void finish() {
    _finish(reference.pointer, _id_finish as jni.JMethodIDPtr).check();
  }
}

final class $BroadcastReceiver_PendingResultType
    extends jni.JObjType<BroadcastReceiver_PendingResult> {
  const $BroadcastReceiver_PendingResultType();

  @override
  String get signature => r'Landroid/content/BroadcastReceiver$PendingResult;';

  @override
  BroadcastReceiver_PendingResult fromReference(jni.JReference reference) =>
      BroadcastReceiver_PendingResult.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BroadcastReceiver_PendingResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiver_PendingResultType) &&
        other is $BroadcastReceiver_PendingResultType;
  }
}

/// from: android.content.BroadcastReceiver
class BroadcastReceiver extends jni.JObject {
  @override
  late final jni.JObjType<BroadcastReceiver> $type = type;

  BroadcastReceiver.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/BroadcastReceiver');

  /// The type which includes information such as the signature of this class.
  static const type = $BroadcastReceiverType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory BroadcastReceiver() {
    return BroadcastReceiver.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onReceive(android.content.Context context, android.content.Intent intent)
  void onReceive(
    Context context,
    Intent intent,
  ) {
    _onReceive(reference.pointer, _id_onReceive as jni.JMethodIDPtr,
            context.reference.pointer, intent.reference.pointer)
        .check();
  }

  static final _id_goAsync = _class.instanceMethodId(
    r'goAsync',
    r'()Landroid/content/BroadcastReceiver$PendingResult;',
  );

  static final _goAsync = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.content.BroadcastReceiver$PendingResult goAsync()
  /// The returned object must be released after use, by calling the [release] method.
  BroadcastReceiver_PendingResult goAsync() {
    return _goAsync(reference.pointer, _id_goAsync as jni.JMethodIDPtr)
        .object(const $BroadcastReceiver_PendingResultType());
  }

  static final _id_peekService = _class.instanceMethodId(
    r'peekService',
    r'(Landroid/content/Context;Landroid/content/Intent;)Landroid/os/IBinder;',
  );

  static final _peekService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.IBinder peekService(android.content.Context context, android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekService(
    Context context,
    Intent intent,
  ) {
    return _peekService(reference.pointer, _id_peekService as jni.JMethodIDPtr,
            context.reference.pointer, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setResultCode = _class.instanceMethodId(
    r'setResultCode',
    r'(I)V',
  );

  static final _setResultCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setResultCode(int i)
  void setResultCode(
    int i,
  ) {
    _setResultCode(reference.pointer, _id_setResultCode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getResultCode = _class.instanceMethodId(
    r'getResultCode',
    r'()I',
  );

  static final _getResultCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getResultCode()
  int getResultCode() {
    return _getResultCode(
            reference.pointer, _id_getResultCode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setResultData = _class.instanceMethodId(
    r'setResultData',
    r'(Ljava/lang/String;)V',
  );

  static final _setResultData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResultData(java.lang.String string)
  void setResultData(
    jni.JString string,
  ) {
    _setResultData(reference.pointer, _id_setResultData as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getResultData = _class.instanceMethodId(
    r'getResultData',
    r'()Ljava/lang/String;',
  );

  static final _getResultData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getResultData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getResultData() {
    return _getResultData(
            reference.pointer, _id_getResultData as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setResultExtras = _class.instanceMethodId(
    r'setResultExtras',
    r'(Landroid/os/Bundle;)V',
  );

  static final _setResultExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResultExtras(android.os.Bundle bundle)
  void setResultExtras(
    jni.JObject bundle,
  ) {
    _setResultExtras(reference.pointer, _id_setResultExtras as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getResultExtras = _class.instanceMethodId(
    r'getResultExtras',
    r'(Z)Landroid/os/Bundle;',
  );

  static final _getResultExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.os.Bundle getResultExtras(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResultExtras(
    bool z,
  ) {
    return _getResultExtras(reference.pointer,
            _id_getResultExtras as jni.JMethodIDPtr, z ? 1 : 0)
        .object(const jni.JObjectType());
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _setResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResult(int i, java.lang.String string, android.os.Bundle bundle)
  void setResult(
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _setResult(reference.pointer, _id_setResult as jni.JMethodIDPtr, i,
            string.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_getAbortBroadcast = _class.instanceMethodId(
    r'getAbortBroadcast',
    r'()Z',
  );

  static final _getAbortBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getAbortBroadcast()
  bool getAbortBroadcast() {
    return _getAbortBroadcast(
            reference.pointer, _id_getAbortBroadcast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_abortBroadcast = _class.instanceMethodId(
    r'abortBroadcast',
    r'()V',
  );

  static final _abortBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void abortBroadcast()
  void abortBroadcast() {
    _abortBroadcast(reference.pointer, _id_abortBroadcast as jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearAbortBroadcast = _class.instanceMethodId(
    r'clearAbortBroadcast',
    r'()V',
  );

  static final _clearAbortBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void clearAbortBroadcast()
  void clearAbortBroadcast() {
    _clearAbortBroadcast(
            reference.pointer, _id_clearAbortBroadcast as jni.JMethodIDPtr)
        .check();
  }

  static final _id_isOrderedBroadcast = _class.instanceMethodId(
    r'isOrderedBroadcast',
    r'()Z',
  );

  static final _isOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isOrderedBroadcast()
  bool isOrderedBroadcast() {
    return _isOrderedBroadcast(
            reference.pointer, _id_isOrderedBroadcast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isInitialStickyBroadcast = _class.instanceMethodId(
    r'isInitialStickyBroadcast',
    r'()Z',
  );

  static final _isInitialStickyBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isInitialStickyBroadcast()
  bool isInitialStickyBroadcast() {
    return _isInitialStickyBroadcast(
            reference.pointer, _id_isInitialStickyBroadcast as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setOrderedHint = _class.instanceMethodId(
    r'setOrderedHint',
    r'(Z)V',
  );

  static final _setOrderedHint = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setOrderedHint(boolean z)
  void setOrderedHint(
    bool z,
  ) {
    _setOrderedHint(reference.pointer, _id_setOrderedHint as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getSentFromUid = _class.instanceMethodId(
    r'getSentFromUid',
    r'()I',
  );

  static final _getSentFromUid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getSentFromUid()
  int getSentFromUid() {
    return _getSentFromUid(
            reference.pointer, _id_getSentFromUid as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getSentFromPackage = _class.instanceMethodId(
    r'getSentFromPackage',
    r'()Ljava/lang/String;',
  );

  static final _getSentFromPackage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getSentFromPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSentFromPackage() {
    return _getSentFromPackage(
            reference.pointer, _id_getSentFromPackage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_setDebugUnregister = _class.instanceMethodId(
    r'setDebugUnregister',
    r'(Z)V',
  );

  static final _setDebugUnregister = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setDebugUnregister(boolean z)
  void setDebugUnregister(
    bool z,
  ) {
    _setDebugUnregister(reference.pointer,
            _id_setDebugUnregister as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getDebugUnregister = _class.instanceMethodId(
    r'getDebugUnregister',
    r'()Z',
  );

  static final _getDebugUnregister = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean getDebugUnregister()
  bool getDebugUnregister() {
    return _getDebugUnregister(
            reference.pointer, _id_getDebugUnregister as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $BroadcastReceiverType extends jni.JObjType<BroadcastReceiver> {
  const $BroadcastReceiverType();

  @override
  String get signature => r'Landroid/content/BroadcastReceiver;';

  @override
  BroadcastReceiver fromReference(jni.JReference reference) =>
      BroadcastReceiver.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BroadcastReceiverType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiverType) &&
        other is $BroadcastReceiverType;
  }
}

/// from: android.content.Context$BindServiceFlags
class Context_BindServiceFlags extends jni.JObject {
  @override
  late final jni.JObjType<Context_BindServiceFlags> $type = type;

  Context_BindServiceFlags.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/Context$BindServiceFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $Context_BindServiceFlagsType();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public android.content.Context$BindServiceFlags of(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Context_BindServiceFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni.JMethodIDPtr, j)
        .object(const $Context_BindServiceFlagsType());
  }
}

final class $Context_BindServiceFlagsType
    extends jni.JObjType<Context_BindServiceFlags> {
  const $Context_BindServiceFlagsType();

  @override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @override
  Context_BindServiceFlags fromReference(jni.JReference reference) =>
      Context_BindServiceFlags.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_BindServiceFlagsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_BindServiceFlagsType) &&
        other is $Context_BindServiceFlagsType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ALARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni.JStringType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String APP_OPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String AUDIO_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni.JStringType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BATTERY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_ACTIVITY_STARTS
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final long BIND_EXTERNAL_SERVICE_LONG
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_SHARED_ISOLATED_PROCESS
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CAMERA_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni.JStringType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni.JStringType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CREDENTIAL_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CREDENTIAL_SERVICE =>
      _id_CREDENTIAL_SERVICE.get(_class, const jni.JStringType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int DEVICE_ID_DEFAULT
  static const DEVICE_ID_DEFAULT = 0;

  /// from: static public final int DEVICE_ID_INVALID
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEVICE_LOCK_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni.JStringType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DISPLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni.JStringType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String DROPBOX_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni.JStringType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EUICC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni.JStringType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GAME_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni.JStringType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(_class, const jni.JStringType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String HEALTHCONNECT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String IPSEC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni.JStringType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni.JStringType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LOCALE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String LOCATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String MIDI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NFC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni.JStringType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String NSD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni.JStringType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String OVERLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get OVERLAY_SERVICE =>
      _id_OVERLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PEOPLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String POWER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni.JStringType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String PRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni.JStringType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ROLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SENSOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String STORAGE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELECOM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(_class, const jni.JStringType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String UI_MODE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni.JStringType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String USB_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni.JStringType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String USER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VIRTUAL_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni.JStringType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WIFI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni.JStringType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String WINDOW_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getString1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return _getString1(reference.pointer, _id_getString1 as jni.JMethodIDPtr, i,
            objects.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes(
            reference.pointer,
            _id_obtainStyledAttributes as jni.JMethodIDPtr,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes1(
            reference.pointer,
            _id_obtainStyledAttributes1 as jni.JMethodIDPtr,
            i,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes2(
            reference.pointer,
            _id_obtainStyledAttributes2 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return _obtainStyledAttributes3(
            reference.pointer,
            _id_obtainStyledAttributes3 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer,
            i,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return _getParams(reference.pointer, _id_getParams as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return _getSharedPreferences(
            reference.pointer,
            _id_getSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return _deleteSharedPreferences(
            reference.pointer,
            _id_deleteSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni.JMethodIDPtr, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return _deleteFile(reference.pointer, _id_deleteFile as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return _getFilesDir(reference.pointer, _id_getFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return _getExternalFilesDir(
            reference.pointer,
            _id_getExternalFilesDir as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return _getExternalFilesDirs(
            reference.pointer,
            _id_getExternalFilesDirs as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return _getCacheDir(reference.pointer, _id_getCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return _fileList(reference.pointer, _id_fileList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return _getDir(reference.pointer, _id_getDir as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return _openOrCreateDatabase1(
            reference.pointer,
            _id_openOrCreateDatabase1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer,
            databaseErrorHandler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    _setWallpaper(reference.pointer, _id_setWallpaper as jni.JMethodIDPtr,
            bitmap.reference.pointer)
        .check();
  }

  static final _id_setWallpaper1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    InputStream inputStream,
  ) {
    _setWallpaper1(reference.pointer, _id_setWallpaper1 as jni.JMethodIDPtr,
            inputStream.reference.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    _startActivity(reference.pointer, _id_startActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_startActivity1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, _id_startActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    _startActivities(reference.pointer, _id_startActivities as jni.JMethodIDPtr,
            intents.reference.pointer)
        .check();
  }

  static final _id_startActivities1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(
            reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(
            reference.pointer,
            _id_startIntentSender1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    Intent intent,
  ) {
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    Intent intent,
    jni.JString string,
  ) {
    _sendBroadcast1(reference.pointer, _id_sendBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    Intent intent,
    jni.JArray<jni.JString> strings,
  ) {
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni.JMethodIDPtr,
            intent.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendBroadcast2(
    Intent intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendBroadcast2(
            reference.pointer,
            _id_sendBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    Intent intent,
    jni.JString string,
  ) {
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    Intent intent,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast1(
            reference.pointer,
            _id_sendOrderedBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    Intent intent,
    jni.JString string,
    BroadcastReceiver broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast2(
            reference.pointer,
            _id_sendOrderedBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)
  void sendOrderedBroadcast3(
    Intent intent,
    jni.JString string,
    jni.JObject bundle,
    BroadcastReceiver broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle1,
  ) {
    _sendOrderedBroadcast3(
            reference.pointer,
            _id_sendOrderedBroadcast3 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle1.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    _sendBroadcastAsUser1(
            reference.pointer,
            _id_sendBroadcastAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
    BroadcastReceiver broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast4(
    Intent intent,
    jni.JString string,
    jni.JString string1,
    BroadcastReceiver broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast4(
            reference.pointer,
            _id_sendOrderedBroadcast4 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string2.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    Intent intent,
  ) {
    _sendStickyBroadcast(
            reference.pointer,
            _id_sendStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _sendStickyBroadcast1(
            reference.pointer,
            _id_sendStickyBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    Intent intent,
    BroadcastReceiver broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    Intent intent,
  ) {
    _removeStickyBroadcast(
            reference.pointer,
            _id_removeStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            $Int32,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    BroadcastReceiver broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver(
    BroadcastReceiver broadcastReceiver,
    IntentFilter intentFilter,
  ) {
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_registerReceiver1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver1(
    BroadcastReceiver broadcastReceiver,
    IntentFilter intentFilter,
    int i,
  ) {
    return _registerReceiver1(
            reference.pointer,
            _id_registerReceiver1 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            i)
        .object(const $IntentType());
  }

  static final _id_registerReceiver2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver2(
    BroadcastReceiver broadcastReceiver,
    IntentFilter intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return _registerReceiver2(
            reference.pointer,
            _id_registerReceiver2 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_registerReceiver3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver3(
    BroadcastReceiver broadcastReceiver,
    IntentFilter intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return _registerReceiver3(
            reference.pointer,
            _id_registerReceiver3 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer,
            i)
        .object(const $IntentType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    BroadcastReceiver broadcastReceiver,
  ) {
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    Intent intent,
  ) {
    return _startService(reference.pointer,
            _id_startService as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    Intent intent,
  ) {
    return _startForegroundService(
            reference.pointer,
            _id_startForegroundService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    Intent intent,
  ) {
    return _stopService(reference.pointer, _id_stopService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return _bindService(reference.pointer, _id_bindService as jni.JMethodIDPtr,
            intent.reference.pointer, serviceConnection.reference.pointer, i)
        .boolean;
  }

  static final _id_bindService1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)
  bool bindService1(
    Intent intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
  ) {
    return _bindService1(
            reference.pointer,
            _id_bindService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            bindServiceFlags.reference.pointer)
        .boolean;
  }

  static final _id_bindService2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService2(
    Intent intent,
    int i,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService2(
            reference.pointer,
            _id_bindService2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindService3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService3(
    Intent intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService3(
            reference.pointer,
            _id_bindService3 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bindServiceFlags.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    Intent intent,
    int i,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService1(
    Intent intent,
    Context_BindServiceFlags bindServiceFlags,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService1(
            reference.pointer,
            _id_bindIsolatedService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bindServiceFlags.reference.pointer,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            i,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)
  bool bindServiceAsUser1(
    Intent intent,
    jni.JObject serviceConnection,
    Context_BindServiceFlags bindServiceFlags,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser1(
            reference.pointer,
            _id_bindServiceAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            bindServiceFlags.reference.pointer,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni.JMethodIDPtr,
            serviceConnection.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    _unbindService(reference.pointer, _id_unbindService as jni.JMethodIDPtr,
            serviceConnection.reference.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni.JMethodIDPtr,
            componentName.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSystemService1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSystemService1(reference.pointer,
            _id_getSystemService1 as jni.JMethodIDPtr, class0.reference.pointer)
        .object(T);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return _getSystemServiceName(
            reference.pointer,
            _id_getSystemServiceName as jni.JMethodIDPtr,
            class0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _checkPermission(
            reference.pointer,
            _id_checkPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return _checkCallingPermission(
            reference.pointer,
            _id_checkCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return _checkSelfPermission(
            reference.pointer,
            _id_checkSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission(
            reference.pointer,
            _id_revokeUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission1(
            reference.pointer,
            _id_revokeUriPermission1 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i,
            i1,
            i2)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkUriPermission1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission1(
            reference.pointer,
            _id_checkUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            $Int32,
                            ffi.Pointer<ffi.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceUriPermission1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        $Int32,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    _enforceUriPermission1(
            reference.pointer,
            _id_enforceUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2,
            string2.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni.JMethodIDPtr,
            collection.reference.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return _createPackageContext(
            reference.pointer,
            _id_createPackageContext as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $ContextType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return _createContextForSplit(
            reference.pointer,
            _id_createContextForSplit as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni.JMethodIDPtr,
            configuration.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return _createDisplayContext(
            reference.pointer,
            _id_createDisplayContext as jni.JMethodIDPtr,
            display.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Context createDeviceContext(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
            reference.pointer, _id_createDeviceContext as jni.JMethodIDPtr, i)
        .object(const $ContextType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<($Int32, ffi.Pointer<ffi.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext(
            reference.pointer,
            _id_createWindowContext as jni.JMethodIDPtr,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createWindowContext1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext1(
            reference.pointer,
            _id_createWindowContext1 as jni.JMethodIDPtr,
            display.reference.pointer,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return _createContext(
            reference.pointer,
            _id_createContext as jni.JMethodIDPtr,
            contextParams.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getDeviceId()
  int getDeviceId() {
    return _getDeviceId(reference.pointer, _id_getDeviceId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)
  void registerDeviceIdChangeListener(
    jni.JObject executor,
    jni.JObject intConsumer,
  ) {
    _registerDeviceIdChangeListener(
            reference.pointer,
            _id_registerDeviceIdChangeListener as jni.JMethodIDPtr,
            executor.reference.pointer,
            intConsumer.reference.pointer)
        .check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)
  void unregisterDeviceIdChangeListener(
    jni.JObject intConsumer,
  ) {
    _unregisterDeviceIdChangeListener(
            reference.pointer,
            _id_unregisterDeviceIdChangeListener as jni.JMethodIDPtr,
            intConsumer.reference.pointer)
        .check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(
            reference.pointer, _id_isDeviceProtectedStorage as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return _isUiContext(reference.pointer, _id_isUiContext as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r'Landroid/content/Context;';

  @override
  Context fromReference(jni.JReference reference) =>
      Context.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

/// from: android.content.Intent$FilterComparison
class Intent_FilterComparison extends jni.JObject {
  @override
  late final jni.JObjType<Intent_FilterComparison> $type = type;

  Intent_FilterComparison.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/Intent$FilterComparison');

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_FilterComparisonType();
  static final _id_new0 = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_FilterComparison(
    Intent intent,
  ) {
    return Intent_FilterComparison.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, intent.reference.pointer)
        .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $Intent_FilterComparisonType
    extends jni.JObjType<Intent_FilterComparison> {
  const $Intent_FilterComparisonType();

  @override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @override
  Intent_FilterComparison fromReference(jni.JReference reference) =>
      Intent_FilterComparison.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_FilterComparisonType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_FilterComparisonType) &&
        other is $Intent_FilterComparisonType;
  }
}

/// from: android.content.Intent$ShortcutIconResource
class Intent_ShortcutIconResource extends jni.JObject {
  @override
  late final jni.JObjType<Intent_ShortcutIconResource> $type = type;

  Intent_ShortcutIconResource.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/Intent$ShortcutIconResource');

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_ShortcutIconResourceType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_packageName = _class.instanceFieldId(
    r'packageName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      _id_packageName.get(this, const jni.JStringType());

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      _id_packageName.set(this, const jni.JStringType(), value);

  static final _id_resourceName = _class.instanceFieldId(
    r'resourceName',
    r'Ljava/lang/String;',
  );

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get resourceName =>
      _id_resourceName.get(this, const jni.JStringType());

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni.JString value) =>
      _id_resourceName.set(this, const jni.JStringType(), value);

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_ShortcutIconResource() {
    return Intent_ShortcutIconResource.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromContext = _class.staticMethodId(
    r'fromContext',
    r'(Landroid/content/Context;I)Landroid/content/Intent$ShortcutIconResource;',
  );

  static final _fromContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent_ShortcutIconResource fromContext(
    Context context,
    int i,
  ) {
    return _fromContext(_class.reference.pointer,
            _id_fromContext as jni.JMethodIDPtr, context.reference.pointer, i)
        .object(const $Intent_ShortcutIconResourceType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $Intent_ShortcutIconResourceType
    extends jni.JObjType<Intent_ShortcutIconResource> {
  const $Intent_ShortcutIconResourceType();

  @override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @override
  Intent_ShortcutIconResource fromReference(jni.JReference reference) =>
      Intent_ShortcutIconResource.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_ShortcutIconResourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_ShortcutIconResourceType) &&
        other is $Intent_ShortcutIconResourceType;
  }
}

/// from: android.content.Intent
class Intent extends jni.JObject {
  @override
  late final jni.JObjType<Intent> $type = type;

  Intent.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/Intent');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentType();
  static final _id_ACTION_AIRPLANE_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_AIRPLANE_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AIRPLANE_MODE_CHANGED =>
      _id_ACTION_AIRPLANE_MODE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_ALL_APPS = _class.staticFieldId(
    r'ACTION_ALL_APPS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ALL_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ALL_APPS =>
      _id_ACTION_ALL_APPS.get(_class, const jni.JStringType());

  static final _id_ACTION_ANSWER = _class.staticFieldId(
    r'ACTION_ANSWER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ANSWER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ANSWER =>
      _id_ACTION_ANSWER.get(_class, const jni.JStringType());

  static final _id_ACTION_APPLICATION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_APPLICATION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_LOCALE_CHANGED =>
      _id_ACTION_APPLICATION_LOCALE_CHANGED.get(
          _class, const jni.JStringType());

  static final _id_ACTION_APPLICATION_PREFERENCES = _class.staticFieldId(
    r'ACTION_APPLICATION_PREFERENCES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_APPLICATION_PREFERENCES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_PREFERENCES =>
      _id_ACTION_APPLICATION_PREFERENCES.get(_class, const jni.JStringType());

  static final _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED =
      _class.staticFieldId(
    r'ACTION_APPLICATION_RESTRICTIONS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_RESTRICTIONS_CHANGED =>
      _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED.get(
          _class, const jni.JStringType());

  static final _id_ACTION_APP_ERROR = _class.staticFieldId(
    r'ACTION_APP_ERROR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_APP_ERROR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APP_ERROR =>
      _id_ACTION_APP_ERROR.get(_class, const jni.JStringType());

  static final _id_ACTION_ASSIST = _class.staticFieldId(
    r'ACTION_ASSIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ASSIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ASSIST =>
      _id_ACTION_ASSIST.get(_class, const jni.JStringType());

  static final _id_ACTION_ATTACH_DATA = _class.staticFieldId(
    r'ACTION_ATTACH_DATA',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_ATTACH_DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ATTACH_DATA =>
      _id_ACTION_ATTACH_DATA.get(_class, const jni.JStringType());

  static final _id_ACTION_AUTO_REVOKE_PERMISSIONS = _class.staticFieldId(
    r'ACTION_AUTO_REVOKE_PERMISSIONS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AUTO_REVOKE_PERMISSIONS =>
      _id_ACTION_AUTO_REVOKE_PERMISSIONS.get(_class, const jni.JStringType());

  static final _id_ACTION_BATTERY_CHANGED = _class.staticFieldId(
    r'ACTION_BATTERY_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_BATTERY_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_CHANGED =>
      _id_ACTION_BATTERY_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_BATTERY_LOW = _class.staticFieldId(
    r'ACTION_BATTERY_LOW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_BATTERY_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_LOW =>
      _id_ACTION_BATTERY_LOW.get(_class, const jni.JStringType());

  static final _id_ACTION_BATTERY_OKAY = _class.staticFieldId(
    r'ACTION_BATTERY_OKAY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_BATTERY_OKAY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_OKAY =>
      _id_ACTION_BATTERY_OKAY.get(_class, const jni.JStringType());

  static final _id_ACTION_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_BOOT_COMPLETED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BOOT_COMPLETED =>
      _id_ACTION_BOOT_COMPLETED.get(_class, const jni.JStringType());

  static final _id_ACTION_BUG_REPORT = _class.staticFieldId(
    r'ACTION_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_BUG_REPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BUG_REPORT =>
      _id_ACTION_BUG_REPORT.get(_class, const jni.JStringType());

  static final _id_ACTION_CALL = _class.staticFieldId(
    r'ACTION_CALL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CALL =>
      _id_ACTION_CALL.get(_class, const jni.JStringType());

  static final _id_ACTION_CALL_BUTTON = _class.staticFieldId(
    r'ACTION_CALL_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CALL_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CALL_BUTTON =>
      _id_ACTION_CALL_BUTTON.get(_class, const jni.JStringType());

  static final _id_ACTION_CAMERA_BUTTON = _class.staticFieldId(
    r'ACTION_CAMERA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CAMERA_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CAMERA_BUTTON =>
      _id_ACTION_CAMERA_BUTTON.get(_class, const jni.JStringType());

  static final _id_ACTION_CARRIER_SETUP = _class.staticFieldId(
    r'ACTION_CARRIER_SETUP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CARRIER_SETUP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CARRIER_SETUP =>
      _id_ACTION_CARRIER_SETUP.get(_class, const jni.JStringType());

  static final _id_ACTION_CHOOSER = _class.staticFieldId(
    r'ACTION_CHOOSER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CHOOSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CHOOSER =>
      _id_ACTION_CHOOSER.get(_class, const jni.JStringType());

  static final _id_ACTION_CLOSE_SYSTEM_DIALOGS = _class.staticFieldId(
    r'ACTION_CLOSE_SYSTEM_DIALOGS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CLOSE_SYSTEM_DIALOGS =>
      _id_ACTION_CLOSE_SYSTEM_DIALOGS.get(_class, const jni.JStringType());

  static final _id_ACTION_CONFIGURATION_CHANGED = _class.staticFieldId(
    r'ACTION_CONFIGURATION_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CONFIGURATION_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CONFIGURATION_CHANGED =>
      _id_ACTION_CONFIGURATION_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_DOCUMENT = _class.staticFieldId(
    r'ACTION_CREATE_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CREATE_DOCUMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_DOCUMENT =>
      _id_ACTION_CREATE_DOCUMENT.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_NOTE = _class.staticFieldId(
    r'ACTION_CREATE_NOTE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CREATE_NOTE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_NOTE =>
      _id_ACTION_CREATE_NOTE.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_REMINDER = _class.staticFieldId(
    r'ACTION_CREATE_REMINDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CREATE_REMINDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_REMINDER =>
      _id_ACTION_CREATE_REMINDER.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_SHORTCUT = _class.staticFieldId(
    r'ACTION_CREATE_SHORTCUT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_CREATE_SHORTCUT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_SHORTCUT =>
      _id_ACTION_CREATE_SHORTCUT.get(_class, const jni.JStringType());

  static final _id_ACTION_DATE_CHANGED = _class.staticFieldId(
    r'ACTION_DATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DATE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DATE_CHANGED =>
      _id_ACTION_DATE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_DEFAULT = _class.staticFieldId(
    r'ACTION_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DEFAULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEFAULT =>
      _id_ACTION_DEFAULT.get(_class, const jni.JStringType());

  static final _id_ACTION_DEFINE = _class.staticFieldId(
    r'ACTION_DEFINE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DEFINE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEFINE =>
      _id_ACTION_DEFINE.get(_class, const jni.JStringType());

  static final _id_ACTION_DELETE = _class.staticFieldId(
    r'ACTION_DELETE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DELETE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DELETE =>
      _id_ACTION_DELETE.get(_class, const jni.JStringType());

  static final _id_ACTION_DEVICE_STORAGE_LOW = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_LOW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEVICE_STORAGE_LOW =>
      _id_ACTION_DEVICE_STORAGE_LOW.get(_class, const jni.JStringType());

  static final _id_ACTION_DEVICE_STORAGE_OK = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_OK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_OK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEVICE_STORAGE_OK =>
      _id_ACTION_DEVICE_STORAGE_OK.get(_class, const jni.JStringType());

  static final _id_ACTION_DIAL = _class.staticFieldId(
    r'ACTION_DIAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DIAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DIAL =>
      _id_ACTION_DIAL.get(_class, const jni.JStringType());

  static final _id_ACTION_DOCK_EVENT = _class.staticFieldId(
    r'ACTION_DOCK_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DOCK_EVENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DOCK_EVENT =>
      _id_ACTION_DOCK_EVENT.get(_class, const jni.JStringType());

  static final _id_ACTION_DREAMING_STARTED = _class.staticFieldId(
    r'ACTION_DREAMING_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DREAMING_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DREAMING_STARTED =>
      _id_ACTION_DREAMING_STARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_DREAMING_STOPPED = _class.staticFieldId(
    r'ACTION_DREAMING_STOPPED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_DREAMING_STOPPED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DREAMING_STOPPED =>
      _id_ACTION_DREAMING_STOPPED.get(_class, const jni.JStringType());

  static final _id_ACTION_EDIT = _class.staticFieldId(
    r'ACTION_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_EDIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EDIT =>
      _id_ACTION_EDIT.get(_class, const jni.JStringType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =
      _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =
      _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_FACTORY_TEST = _class.staticFieldId(
    r'ACTION_FACTORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_FACTORY_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_FACTORY_TEST =>
      _id_ACTION_FACTORY_TEST.get(_class, const jni.JStringType());

  static final _id_ACTION_GET_CONTENT = _class.staticFieldId(
    r'ACTION_GET_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_GET_CONTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GET_CONTENT =>
      _id_ACTION_GET_CONTENT.get(_class, const jni.JStringType());

  static final _id_ACTION_GET_RESTRICTION_ENTRIES = _class.staticFieldId(
    r'ACTION_GET_RESTRICTION_ENTRIES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GET_RESTRICTION_ENTRIES =>
      _id_ACTION_GET_RESTRICTION_ENTRIES.get(_class, const jni.JStringType());

  static final _id_ACTION_GTALK_SERVICE_CONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GTALK_SERVICE_CONNECTED =>
      _id_ACTION_GTALK_SERVICE_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_GTALK_SERVICE_DISCONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GTALK_SERVICE_DISCONNECTED =>
      _id_ACTION_GTALK_SERVICE_DISCONNECTED.get(
          _class, const jni.JStringType());

  static final _id_ACTION_HEADSET_PLUG = _class.staticFieldId(
    r'ACTION_HEADSET_PLUG',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_HEADSET_PLUG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_HEADSET_PLUG =>
      _id_ACTION_HEADSET_PLUG.get(_class, const jni.JStringType());

  static final _id_ACTION_INPUT_METHOD_CHANGED = _class.staticFieldId(
    r'ACTION_INPUT_METHOD_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_INPUT_METHOD_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INPUT_METHOD_CHANGED =>
      _id_ACTION_INPUT_METHOD_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_INSERT = _class.staticFieldId(
    r'ACTION_INSERT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_INSERT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSERT =>
      _id_ACTION_INSERT.get(_class, const jni.JStringType());

  static final _id_ACTION_INSERT_OR_EDIT = _class.staticFieldId(
    r'ACTION_INSERT_OR_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_INSERT_OR_EDIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSERT_OR_EDIT =>
      _id_ACTION_INSERT_OR_EDIT.get(_class, const jni.JStringType());

  static final _id_ACTION_INSTALL_FAILURE = _class.staticFieldId(
    r'ACTION_INSTALL_FAILURE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_INSTALL_FAILURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSTALL_FAILURE =>
      _id_ACTION_INSTALL_FAILURE.get(_class, const jni.JStringType());

  static final _id_ACTION_INSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_INSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_INSTALL_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSTALL_PACKAGE =>
      _id_ACTION_INSTALL_PACKAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =
      _class.staticFieldId(
    r'ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =>
      _id_ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_LOCALE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCALE_CHANGED =>
      _id_ACTION_LOCALE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_LOCKED_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_LOCKED_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCKED_BOOT_COMPLETED =>
      _id_ACTION_LOCKED_BOOT_COMPLETED.get(_class, const jni.JStringType());

  static final _id_ACTION_MAIN = _class.staticFieldId(
    r'ACTION_MAIN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MAIN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MAIN =>
      _id_ACTION_MAIN.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_ADDED =>
      _id_ACTION_MANAGED_PROFILE_ADDED.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_AVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_AVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_AVAILABLE.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_REMOVED =>
      _id_ACTION_MANAGED_PROFILE_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_UNAVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_UNAVAILABLE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_UNLOCKED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_UNLOCKED =>
      _id_ACTION_MANAGED_PROFILE_UNLOCKED.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGE_NETWORK_USAGE = _class.staticFieldId(
    r'ACTION_MANAGE_NETWORK_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_NETWORK_USAGE =>
      _id_ACTION_MANAGE_NETWORK_USAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGE_PACKAGE_STORAGE = _class.staticFieldId(
    r'ACTION_MANAGE_PACKAGE_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_PACKAGE_STORAGE =>
      _id_ACTION_MANAGE_PACKAGE_STORAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGE_UNUSED_APPS = _class.staticFieldId(
    r'ACTION_MANAGE_UNUSED_APPS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MANAGE_UNUSED_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_UNUSED_APPS =>
      _id_ACTION_MANAGE_UNUSED_APPS.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_BAD_REMOVAL = _class.staticFieldId(
    r'ACTION_MEDIA_BAD_REMOVAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_BAD_REMOVAL =>
      _id_ACTION_MEDIA_BAD_REMOVAL.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_BUTTON = _class.staticFieldId(
    r'ACTION_MEDIA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_BUTTON =>
      _id_ACTION_MEDIA_BUTTON.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_CHECKING = _class.staticFieldId(
    r'ACTION_MEDIA_CHECKING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_CHECKING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_CHECKING =>
      _id_ACTION_MEDIA_CHECKING.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_EJECT = _class.staticFieldId(
    r'ACTION_MEDIA_EJECT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_EJECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_EJECT =>
      _id_ACTION_MEDIA_EJECT.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_MOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_MOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_MOUNTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_MOUNTED =>
      _id_ACTION_MEDIA_MOUNTED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_NOFS = _class.staticFieldId(
    r'ACTION_MEDIA_NOFS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_NOFS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_NOFS =>
      _id_ACTION_MEDIA_NOFS.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_REMOVED = _class.staticFieldId(
    r'ACTION_MEDIA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_REMOVED =>
      _id_ACTION_MEDIA_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SCANNER_FINISHED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_FINISHED =>
      _id_ACTION_MEDIA_SCANNER_FINISHED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SCANNER_SCAN_FILE = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_SCAN_FILE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_SCAN_FILE =>
      _id_ACTION_MEDIA_SCANNER_SCAN_FILE.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SCANNER_STARTED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_STARTED =>
      _id_ACTION_MEDIA_SCANNER_STARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SHARED = _class.staticFieldId(
    r'ACTION_MEDIA_SHARED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SHARED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SHARED =>
      _id_ACTION_MEDIA_SHARED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_UNMOUNTABLE = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_UNMOUNTABLE =>
      _id_ACTION_MEDIA_UNMOUNTABLE.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_UNMOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_UNMOUNTED =>
      _id_ACTION_MEDIA_UNMOUNTED.get(_class, const jni.JStringType());

  static final _id_ACTION_MY_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_REPLACED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_REPLACED =>
      _id_ACTION_MY_PACKAGE_REPLACED.get(_class, const jni.JStringType());

  static final _id_ACTION_MY_PACKAGE_SUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_SUSPENDED =>
      _id_ACTION_MY_PACKAGE_SUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_MY_PACKAGE_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_UNSUSPENDED =>
      _id_ACTION_MY_PACKAGE_UNSUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_NEW_OUTGOING_CALL = _class.staticFieldId(
    r'ACTION_NEW_OUTGOING_CALL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_NEW_OUTGOING_CALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_NEW_OUTGOING_CALL =>
      _id_ACTION_NEW_OUTGOING_CALL.get(_class, const jni.JStringType());

  static final _id_ACTION_OPEN_DOCUMENT = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_OPEN_DOCUMENT =>
      _id_ACTION_OPEN_DOCUMENT.get(_class, const jni.JStringType());

  static final _id_ACTION_OPEN_DOCUMENT_TREE = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT_TREE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_OPEN_DOCUMENT_TREE =>
      _id_ACTION_OPEN_DOCUMENT_TREE.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGES_SUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGES_SUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGES_SUSPENDED =>
      _id_ACTION_PACKAGES_SUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGES_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGES_UNSUSPENDED =>
      _id_ACTION_PACKAGES_UNSUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_ADDED = _class.staticFieldId(
    r'ACTION_PACKAGE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_ADDED =>
      _id_ACTION_PACKAGE_ADDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_CHANGED = _class.staticFieldId(
    r'ACTION_PACKAGE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_CHANGED =>
      _id_ACTION_PACKAGE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_DATA_CLEARED = _class.staticFieldId(
    r'ACTION_PACKAGE_DATA_CLEARED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_DATA_CLEARED =>
      _id_ACTION_PACKAGE_DATA_CLEARED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_FIRST_LAUNCH = _class.staticFieldId(
    r'ACTION_PACKAGE_FIRST_LAUNCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_FIRST_LAUNCH =>
      _id_ACTION_PACKAGE_FIRST_LAUNCH.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_FULLY_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_FULLY_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_FULLY_REMOVED =>
      _id_ACTION_PACKAGE_FULLY_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_INSTALL = _class.staticFieldId(
    r'ACTION_PACKAGE_INSTALL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_INSTALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_INSTALL =>
      _id_ACTION_PACKAGE_INSTALL.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_NEEDS_VERIFICATION = _class.staticFieldId(
    r'ACTION_PACKAGE_NEEDS_VERIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_NEEDS_VERIFICATION =>
      _id_ACTION_PACKAGE_NEEDS_VERIFICATION.get(
          _class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_REMOVED =>
      _id_ACTION_PACKAGE_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_REPLACED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_REPLACED =>
      _id_ACTION_PACKAGE_REPLACED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_RESTARTED = _class.staticFieldId(
    r'ACTION_PACKAGE_RESTARTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_RESTARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_RESTARTED =>
      _id_ACTION_PACKAGE_RESTARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_VERIFIED = _class.staticFieldId(
    r'ACTION_PACKAGE_VERIFIED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_VERIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_VERIFIED =>
      _id_ACTION_PACKAGE_VERIFIED.get(_class, const jni.JStringType());

  static final _id_ACTION_PASTE = _class.staticFieldId(
    r'ACTION_PASTE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PASTE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PASTE =>
      _id_ACTION_PASTE.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK = _class.staticFieldId(
    r'ACTION_PICK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PICK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK =>
      _id_ACTION_PICK.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK_ACTIVITY = _class.staticFieldId(
    r'ACTION_PICK_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PICK_ACTIVITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_ACTIVITY =>
      _id_ACTION_PICK_ACTIVITY.get(_class, const jni.JStringType());

  static final _id_ACTION_POWER_CONNECTED = _class.staticFieldId(
    r'ACTION_POWER_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_POWER_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_CONNECTED =>
      _id_ACTION_POWER_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_POWER_DISCONNECTED = _class.staticFieldId(
    r'ACTION_POWER_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_POWER_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_DISCONNECTED =>
      _id_ACTION_POWER_DISCONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_POWER_USAGE_SUMMARY = _class.staticFieldId(
    r'ACTION_POWER_USAGE_SUMMARY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_POWER_USAGE_SUMMARY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_USAGE_SUMMARY =>
      _id_ACTION_POWER_USAGE_SUMMARY.get(_class, const jni.JStringType());

  static final _id_ACTION_PROCESS_TEXT = _class.staticFieldId(
    r'ACTION_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PROCESS_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROCESS_TEXT =>
      _id_ACTION_PROCESS_TEXT.get(_class, const jni.JStringType());

  static final _id_ACTION_PROFILE_ACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_ACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PROFILE_ACCESSIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_ACCESSIBLE =>
      _id_ACTION_PROFILE_ACCESSIBLE.get(_class, const jni.JStringType());

  static final _id_ACTION_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PROFILE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_ADDED =>
      _id_ACTION_PROFILE_ADDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PROFILE_INACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_INACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PROFILE_INACCESSIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_INACCESSIBLE =>
      _id_ACTION_PROFILE_INACCESSIBLE.get(_class, const jni.JStringType());

  static final _id_ACTION_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PROFILE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_REMOVED =>
      _id_ACTION_PROFILE_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_PROVIDER_CHANGED = _class.staticFieldId(
    r'ACTION_PROVIDER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_PROVIDER_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROVIDER_CHANGED =>
      _id_ACTION_PROVIDER_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_QUICK_CLOCK = _class.staticFieldId(
    r'ACTION_QUICK_CLOCK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_QUICK_CLOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_QUICK_CLOCK =>
      _id_ACTION_QUICK_CLOCK.get(_class, const jni.JStringType());

  static final _id_ACTION_QUICK_VIEW = _class.staticFieldId(
    r'ACTION_QUICK_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_QUICK_VIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_QUICK_VIEW =>
      _id_ACTION_QUICK_VIEW.get(_class, const jni.JStringType());

  static final _id_ACTION_REBOOT = _class.staticFieldId(
    r'ACTION_REBOOT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_REBOOT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REBOOT =>
      _id_ACTION_REBOOT.get(_class, const jni.JStringType());

  static final _id_ACTION_RUN = _class.staticFieldId(
    r'ACTION_RUN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_RUN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_RUN =>
      _id_ACTION_RUN.get(_class, const jni.JStringType());

  static final _id_ACTION_SAFETY_CENTER = _class.staticFieldId(
    r'ACTION_SAFETY_CENTER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SAFETY_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SAFETY_CENTER =>
      _id_ACTION_SAFETY_CENTER.get(_class, const jni.JStringType());

  static final _id_ACTION_SCREEN_OFF = _class.staticFieldId(
    r'ACTION_SCREEN_OFF',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SCREEN_OFF
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCREEN_OFF =>
      _id_ACTION_SCREEN_OFF.get(_class, const jni.JStringType());

  static final _id_ACTION_SCREEN_ON = _class.staticFieldId(
    r'ACTION_SCREEN_ON',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SCREEN_ON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCREEN_ON =>
      _id_ACTION_SCREEN_ON.get(_class, const jni.JStringType());

  static final _id_ACTION_SEARCH = _class.staticFieldId(
    r'ACTION_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEARCH =>
      _id_ACTION_SEARCH.get(_class, const jni.JStringType());

  static final _id_ACTION_SEARCH_LONG_PRESS = _class.staticFieldId(
    r'ACTION_SEARCH_LONG_PRESS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SEARCH_LONG_PRESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEARCH_LONG_PRESS =>
      _id_ACTION_SEARCH_LONG_PRESS.get(_class, const jni.JStringType());

  static final _id_ACTION_SEND = _class.staticFieldId(
    r'ACTION_SEND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SEND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEND =>
      _id_ACTION_SEND.get(_class, const jni.JStringType());

  static final _id_ACTION_SENDTO = _class.staticFieldId(
    r'ACTION_SENDTO',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SENDTO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SENDTO =>
      _id_ACTION_SENDTO.get(_class, const jni.JStringType());

  static final _id_ACTION_SEND_MULTIPLE = _class.staticFieldId(
    r'ACTION_SEND_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SEND_MULTIPLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEND_MULTIPLE =>
      _id_ACTION_SEND_MULTIPLE.get(_class, const jni.JStringType());

  static final _id_ACTION_SET_WALLPAPER = _class.staticFieldId(
    r'ACTION_SET_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SET_WALLPAPER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SET_WALLPAPER =>
      _id_ACTION_SET_WALLPAPER.get(_class, const jni.JStringType());

  static final _id_ACTION_SHOW_APP_INFO = _class.staticFieldId(
    r'ACTION_SHOW_APP_INFO',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SHOW_APP_INFO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHOW_APP_INFO =>
      _id_ACTION_SHOW_APP_INFO.get(_class, const jni.JStringType());

  static final _id_ACTION_SHOW_WORK_APPS = _class.staticFieldId(
    r'ACTION_SHOW_WORK_APPS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SHOW_WORK_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHOW_WORK_APPS =>
      _id_ACTION_SHOW_WORK_APPS.get(_class, const jni.JStringType());

  static final _id_ACTION_SHUTDOWN = _class.staticFieldId(
    r'ACTION_SHUTDOWN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SHUTDOWN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHUTDOWN =>
      _id_ACTION_SHUTDOWN.get(_class, const jni.JStringType());

  static final _id_ACTION_SYNC = _class.staticFieldId(
    r'ACTION_SYNC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SYNC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SYNC =>
      _id_ACTION_SYNC.get(_class, const jni.JStringType());

  static final _id_ACTION_SYSTEM_TUTORIAL = _class.staticFieldId(
    r'ACTION_SYSTEM_TUTORIAL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_SYSTEM_TUTORIAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SYSTEM_TUTORIAL =>
      _id_ACTION_SYSTEM_TUTORIAL.get(_class, const jni.JStringType());

  static final _id_ACTION_TIMEZONE_CHANGED = _class.staticFieldId(
    r'ACTION_TIMEZONE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_TIMEZONE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIMEZONE_CHANGED =>
      _id_ACTION_TIMEZONE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_TIME_CHANGED = _class.staticFieldId(
    r'ACTION_TIME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_TIME_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIME_CHANGED =>
      _id_ACTION_TIME_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_TIME_TICK = _class.staticFieldId(
    r'ACTION_TIME_TICK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_TIME_TICK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIME_TICK =>
      _id_ACTION_TIME_TICK.get(_class, const jni.JStringType());

  static final _id_ACTION_TRANSLATE = _class.staticFieldId(
    r'ACTION_TRANSLATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_TRANSLATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TRANSLATE =>
      _id_ACTION_TRANSLATE.get(_class, const jni.JStringType());

  static final _id_ACTION_UID_REMOVED = _class.staticFieldId(
    r'ACTION_UID_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_UID_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UID_REMOVED =>
      _id_ACTION_UID_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_UMS_CONNECTED = _class.staticFieldId(
    r'ACTION_UMS_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_UMS_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UMS_CONNECTED =>
      _id_ACTION_UMS_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_UMS_DISCONNECTED = _class.staticFieldId(
    r'ACTION_UMS_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_UMS_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UMS_DISCONNECTED =>
      _id_ACTION_UMS_DISCONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_UNINSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_UNINSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_UNINSTALL_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UNINSTALL_PACKAGE =>
      _id_ACTION_UNINSTALL_PACKAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_BACKGROUND = _class.staticFieldId(
    r'ACTION_USER_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_USER_BACKGROUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_BACKGROUND =>
      _id_ACTION_USER_BACKGROUND.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_FOREGROUND = _class.staticFieldId(
    r'ACTION_USER_FOREGROUND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_USER_FOREGROUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_FOREGROUND =>
      _id_ACTION_USER_FOREGROUND.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_INITIALIZE = _class.staticFieldId(
    r'ACTION_USER_INITIALIZE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_USER_INITIALIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_INITIALIZE =>
      _id_ACTION_USER_INITIALIZE.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_PRESENT = _class.staticFieldId(
    r'ACTION_USER_PRESENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_USER_PRESENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_PRESENT =>
      _id_ACTION_USER_PRESENT.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_UNLOCKED = _class.staticFieldId(
    r'ACTION_USER_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_USER_UNLOCKED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_UNLOCKED =>
      _id_ACTION_USER_UNLOCKED.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW = _class.staticFieldId(
    r'ACTION_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_VIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW =>
      _id_ACTION_VIEW.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW_LOCUS = _class.staticFieldId(
    r'ACTION_VIEW_LOCUS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_VIEW_LOCUS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_LOCUS =>
      _id_ACTION_VIEW_LOCUS.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE = _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_PERMISSION_USAGE =>
      _id_ACTION_VIEW_PERMISSION_USAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =
      _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =>
      _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD.get(
          _class, const jni.JStringType());

  static final _id_ACTION_VOICE_COMMAND = _class.staticFieldId(
    r'ACTION_VOICE_COMMAND',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_VOICE_COMMAND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VOICE_COMMAND =>
      _id_ACTION_VOICE_COMMAND.get(_class, const jni.JStringType());

  static final _id_ACTION_WALLPAPER_CHANGED = _class.staticFieldId(
    r'ACTION_WALLPAPER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_WALLPAPER_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_WALLPAPER_CHANGED =>
      _id_ACTION_WALLPAPER_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_WEB_SEARCH = _class.staticFieldId(
    r'ACTION_WEB_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String ACTION_WEB_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_WEB_SEARCH =>
      _id_ACTION_WEB_SEARCH.get(_class, const jni.JStringType());

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN
  static const CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN = 4;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_FAILED
  static const CAPTURE_CONTENT_FOR_NOTE_FAILED = 1;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_SUCCESS
  static const CAPTURE_CONTENT_FOR_NOTE_SUCCESS = 0;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED
  static const CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED = 2;

  /// from: static public final int CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED
  static const CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED = 3;
  static final _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =
      _class.staticFieldId(
    r'CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =>
      _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET.get(
          _class, const jni.JStringType());

  static final _id_CATEGORY_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_ALTERNATIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_ALTERNATIVE =>
      _id_CATEGORY_ALTERNATIVE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_BROWSER = _class.staticFieldId(
    r'CATEGORY_APP_BROWSER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_BROWSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_BROWSER =>
      _id_CATEGORY_APP_BROWSER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_CALCULATOR = _class.staticFieldId(
    r'CATEGORY_APP_CALCULATOR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_CALCULATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CALCULATOR =>
      _id_CATEGORY_APP_CALCULATOR.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_CALENDAR = _class.staticFieldId(
    r'CATEGORY_APP_CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_CALENDAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CALENDAR =>
      _id_CATEGORY_APP_CALENDAR.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_CONTACTS = _class.staticFieldId(
    r'CATEGORY_APP_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_CONTACTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CONTACTS =>
      _id_CATEGORY_APP_CONTACTS.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_EMAIL = _class.staticFieldId(
    r'CATEGORY_APP_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_EMAIL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_EMAIL =>
      _id_CATEGORY_APP_EMAIL.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_FILES = _class.staticFieldId(
    r'CATEGORY_APP_FILES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_FILES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_FILES =>
      _id_CATEGORY_APP_FILES.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_FITNESS = _class.staticFieldId(
    r'CATEGORY_APP_FITNESS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_FITNESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_FITNESS =>
      _id_CATEGORY_APP_FITNESS.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_GALLERY = _class.staticFieldId(
    r'CATEGORY_APP_GALLERY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_GALLERY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_GALLERY =>
      _id_CATEGORY_APP_GALLERY.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MAPS = _class.staticFieldId(
    r'CATEGORY_APP_MAPS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_MAPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MAPS =>
      _id_CATEGORY_APP_MAPS.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MARKET = _class.staticFieldId(
    r'CATEGORY_APP_MARKET',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_MARKET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MARKET =>
      _id_CATEGORY_APP_MARKET.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MESSAGING = _class.staticFieldId(
    r'CATEGORY_APP_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_MESSAGING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MESSAGING =>
      _id_CATEGORY_APP_MESSAGING.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MUSIC = _class.staticFieldId(
    r'CATEGORY_APP_MUSIC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_MUSIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MUSIC =>
      _id_CATEGORY_APP_MUSIC.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_WEATHER = _class.staticFieldId(
    r'CATEGORY_APP_WEATHER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_APP_WEATHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_WEATHER =>
      _id_CATEGORY_APP_WEATHER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_BROWSABLE = _class.staticFieldId(
    r'CATEGORY_BROWSABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_BROWSABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_BROWSABLE =>
      _id_CATEGORY_BROWSABLE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_CAR_DOCK = _class.staticFieldId(
    r'CATEGORY_CAR_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_CAR_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_CAR_DOCK =>
      _id_CATEGORY_CAR_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_CAR_MODE = _class.staticFieldId(
    r'CATEGORY_CAR_MODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_CAR_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_CAR_MODE =>
      _id_CATEGORY_CAR_MODE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_DEFAULT = _class.staticFieldId(
    r'CATEGORY_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_DEFAULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DEFAULT =>
      _id_CATEGORY_DEFAULT.get(_class, const jni.JStringType());

  static final _id_CATEGORY_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DESK_DOCK =>
      _id_CATEGORY_DESK_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_DEVELOPMENT_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_DEVELOPMENT_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DEVELOPMENT_PREFERENCE =>
      _id_CATEGORY_DEVELOPMENT_PREFERENCE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_EMBED = _class.staticFieldId(
    r'CATEGORY_EMBED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_EMBED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_EMBED =>
      _id_CATEGORY_EMBED.get(_class, const jni.JStringType());

  static final _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =
      _class.staticFieldId(
    r'CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =>
      _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST.get(
          _class, const jni.JStringType());

  static final _id_CATEGORY_HE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_HE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_HE_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_HE_DESK_DOCK =>
      _id_CATEGORY_HE_DESK_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_HOME = _class.staticFieldId(
    r'CATEGORY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_HOME =>
      _id_CATEGORY_HOME.get(_class, const jni.JStringType());

  static final _id_CATEGORY_INFO = _class.staticFieldId(
    r'CATEGORY_INFO',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_INFO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_INFO =>
      _id_CATEGORY_INFO.get(_class, const jni.JStringType());

  static final _id_CATEGORY_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_LAUNCHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LAUNCHER =>
      _id_CATEGORY_LAUNCHER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_LEANBACK_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LEANBACK_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LEANBACK_LAUNCHER =>
      _id_CATEGORY_LEANBACK_LAUNCHER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_LE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_LE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_LE_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LE_DESK_DOCK =>
      _id_CATEGORY_LE_DESK_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_MONKEY = _class.staticFieldId(
    r'CATEGORY_MONKEY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_MONKEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_MONKEY =>
      _id_CATEGORY_MONKEY.get(_class, const jni.JStringType());

  static final _id_CATEGORY_OPENABLE = _class.staticFieldId(
    r'CATEGORY_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_OPENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_OPENABLE =>
      _id_CATEGORY_OPENABLE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_PREFERENCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_PREFERENCE =>
      _id_CATEGORY_PREFERENCE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_SAMPLE_CODE = _class.staticFieldId(
    r'CATEGORY_SAMPLE_CODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_SAMPLE_CODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SAMPLE_CODE =>
      _id_CATEGORY_SAMPLE_CODE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_SECONDARY_HOME = _class.staticFieldId(
    r'CATEGORY_SECONDARY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_SECONDARY_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SECONDARY_HOME =>
      _id_CATEGORY_SECONDARY_HOME.get(_class, const jni.JStringType());

  static final _id_CATEGORY_SELECTED_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_SELECTED_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SELECTED_ALTERNATIVE =>
      _id_CATEGORY_SELECTED_ALTERNATIVE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_TAB = _class.staticFieldId(
    r'CATEGORY_TAB',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_TAB
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TAB =>
      _id_CATEGORY_TAB.get(_class, const jni.JStringType());

  static final _id_CATEGORY_TEST = _class.staticFieldId(
    r'CATEGORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TEST =>
      _id_CATEGORY_TEST.get(_class, const jni.JStringType());

  static final _id_CATEGORY_TYPED_OPENABLE = _class.staticFieldId(
    r'CATEGORY_TYPED_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_TYPED_OPENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TYPED_OPENABLE =>
      _id_CATEGORY_TYPED_OPENABLE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_UNIT_TEST = _class.staticFieldId(
    r'CATEGORY_UNIT_TEST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_UNIT_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_UNIT_TEST =>
      _id_CATEGORY_UNIT_TEST.get(_class, const jni.JStringType());

  static final _id_CATEGORY_VOICE = _class.staticFieldId(
    r'CATEGORY_VOICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_VOICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_VOICE =>
      _id_CATEGORY_VOICE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_VR_HOME = _class.staticFieldId(
    r'CATEGORY_VR_HOME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String CATEGORY_VR_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_VR_HOME =>
      _id_CATEGORY_VR_HOME.get(_class, const jni.JStringType());

  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_EXTRA_ALARM_COUNT = _class.staticFieldId(
    r'EXTRA_ALARM_COUNT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ALARM_COUNT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALARM_COUNT =>
      _id_EXTRA_ALARM_COUNT.get(_class, const jni.JStringType());

  static final _id_EXTRA_ALLOW_MULTIPLE = _class.staticFieldId(
    r'EXTRA_ALLOW_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ALLOW_MULTIPLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALLOW_MULTIPLE =>
      _id_EXTRA_ALLOW_MULTIPLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ALLOW_REPLACE = _class.staticFieldId(
    r'EXTRA_ALLOW_REPLACE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ALLOW_REPLACE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALLOW_REPLACE =>
      _id_EXTRA_ALLOW_REPLACE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ALTERNATE_INTENTS = _class.staticFieldId(
    r'EXTRA_ALTERNATE_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ALTERNATE_INTENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALTERNATE_INTENTS =>
      _id_EXTRA_ALTERNATE_INTENTS.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_CONTEXT = _class.staticFieldId(
    r'EXTRA_ASSIST_CONTEXT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_CONTEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_CONTEXT =>
      _id_EXTRA_ASSIST_CONTEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_INPUT_DEVICE_ID = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_DEVICE_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_INPUT_DEVICE_ID =>
      _id_EXTRA_ASSIST_INPUT_DEVICE_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_HINT_KEYBOARD',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_INPUT_HINT_KEYBOARD =>
      _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_PACKAGE = _class.staticFieldId(
    r'EXTRA_ASSIST_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_PACKAGE =>
      _id_EXTRA_ASSIST_PACKAGE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_UID = _class.staticFieldId(
    r'EXTRA_ASSIST_UID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_UID =>
      _id_EXTRA_ASSIST_UID.get(_class, const jni.JStringType());

  static final _id_EXTRA_ATTRIBUTION_TAGS = _class.staticFieldId(
    r'EXTRA_ATTRIBUTION_TAGS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ATTRIBUTION_TAGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ATTRIBUTION_TAGS =>
      _id_EXTRA_ATTRIBUTION_TAGS.get(_class, const jni.JStringType());

  static final _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE = _class.staticFieldId(
    r'EXTRA_AUTO_LAUNCH_SINGLE_CHOICE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =>
      _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE.get(_class, const jni.JStringType());

  static final _id_EXTRA_BCC = _class.staticFieldId(
    r'EXTRA_BCC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_BCC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BCC =>
      _id_EXTRA_BCC.get(_class, const jni.JStringType());

  static final _id_EXTRA_BUG_REPORT = _class.staticFieldId(
    r'EXTRA_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_BUG_REPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BUG_REPORT =>
      _id_EXTRA_BUG_REPORT.get(_class, const jni.JStringType());

  static final _id_EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE =
      _class.staticFieldId(
    r'EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE =>
      _id_EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_CC = _class.staticFieldId(
    r'EXTRA_CC',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CC =>
      _id_EXTRA_CC.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_COMPONENT_NAME =>
      _id_EXTRA_CHANGED_COMPONENT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME_LIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_COMPONENT_NAME_LIST =>
      _id_EXTRA_CHANGED_COMPONENT_NAME_LIST.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_PACKAGE_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_PACKAGE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_PACKAGE_LIST =>
      _id_EXTRA_CHANGED_PACKAGE_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_UID_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_UID_LIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_UID_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_UID_LIST =>
      _id_EXTRA_CHANGED_UID_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOOSER_CUSTOM_ACTIONS = _class.staticFieldId(
    r'EXTRA_CHOOSER_CUSTOM_ACTIONS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHOOSER_CUSTOM_ACTIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_CUSTOM_ACTIONS =>
      _id_EXTRA_CHOOSER_CUSTOM_ACTIONS.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOOSER_MODIFY_SHARE_ACTION = _class.staticFieldId(
    r'EXTRA_CHOOSER_MODIFY_SHARE_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHOOSER_MODIFY_SHARE_ACTION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_MODIFY_SHARE_ACTION =>
      _id_EXTRA_CHOOSER_MODIFY_SHARE_ACTION.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =
      _class.staticFieldId(
    r'EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_CHOOSER_TARGETS = _class.staticFieldId(
    r'EXTRA_CHOOSER_TARGETS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHOOSER_TARGETS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_TARGETS =>
      _id_EXTRA_CHOOSER_TARGETS.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOSEN_COMPONENT = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOSEN_COMPONENT =>
      _id_EXTRA_CHOSEN_COMPONENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =>
      _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_COMPONENT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_COMPONENT_NAME =>
      _id_EXTRA_COMPONENT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_CONTENT_ANNOTATIONS = _class.staticFieldId(
    r'EXTRA_CONTENT_ANNOTATIONS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONTENT_ANNOTATIONS =>
      _id_EXTRA_CONTENT_ANNOTATIONS.get(_class, const jni.JStringType());

  static final _id_EXTRA_CONTENT_QUERY = _class.staticFieldId(
    r'EXTRA_CONTENT_QUERY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_CONTENT_QUERY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONTENT_QUERY =>
      _id_EXTRA_CONTENT_QUERY.get(_class, const jni.JStringType());

  static final _id_EXTRA_DATA_REMOVED = _class.staticFieldId(
    r'EXTRA_DATA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DATA_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DATA_REMOVED =>
      _id_EXTRA_DATA_REMOVED.get(_class, const jni.JStringType());

  static final _id_EXTRA_DOCK_STATE = _class.staticFieldId(
    r'EXTRA_DOCK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DOCK_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DOCK_STATE =>
      _id_EXTRA_DOCK_STATE.get(_class, const jni.JStringType());

  /// from: static public final int EXTRA_DOCK_STATE_CAR
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: static public final int EXTRA_DOCK_STATE_DESK
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: static public final int EXTRA_DOCK_STATE_HE_DESK
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: static public final int EXTRA_DOCK_STATE_LE_DESK
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: static public final int EXTRA_DOCK_STATE_UNDOCKED
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;
  static final _id_EXTRA_DONT_KILL_APP = _class.staticFieldId(
    r'EXTRA_DONT_KILL_APP',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DONT_KILL_APP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DONT_KILL_APP =>
      _id_EXTRA_DONT_KILL_APP.get(_class, const jni.JStringType());

  static final _id_EXTRA_DURATION_MILLIS = _class.staticFieldId(
    r'EXTRA_DURATION_MILLIS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_DURATION_MILLIS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DURATION_MILLIS =>
      _id_EXTRA_DURATION_MILLIS.get(_class, const jni.JStringType());

  static final _id_EXTRA_EMAIL = _class.staticFieldId(
    r'EXTRA_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_EMAIL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_EMAIL =>
      _id_EXTRA_EMAIL.get(_class, const jni.JStringType());

  static final _id_EXTRA_END_TIME = _class.staticFieldId(
    r'EXTRA_END_TIME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_END_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_END_TIME =>
      _id_EXTRA_END_TIME.get(_class, const jni.JStringType());

  static final _id_EXTRA_EXCLUDE_COMPONENTS = _class.staticFieldId(
    r'EXTRA_EXCLUDE_COMPONENTS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_EXCLUDE_COMPONENTS =>
      _id_EXTRA_EXCLUDE_COMPONENTS.get(_class, const jni.JStringType());

  static final _id_EXTRA_FROM_STORAGE = _class.staticFieldId(
    r'EXTRA_FROM_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_FROM_STORAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FROM_STORAGE =>
      _id_EXTRA_FROM_STORAGE.get(_class, const jni.JStringType());

  static final _id_EXTRA_HTML_TEXT = _class.staticFieldId(
    r'EXTRA_HTML_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_HTML_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_HTML_TEXT =>
      _id_EXTRA_HTML_TEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_INDEX = _class.staticFieldId(
    r'EXTRA_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_INDEX
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INDEX =>
      _id_EXTRA_INDEX.get(_class, const jni.JStringType());

  static final _id_EXTRA_INITIAL_INTENTS = _class.staticFieldId(
    r'EXTRA_INITIAL_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_INITIAL_INTENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INITIAL_INTENTS =>
      _id_EXTRA_INITIAL_INTENTS.get(_class, const jni.JStringType());

  static final _id_EXTRA_INSTALLER_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_INSTALLER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INSTALLER_PACKAGE_NAME =>
      _id_EXTRA_INSTALLER_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_INTENT = _class.staticFieldId(
    r'EXTRA_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INTENT =>
      _id_EXTRA_INTENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_KEY_EVENT = _class.staticFieldId(
    r'EXTRA_KEY_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_KEY_EVENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_KEY_EVENT =>
      _id_EXTRA_KEY_EVENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCALE_LIST = _class.staticFieldId(
    r'EXTRA_LOCALE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_LOCALE_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCALE_LIST =>
      _id_EXTRA_LOCALE_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCAL_ONLY = _class.staticFieldId(
    r'EXTRA_LOCAL_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_LOCAL_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCAL_ONLY =>
      _id_EXTRA_LOCAL_ONLY.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCUS_ID = _class.staticFieldId(
    r'EXTRA_LOCUS_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_LOCUS_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCUS_ID =>
      _id_EXTRA_LOCUS_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_MIME_TYPES = _class.staticFieldId(
    r'EXTRA_MIME_TYPES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_MIME_TYPES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MIME_TYPES =>
      _id_EXTRA_MIME_TYPES.get(_class, const jni.JStringType());

  static final _id_EXTRA_NOT_UNKNOWN_SOURCE = _class.staticFieldId(
    r'EXTRA_NOT_UNKNOWN_SOURCE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_NOT_UNKNOWN_SOURCE =>
      _id_EXTRA_NOT_UNKNOWN_SOURCE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ORIGINATING_URI = _class.staticFieldId(
    r'EXTRA_ORIGINATING_URI',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_ORIGINATING_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ORIGINATING_URI =>
      _id_EXTRA_ORIGINATING_URI.get(_class, const jni.JStringType());

  static final _id_EXTRA_PACKAGES = _class.staticFieldId(
    r'EXTRA_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PACKAGES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PACKAGES =>
      _id_EXTRA_PACKAGES.get(_class, const jni.JStringType());

  static final _id_EXTRA_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PACKAGE_NAME =>
      _id_EXTRA_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_PERMISSION_GROUP_NAME = _class.staticFieldId(
    r'EXTRA_PERMISSION_GROUP_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PERMISSION_GROUP_NAME =>
      _id_EXTRA_PERMISSION_GROUP_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_PHONE_NUMBER = _class.staticFieldId(
    r'EXTRA_PHONE_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PHONE_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PHONE_NUMBER =>
      _id_EXTRA_PHONE_NUMBER.get(_class, const jni.JStringType());

  static final _id_EXTRA_PROCESS_TEXT = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PROCESS_TEXT =>
      _id_EXTRA_PROCESS_TEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_PROCESS_TEXT_READONLY = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT_READONLY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PROCESS_TEXT_READONLY =>
      _id_EXTRA_PROCESS_TEXT_READONLY.get(_class, const jni.JStringType());

  static final _id_EXTRA_QUICK_VIEW_FEATURES = _class.staticFieldId(
    r'EXTRA_QUICK_VIEW_FEATURES',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_QUICK_VIEW_FEATURES =>
      _id_EXTRA_QUICK_VIEW_FEATURES.get(_class, const jni.JStringType());

  static final _id_EXTRA_QUIET_MODE = _class.staticFieldId(
    r'EXTRA_QUIET_MODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_QUIET_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_QUIET_MODE =>
      _id_EXTRA_QUIET_MODE.get(_class, const jni.JStringType());

  static final _id_EXTRA_REFERRER = _class.staticFieldId(
    r'EXTRA_REFERRER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_REFERRER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFERRER =>
      _id_EXTRA_REFERRER.get(_class, const jni.JStringType());

  static final _id_EXTRA_REFERRER_NAME = _class.staticFieldId(
    r'EXTRA_REFERRER_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_REFERRER_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFERRER_NAME =>
      _id_EXTRA_REFERRER_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_REMOTE_INTENT_TOKEN = _class.staticFieldId(
    r'EXTRA_REMOTE_INTENT_TOKEN',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REMOTE_INTENT_TOKEN =>
      _id_EXTRA_REMOTE_INTENT_TOKEN.get(_class, const jni.JStringType());

  static final _id_EXTRA_REPLACEMENT_EXTRAS = _class.staticFieldId(
    r'EXTRA_REPLACEMENT_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REPLACEMENT_EXTRAS =>
      _id_EXTRA_REPLACEMENT_EXTRAS.get(_class, const jni.JStringType());

  static final _id_EXTRA_REPLACING = _class.staticFieldId(
    r'EXTRA_REPLACING',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_REPLACING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REPLACING =>
      _id_EXTRA_REPLACING.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESTRICTIONS_BUNDLE = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_BUNDLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_BUNDLE =>
      _id_EXTRA_RESTRICTIONS_BUNDLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESTRICTIONS_INTENT = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_INTENT =>
      _id_EXTRA_RESTRICTIONS_INTENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESTRICTIONS_LIST = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_LIST',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_LIST =>
      _id_EXTRA_RESTRICTIONS_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESULT_RECEIVER = _class.staticFieldId(
    r'EXTRA_RESULT_RECEIVER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_RESULT_RECEIVER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESULT_RECEIVER =>
      _id_EXTRA_RESULT_RECEIVER.get(_class, const jni.JStringType());

  static final _id_EXTRA_RETURN_RESULT = _class.staticFieldId(
    r'EXTRA_RETURN_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_RETURN_RESULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RETURN_RESULT =>
      _id_EXTRA_RETURN_RESULT.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_ICON = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ICON =>
      _id_EXTRA_SHORTCUT_ICON.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_ICON_RESOURCE = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON_RESOURCE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ICON_RESOURCE =>
      _id_EXTRA_SHORTCUT_ICON_RESOURCE.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_ID = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ID =>
      _id_EXTRA_SHORTCUT_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_INTENT = _class.staticFieldId(
    r'EXTRA_SHORTCUT_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_INTENT =>
      _id_EXTRA_SHORTCUT_INTENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_NAME = _class.staticFieldId(
    r'EXTRA_SHORTCUT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_NAME =>
      _id_EXTRA_SHORTCUT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHUTDOWN_USERSPACE_ONLY = _class.staticFieldId(
    r'EXTRA_SHUTDOWN_USERSPACE_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHUTDOWN_USERSPACE_ONLY =>
      _id_EXTRA_SHUTDOWN_USERSPACE_ONLY.get(_class, const jni.JStringType());

  static final _id_EXTRA_SPLIT_NAME = _class.staticFieldId(
    r'EXTRA_SPLIT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SPLIT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SPLIT_NAME =>
      _id_EXTRA_SPLIT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_START_TIME = _class.staticFieldId(
    r'EXTRA_START_TIME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_START_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_START_TIME =>
      _id_EXTRA_START_TIME.get(_class, const jni.JStringType());

  static final _id_EXTRA_STREAM = _class.staticFieldId(
    r'EXTRA_STREAM',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_STREAM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_STREAM =>
      _id_EXTRA_STREAM.get(_class, const jni.JStringType());

  static final _id_EXTRA_SUBJECT = _class.staticFieldId(
    r'EXTRA_SUBJECT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SUBJECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SUBJECT =>
      _id_EXTRA_SUBJECT.get(_class, const jni.JStringType());

  static final _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS = _class.staticFieldId(
    r'EXTRA_SUSPENDED_PACKAGE_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SUSPENDED_PACKAGE_EXTRAS =>
      _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS.get(_class, const jni.JStringType());

  static final _id_EXTRA_TEMPLATE = _class.staticFieldId(
    r'EXTRA_TEMPLATE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_TEMPLATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TEMPLATE =>
      _id_EXTRA_TEMPLATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_TEXT = _class.staticFieldId(
    r'EXTRA_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TEXT =>
      _id_EXTRA_TEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_TIME = _class.staticFieldId(
    r'EXTRA_TIME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TIME =>
      _id_EXTRA_TIME.get(_class, const jni.JStringType());

  static final _id_EXTRA_TIMEZONE = _class.staticFieldId(
    r'EXTRA_TIMEZONE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_TIMEZONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TIMEZONE =>
      _id_EXTRA_TIMEZONE.get(_class, const jni.JStringType());

  static final _id_EXTRA_TITLE = _class.staticFieldId(
    r'EXTRA_TITLE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TITLE =>
      _id_EXTRA_TITLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_UID = _class.staticFieldId(
    r'EXTRA_UID',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_UID =>
      _id_EXTRA_UID.get(_class, const jni.JStringType());

  static final _id_EXTRA_USER = _class.staticFieldId(
    r'EXTRA_USER',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_USER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USER =>
      _id_EXTRA_USER.get(_class, const jni.JStringType());

  static final _id_EXTRA_USER_INITIATED = _class.staticFieldId(
    r'EXTRA_USER_INITIATED',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_USER_INITIATED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USER_INITIATED =>
      _id_EXTRA_USER_INITIATED.get(_class, const jni.JStringType());

  static final _id_EXTRA_USE_STYLUS_MODE = _class.staticFieldId(
    r'EXTRA_USE_STYLUS_MODE',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String EXTRA_USE_STYLUS_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USE_STYLUS_MODE =>
      _id_EXTRA_USE_STYLUS_MODE.get(_class, const jni.JStringType());

  /// from: static public final int FILL_IN_ACTION
  static const FILL_IN_ACTION = 1;

  /// from: static public final int FILL_IN_CATEGORIES
  static const FILL_IN_CATEGORIES = 4;

  /// from: static public final int FILL_IN_CLIP_DATA
  static const FILL_IN_CLIP_DATA = 128;

  /// from: static public final int FILL_IN_COMPONENT
  static const FILL_IN_COMPONENT = 8;

  /// from: static public final int FILL_IN_DATA
  static const FILL_IN_DATA = 2;

  /// from: static public final int FILL_IN_IDENTIFIER
  static const FILL_IN_IDENTIFIER = 256;

  /// from: static public final int FILL_IN_PACKAGE
  static const FILL_IN_PACKAGE = 16;

  /// from: static public final int FILL_IN_SELECTOR
  static const FILL_IN_SELECTOR = 64;

  /// from: static public final int FILL_IN_SOURCE_BOUNDS
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TASK
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TOP
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: static public final int FLAG_ACTIVITY_FORWARD_RESULT
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: static public final int FLAG_ACTIVITY_MATCH_EXTERNAL
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: static public final int FLAG_ACTIVITY_MULTIPLE_TASK
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: static public final int FLAG_ACTIVITY_NEW_DOCUMENT
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: static public final int FLAG_ACTIVITY_NEW_TASK
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: static public final int FLAG_ACTIVITY_NO_ANIMATION
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: static public final int FLAG_ACTIVITY_NO_HISTORY
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: static public final int FLAG_ACTIVITY_NO_USER_ACTION
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: static public final int FLAG_ACTIVITY_REORDER_TO_FRONT
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: static public final int FLAG_ACTIVITY_SINGLE_TOP
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: static public final int FLAG_ACTIVITY_TASK_ON_HOME
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: static public final int FLAG_DEBUG_LOG_RESOLUTION
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: static public final int FLAG_DIRECT_BOOT_AUTO
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: static public final int FLAG_EXCLUDE_STOPPED_PACKAGES
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: static public final int FLAG_FROM_BACKGROUND
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: static public final int FLAG_GRANT_PREFIX_URI_PERMISSION
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: static public final int FLAG_GRANT_READ_URI_PERMISSION
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: static public final int FLAG_GRANT_WRITE_URI_PERMISSION
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: static public final int FLAG_INCLUDE_STOPPED_PACKAGES
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: static public final int FLAG_RECEIVER_FOREGROUND
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: static public final int FLAG_RECEIVER_NO_ABORT
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: static public final int FLAG_RECEIVER_REGISTERED_ONLY
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: static public final int FLAG_RECEIVER_REPLACE_PENDING
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;
  static final _id_METADATA_DOCK_HOME = _class.staticFieldId(
    r'METADATA_DOCK_HOME',
    r'Ljava/lang/String;',
  );

  /// from: static public final java.lang.String METADATA_DOCK_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get METADATA_DOCK_HOME =>
      _id_METADATA_DOCK_HOME.get(_class, const jni.JStringType());

  /// from: static public final int URI_ALLOW_UNSAFE
  static const URI_ALLOW_UNSAFE = 4;

  /// from: static public final int URI_ANDROID_APP_SCHEME
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: static public final int URI_INTENT_SCHEME
  static const URI_INTENT_SCHEME = 1;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new1(
    Intent intent,
  ) {
    return Intent.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, intent.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new2(
    jni.JString string,
  ) {
    return Intent.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new3(
    jni.JString string,
    jni.JObject uri,
  ) {
    return Intent.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer)
        .reference);
  }

  static final _id_new4 = _class.constructorId(
    r'(Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new4(
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromReference(_new4(
            _class.reference.pointer,
            _id_new4 as jni.JMethodIDPtr,
            context.reference.pointer,
            class0.reference.pointer)
        .reference);
  }

  static final _id_new5 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new5(
    jni.JString string,
    jni.JObject uri,
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromReference(_new5(
            _class.reference.pointer,
            _id_new5 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            context.reference.pointer,
            class0.reference.pointer)
        .reference);
  }

  static final _id_createChooser = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _createChooser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser(
    Intent intent,
    jni.JObject charSequence,
  ) {
    return _createChooser(
            _class.reference.pointer,
            _id_createChooser as jni.JMethodIDPtr,
            intent.reference.pointer,
            charSequence.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_createChooser1 = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;',
  );

  static final _createChooser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser1(
    Intent intent,
    jni.JObject charSequence,
    jni.JObject intentSender,
  ) {
    return _createChooser1(
            _class.reference.pointer,
            _id_createChooser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            charSequence.reference.pointer,
            intentSender.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_clone = _class.instanceMethodId(
    r'clone',
    r'()Ljava/lang/Object;',
  );

  static final _clone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object clone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject clone() {
    return _clone(reference.pointer, _id_clone as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_cloneFilter = _class.instanceMethodId(
    r'cloneFilter',
    r'()Landroid/content/Intent;',
  );

  static final _cloneFilter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent cloneFilter()
  /// The returned object must be released after use, by calling the [release] method.
  Intent cloneFilter() {
    return _cloneFilter(reference.pointer, _id_cloneFilter as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_makeMainActivity = _class.staticMethodId(
    r'makeMainActivity',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeMainActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainActivity(
    jni.JObject componentName,
  ) {
    return _makeMainActivity(
            _class.reference.pointer,
            _id_makeMainActivity as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_makeMainSelectorActivity = _class.staticMethodId(
    r'makeMainSelectorActivity',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _makeMainSelectorActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainSelectorActivity(
    jni.JString string,
    jni.JString string1,
  ) {
    return _makeMainSelectorActivity(
            _class.reference.pointer,
            _id_makeMainSelectorActivity as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_makeRestartActivityTask = _class.staticMethodId(
    r'makeRestartActivityTask',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeRestartActivityTask = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeRestartActivityTask(
    jni.JObject componentName,
  ) {
    return _makeRestartActivityTask(
            _class.reference.pointer,
            _id_makeRestartActivityTask as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_getIntent = _class.staticMethodId(
    r'getIntent',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent getIntent(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntent(
    jni.JString string,
  ) {
    return _getIntent(_class.reference.pointer,
            _id_getIntent as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_parseUri = _class.staticMethodId(
    r'parseUri',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _parseUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.Intent parseUri(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseUri(
    jni.JString string,
    int i,
  ) {
    return _parseUri(_class.reference.pointer, _id_parseUri as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const $IntentType());
  }

  static final _id_getIntentOld = _class.staticMethodId(
    r'getIntentOld',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntentOld = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent getIntentOld(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntentOld(
    jni.JString string,
  ) {
    return _getIntentOld(_class.reference.pointer,
            _id_getIntentOld as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'()Ljava/lang/String;',
  );

  static final _getAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAction()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAction() {
    return _getAction(reference.pointer, _id_getAction as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getData = _class.instanceMethodId(
    r'getData',
    r'()Landroid/net/Uri;',
  );

  static final _getData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri getData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getData() {
    return _getData(reference.pointer, _id_getData as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getDataString = _class.instanceMethodId(
    r'getDataString',
    r'()Ljava/lang/String;',
  );

  static final _getDataString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getDataString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataString() {
    return _getDataString(
            reference.pointer, _id_getDataString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Ljava/lang/String;',
  );

  static final _getScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()Ljava/lang/String;',
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_resolveType = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _resolveType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveType(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType(
    Context context,
  ) {
    return _resolveType(reference.pointer, _id_resolveType as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_resolveType1 = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveType1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveType(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType1(
    jni.JObject contentResolver,
  ) {
    return _resolveType1(
            reference.pointer,
            _id_resolveType1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_resolveTypeIfNeeded = _class.instanceMethodId(
    r'resolveTypeIfNeeded',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveTypeIfNeeded = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveTypeIfNeeded(
    jni.JObject contentResolver,
  ) {
    return _resolveTypeIfNeeded(
            reference.pointer,
            _id_resolveTypeIfNeeded as jni.JMethodIDPtr,
            contentResolver.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getIdentifier = _class.instanceMethodId(
    r'getIdentifier',
    r'()Ljava/lang/String;',
  );

  static final _getIdentifier = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getIdentifier()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIdentifier() {
    return _getIdentifier(
            reference.pointer, _id_getIdentifier as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasCategory(java.lang.String string)
  bool hasCategory(
    jni.JString string,
  ) {
    return _hasCategory(reference.pointer, _id_hasCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getCategories = _class.instanceMethodId(
    r'getCategories',
    r'()Ljava/util/Set;',
  );

  static final _getCategories = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getCategories()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getCategories() {
    return _getCategories(
            reference.pointer, _id_getCategories as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getSelector = _class.instanceMethodId(
    r'getSelector',
    r'()Landroid/content/Intent;',
  );

  static final _getSelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getSelector()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getSelector() {
    return _getSelector(reference.pointer, _id_getSelector as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_getClipData = _class.instanceMethodId(
    r'getClipData',
    r'()Landroid/content/ClipData;',
  );

  static final _getClipData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ClipData getClipData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClipData() {
    return _getClipData(reference.pointer, _id_getClipData as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setExtrasClassLoader = _class.instanceMethodId(
    r'setExtrasClassLoader',
    r'(Ljava/lang/ClassLoader;)V',
  );

  static final _setExtrasClassLoader = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setExtrasClassLoader(java.lang.ClassLoader classLoader)
  void setExtrasClassLoader(
    jni.JObject classLoader,
  ) {
    _setExtrasClassLoader(
            reference.pointer,
            _id_setExtrasClassLoader as jni.JMethodIDPtr,
            classLoader.reference.pointer)
        .check();
  }

  static final _id_hasExtra = _class.instanceMethodId(
    r'hasExtra',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasExtra(java.lang.String string)
  bool hasExtra(
    jni.JString string,
  ) {
    return _hasExtra(reference.pointer, _id_hasExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_hasFileDescriptors = _class.instanceMethodId(
    r'hasFileDescriptors',
    r'()Z',
  );

  static final _hasFileDescriptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() {
    return _hasFileDescriptors(
            reference.pointer, _id_hasFileDescriptors as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getBooleanExtra = _class.instanceMethodId(
    r'getBooleanExtra',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _getBooleanExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBooleanExtra(java.lang.String string, boolean z)
  bool getBooleanExtra(
    jni.JString string,
    bool z,
  ) {
    return _getBooleanExtra(
            reference.pointer,
            _id_getBooleanExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_getByteExtra = _class.instanceMethodId(
    r'getByteExtra',
    r'(Ljava/lang/String;B)B',
  );

  static final _getByteExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallByteMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public byte getByteExtra(java.lang.String string, byte b)
  int getByteExtra(
    jni.JString string,
    int b,
  ) {
    return _getByteExtra(reference.pointer,
            _id_getByteExtra as jni.JMethodIDPtr, string.reference.pointer, b)
        .byte;
  }

  static final _id_getShortExtra = _class.instanceMethodId(
    r'getShortExtra',
    r'(Ljava/lang/String;S)S',
  );

  static final _getShortExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallShortMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public short getShortExtra(java.lang.String string, short s)
  int getShortExtra(
    jni.JString string,
    int s,
  ) {
    return _getShortExtra(reference.pointer,
            _id_getShortExtra as jni.JMethodIDPtr, string.reference.pointer, s)
        .short;
  }

  static final _id_getCharExtra = _class.instanceMethodId(
    r'getCharExtra',
    r'(Ljava/lang/String;C)C',
  );

  static final _getCharExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallCharMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public char getCharExtra(java.lang.String string, char c)
  int getCharExtra(
    jni.JString string,
    int c,
  ) {
    return _getCharExtra(reference.pointer,
            _id_getCharExtra as jni.JMethodIDPtr, string.reference.pointer, c)
        .char;
  }

  static final _id_getIntExtra = _class.instanceMethodId(
    r'getIntExtra',
    r'(Ljava/lang/String;I)I',
  );

  static final _getIntExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getIntExtra(java.lang.String string, int i)
  int getIntExtra(
    jni.JString string,
    int i,
  ) {
    return _getIntExtra(reference.pointer, _id_getIntExtra as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .integer;
  }

  static final _id_getLongExtra = _class.instanceMethodId(
    r'getLongExtra',
    r'(Ljava/lang/String;J)J',
  );

  static final _getLongExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallLongMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getLongExtra(java.lang.String string, long j)
  int getLongExtra(
    jni.JString string,
    int j,
  ) {
    return _getLongExtra(reference.pointer,
            _id_getLongExtra as jni.JMethodIDPtr, string.reference.pointer, j)
        .long;
  }

  static final _id_getFloatExtra = _class.instanceMethodId(
    r'getFloatExtra',
    r'(Ljava/lang/String;F)F',
  );

  static final _getFloatExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          'globalEnv_CallFloatMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public float getFloatExtra(java.lang.String string, float f)
  double getFloatExtra(
    jni.JString string,
    double f,
  ) {
    return _getFloatExtra(reference.pointer,
            _id_getFloatExtra as jni.JMethodIDPtr, string.reference.pointer, f)
        .float;
  }

  static final _id_getDoubleExtra = _class.instanceMethodId(
    r'getDoubleExtra',
    r'(Ljava/lang/String;D)D',
  );

  static final _getDoubleExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          'globalEnv_CallDoubleMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public double getDoubleExtra(java.lang.String string, double d)
  double getDoubleExtra(
    jni.JString string,
    double d,
  ) {
    return _getDoubleExtra(reference.pointer,
            _id_getDoubleExtra as jni.JMethodIDPtr, string.reference.pointer, d)
        .doubleFloat;
  }

  static final _id_getStringExtra = _class.instanceMethodId(
    r'getStringExtra',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getStringExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStringExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStringExtra(
    jni.JString string,
  ) {
    return _getStringExtra(reference.pointer,
            _id_getStringExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getCharSequenceExtra = _class.instanceMethodId(
    r'getCharSequenceExtra',
    r'(Ljava/lang/String;)Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceExtra(
    jni.JString string,
  ) {
    return _getCharSequenceExtra(
            reference.pointer,
            _id_getCharSequenceExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getParcelableExtra = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;)Landroid/os/Parcelable;',
  );

  static final _getParcelableExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T getParcelableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableExtra(
            reference.pointer,
            _id_getParcelableExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(T);
  }

  static final _id_getParcelableExtra1 = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getParcelableExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T getParcelableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableExtra1(
            reference.pointer,
            _id_getParcelableExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(T);
  }

  static final _id_getParcelableArrayExtra = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;)[Landroid/os/Parcelable;',
  );

  static final _getParcelableArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getParcelableArrayExtra(
    jni.JString string,
  ) {
    return _getParcelableArrayExtra(
            reference.pointer,
            _id_getParcelableArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getParcelableArrayExtra1 = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;',
  );

  static final _getParcelableArrayExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object[] getParcelableArrayExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<$T> getParcelableArrayExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayExtra1(
            reference.pointer,
            _id_getParcelableArrayExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(jni.JArrayType(T));
  }

  static final _id_getParcelableArrayListExtra = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayListExtra(
            reference.pointer,
            _id_getParcelableArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getParcelableArrayListExtra1 = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayListExtra1(
            reference.pointer,
            _id_getParcelableArrayListExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSerializableExtra = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.Serializable getSerializableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSerializableExtra(
    jni.JString string,
  ) {
    return _getSerializableExtra(
            reference.pointer,
            _id_getSerializableExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSerializableExtra1 = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T getSerializableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSerializableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSerializableExtra1(
            reference.pointer,
            _id_getSerializableExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(T);
  }

  static final _id_getIntegerArrayListExtra = _class.instanceMethodId(
    r'getIntegerArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getIntegerArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getIntegerArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntegerArrayListExtra(
    jni.JString string,
  ) {
    return _getIntegerArrayListExtra(
            reference.pointer,
            _id_getIntegerArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getStringArrayListExtra = _class.instanceMethodId(
    r'getStringArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getStringArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getStringArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStringArrayListExtra(
    jni.JString string,
  ) {
    return _getStringArrayListExtra(
            reference.pointer,
            _id_getStringArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getCharSequenceArrayListExtra = _class.instanceMethodId(
    r'getCharSequenceArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getCharSequenceArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceArrayListExtra(
    jni.JString string,
  ) {
    return _getCharSequenceArrayListExtra(
            reference.pointer,
            _id_getCharSequenceArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getBooleanArrayExtra = _class.instanceMethodId(
    r'getBooleanArrayExtra',
    r'(Ljava/lang/String;)[Z',
  );

  static final _getBooleanArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean[] getBooleanArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> getBooleanArrayExtra(
    jni.JString string,
  ) {
    return _getBooleanArrayExtra(
            reference.pointer,
            _id_getBooleanArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jbooleanType()));
  }

  static final _id_getByteArrayExtra = _class.instanceMethodId(
    r'getByteArrayExtra',
    r'(Ljava/lang/String;)[B',
  );

  static final _getByteArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getByteArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getByteArrayExtra(
    jni.JString string,
  ) {
    return _getByteArrayExtra(reference.pointer,
            _id_getByteArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_getShortArrayExtra = _class.instanceMethodId(
    r'getShortArrayExtra',
    r'(Ljava/lang/String;)[S',
  );

  static final _getShortArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public short[] getShortArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jshort> getShortArrayExtra(
    jni.JString string,
  ) {
    return _getShortArrayExtra(
            reference.pointer,
            _id_getShortArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jshortType()));
  }

  static final _id_getCharArrayExtra = _class.instanceMethodId(
    r'getCharArrayExtra',
    r'(Ljava/lang/String;)[C',
  );

  static final _getCharArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public char[] getCharArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jchar> getCharArrayExtra(
    jni.JString string,
  ) {
    return _getCharArrayExtra(reference.pointer,
            _id_getCharArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jcharType()));
  }

  static final _id_getIntArrayExtra = _class.instanceMethodId(
    r'getIntArrayExtra',
    r'(Ljava/lang/String;)[I',
  );

  static final _getIntArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getIntArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getIntArrayExtra(
    jni.JString string,
  ) {
    return _getIntArrayExtra(reference.pointer,
            _id_getIntArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_getLongArrayExtra = _class.instanceMethodId(
    r'getLongArrayExtra',
    r'(Ljava/lang/String;)[J',
  );

  static final _getLongArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public long[] getLongArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jlong> getLongArrayExtra(
    jni.JString string,
  ) {
    return _getLongArrayExtra(reference.pointer,
            _id_getLongArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jlongType()));
  }

  static final _id_getFloatArrayExtra = _class.instanceMethodId(
    r'getFloatArrayExtra',
    r'(Ljava/lang/String;)[F',
  );

  static final _getFloatArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public float[] getFloatArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getFloatArrayExtra(
    jni.JString string,
  ) {
    return _getFloatArrayExtra(
            reference.pointer,
            _id_getFloatArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jfloatType()));
  }

  static final _id_getDoubleArrayExtra = _class.instanceMethodId(
    r'getDoubleArrayExtra',
    r'(Ljava/lang/String;)[D',
  );

  static final _getDoubleArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public double[] getDoubleArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> getDoubleArrayExtra(
    jni.JString string,
  ) {
    return _getDoubleArrayExtra(
            reference.pointer,
            _id_getDoubleArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jdoubleType()));
  }

  static final _id_getStringArrayExtra = _class.instanceMethodId(
    r'getStringArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getStringArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getStringArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getStringArrayExtra(
    jni.JString string,
  ) {
    return _getStringArrayExtra(
            reference.pointer,
            _id_getStringArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getCharSequenceArrayExtra = _class.instanceMethodId(
    r'getCharSequenceArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getCharSequenceArrayExtra(
    jni.JString string,
  ) {
    return _getCharSequenceArrayExtra(
            reference.pointer,
            _id_getCharSequenceArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getBundleExtra = _class.instanceMethodId(
    r'getBundleExtra',
    r'(Ljava/lang/String;)Landroid/os/Bundle;',
  );

  static final _getBundleExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getBundleExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBundleExtra(
    jni.JString string,
  ) {
    return _getBundleExtra(reference.pointer,
            _id_getBundleExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExtras = _class.instanceMethodId(
    r'getExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFlags = _class.instanceMethodId(
    r'getFlags',
    r'()I',
  );

  static final _getFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getFlags()
  int getFlags() {
    return _getFlags(reference.pointer, _id_getFlags as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPackage = _class.instanceMethodId(
    r'getPackage',
    r'()Ljava/lang/String;',
  );

  static final _getPackage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackage() {
    return _getPackage(reference.pointer, _id_getPackage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getComponent = _class.instanceMethodId(
    r'getComponent',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponent() {
    return _getComponent(
            reference.pointer, _id_getComponent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getSourceBounds = _class.instanceMethodId(
    r'getSourceBounds',
    r'()Landroid/graphics/Rect;',
  );

  static final _getSourceBounds = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Rect getSourceBounds()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSourceBounds() {
    return _getSourceBounds(
            reference.pointer, _id_getSourceBounds as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;',
  );

  static final _resolveActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivity(
    jni.JObject packageManager,
  ) {
    return _resolveActivity(
            reference.pointer,
            _id_resolveActivity as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_resolveActivityInfo = _class.instanceMethodId(
    r'resolveActivityInfo',
    r'(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _resolveActivityInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivityInfo(
    jni.JObject packageManager,
    int i,
  ) {
    return _resolveActivityInfo(
            reference.pointer,
            _id_resolveActivityInfo as jni.JMethodIDPtr,
            packageManager.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_setAction = _class.instanceMethodId(
    r'setAction',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setAction(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setAction(
    jni.JString string,
  ) {
    return _setAction(reference.pointer, _id_setAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setData = _class.instanceMethodId(
    r'setData',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setData(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setData(
    jni.JObject uri,
  ) {
    return _setData(reference.pointer, _id_setData as jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setDataAndNormalize = _class.instanceMethodId(
    r'setDataAndNormalize',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setDataAndNormalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndNormalize(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndNormalize(
    jni.JObject uri,
  ) {
    return _setDataAndNormalize(reference.pointer,
            _id_setDataAndNormalize as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setType = _class.instanceMethodId(
    r'setType',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setType(
    jni.JString string,
  ) {
    return _setType(reference.pointer, _id_setType as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setTypeAndNormalize = _class.instanceMethodId(
    r'setTypeAndNormalize',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setTypeAndNormalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setTypeAndNormalize(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setTypeAndNormalize(
    jni.JString string,
  ) {
    return _setTypeAndNormalize(
            reference.pointer,
            _id_setTypeAndNormalize as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setDataAndType = _class.instanceMethodId(
    r'setDataAndType',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndType(
    jni.JObject uri,
    jni.JString string,
  ) {
    return _setDataAndType(
            reference.pointer,
            _id_setDataAndType as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setDataAndTypeAndNormalize = _class.instanceMethodId(
    r'setDataAndTypeAndNormalize',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndTypeAndNormalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndTypeAndNormalize(
    jni.JObject uri,
    jni.JString string,
  ) {
    return _setDataAndTypeAndNormalize(
            reference.pointer,
            _id_setDataAndTypeAndNormalize as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setIdentifier = _class.instanceMethodId(
    r'setIdentifier',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setIdentifier = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setIdentifier(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setIdentifier(
    jni.JString string,
  ) {
    return _setIdentifier(reference.pointer,
            _id_setIdentifier as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _addCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent addCategory(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addCategory(
    jni.JString string,
  ) {
    return _addCategory(reference.pointer, _id_addCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_removeCategory = _class.instanceMethodId(
    r'removeCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _removeCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeCategory(java.lang.String string)
  void removeCategory(
    jni.JString string,
  ) {
    _removeCategory(reference.pointer, _id_removeCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setSelector = _class.instanceMethodId(
    r'setSelector',
    r'(Landroid/content/Intent;)V',
  );

  static final _setSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setSelector(android.content.Intent intent)
  void setSelector(
    Intent intent,
  ) {
    _setSelector(reference.pointer, _id_setSelector as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_setClipData = _class.instanceMethodId(
    r'setClipData',
    r'(Landroid/content/ClipData;)V',
  );

  static final _setClipData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setClipData(android.content.ClipData clipData)
  void setClipData(
    jni.JObject clipData,
  ) {
    _setClipData(reference.pointer, _id_setClipData as jni.JMethodIDPtr,
            clipData.reference.pointer)
        .check();
  }

  static final _id_putExtra = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Z)Landroid/content/Intent;',
  );

  static final _putExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra(
    jni.JString string,
    bool z,
  ) {
    return _putExtra(reference.pointer, _id_putExtra as jni.JMethodIDPtr,
            string.reference.pointer, z ? 1 : 0)
        .object(const $IntentType());
  }

  static final _id_putExtra1 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;B)Landroid/content/Intent;',
  );

  static final _putExtra1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, byte b)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra1(
    jni.JString string,
    int b,
  ) {
    return _putExtra1(reference.pointer, _id_putExtra1 as jni.JMethodIDPtr,
            string.reference.pointer, b)
        .object(const $IntentType());
  }

  static final _id_putExtra2 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;C)Landroid/content/Intent;',
  );

  static final _putExtra2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, char c)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra2(
    jni.JString string,
    int c,
  ) {
    return _putExtra2(reference.pointer, _id_putExtra2 as jni.JMethodIDPtr,
            string.reference.pointer, c)
        .object(const $IntentType());
  }

  static final _id_putExtra3 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;S)Landroid/content/Intent;',
  );

  static final _putExtra3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, short s)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra3(
    jni.JString string,
    int s,
  ) {
    return _putExtra3(reference.pointer, _id_putExtra3 as jni.JMethodIDPtr,
            string.reference.pointer, s)
        .object(const $IntentType());
  }

  static final _id_putExtra4 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _putExtra4 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra4(
    jni.JString string,
    int i,
  ) {
    return _putExtra4(reference.pointer, _id_putExtra4 as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const $IntentType());
  }

  static final _id_putExtra5 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;J)Landroid/content/Intent;',
  );

  static final _putExtra5 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra5(
    jni.JString string,
    int j,
  ) {
    return _putExtra5(reference.pointer, _id_putExtra5 as jni.JMethodIDPtr,
            string.reference.pointer, j)
        .object(const $IntentType());
  }

  static final _id_putExtra6 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;F)Landroid/content/Intent;',
  );

  static final _putExtra6 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, float f)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra6(
    jni.JString string,
    double f,
  ) {
    return _putExtra6(reference.pointer, _id_putExtra6 as jni.JMethodIDPtr,
            string.reference.pointer, f)
        .object(const $IntentType());
  }

  static final _id_putExtra7 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;D)Landroid/content/Intent;',
  );

  static final _putExtra7 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, double d)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra7(
    jni.JString string,
    double d,
  ) {
    return _putExtra7(reference.pointer, _id_putExtra7 as jni.JMethodIDPtr,
            string.reference.pointer, d)
        .object(const $IntentType());
  }

  static final _id_putExtra8 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra8(
    jni.JString string,
    jni.JString string1,
  ) {
    return _putExtra8(reference.pointer, _id_putExtra8 as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra9 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra9 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra9(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return _putExtra9(reference.pointer, _id_putExtra9 as jni.JMethodIDPtr,
            string.reference.pointer, charSequence.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra10 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra10 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra10(
    jni.JString string,
    jni.JObject parcelable,
  ) {
    return _putExtra10(reference.pointer, _id_putExtra10 as jni.JMethodIDPtr,
            string.reference.pointer, parcelable.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra11 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra11 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra11(
    jni.JString string,
    jni.JArray<jni.JObject> parcelables,
  ) {
    return _putExtra11(reference.pointer, _id_putExtra11 as jni.JMethodIDPtr,
            string.reference.pointer, parcelables.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putParcelableArrayListExtra = _class.instanceMethodId(
    r'putParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putParcelableArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putParcelableArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putParcelableArrayListExtra(
            reference.pointer,
            _id_putParcelableArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putIntegerArrayListExtra = _class.instanceMethodId(
    r'putIntegerArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putIntegerArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putIntegerArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putIntegerArrayListExtra(
            reference.pointer,
            _id_putIntegerArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putStringArrayListExtra = _class.instanceMethodId(
    r'putStringArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putStringArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putStringArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putStringArrayListExtra(
            reference.pointer,
            _id_putStringArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putCharSequenceArrayListExtra = _class.instanceMethodId(
    r'putCharSequenceArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putCharSequenceArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putCharSequenceArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putCharSequenceArrayListExtra(
            reference.pointer,
            _id_putCharSequenceArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra12 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/io/Serializable;)Landroid/content/Intent;',
  );

  static final _putExtra12 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra12(
    jni.JString string,
    jni.JObject serializable,
  ) {
    return _putExtra12(reference.pointer, _id_putExtra12 as jni.JMethodIDPtr,
            string.reference.pointer, serializable.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra13 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Z)Landroid/content/Intent;',
  );

  static final _putExtra13 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean[] zs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra13(
    jni.JString string,
    jni.JArray<jni.jboolean> zs,
  ) {
    return _putExtra13(reference.pointer, _id_putExtra13 as jni.JMethodIDPtr,
            string.reference.pointer, zs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra14 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[B)Landroid/content/Intent;',
  );

  static final _putExtra14 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra14(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _putExtra14(reference.pointer, _id_putExtra14 as jni.JMethodIDPtr,
            string.reference.pointer, bs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra15 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[S)Landroid/content/Intent;',
  );

  static final _putExtra15 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, short[] ss)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra15(
    jni.JString string,
    jni.JArray<jni.jshort> ss,
  ) {
    return _putExtra15(reference.pointer, _id_putExtra15 as jni.JMethodIDPtr,
            string.reference.pointer, ss.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra16 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[C)Landroid/content/Intent;',
  );

  static final _putExtra16 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, char[] cs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra16(
    jni.JString string,
    jni.JArray<jni.jchar> cs,
  ) {
    return _putExtra16(reference.pointer, _id_putExtra16 as jni.JMethodIDPtr,
            string.reference.pointer, cs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra17 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[I)Landroid/content/Intent;',
  );

  static final _putExtra17 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra17(
    jni.JString string,
    jni.JArray<jni.jint> is0,
  ) {
    return _putExtra17(reference.pointer, _id_putExtra17 as jni.JMethodIDPtr,
            string.reference.pointer, is0.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra18 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[J)Landroid/content/Intent;',
  );

  static final _putExtra18 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, long[] js)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra18(
    jni.JString string,
    jni.JArray<jni.jlong> js,
  ) {
    return _putExtra18(reference.pointer, _id_putExtra18 as jni.JMethodIDPtr,
            string.reference.pointer, js.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra19 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[F)Landroid/content/Intent;',
  );

  static final _putExtra19 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, float[] fs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra19(
    jni.JString string,
    jni.JArray<jni.jfloat> fs,
  ) {
    return _putExtra19(reference.pointer, _id_putExtra19 as jni.JMethodIDPtr,
            string.reference.pointer, fs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra20 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[D)Landroid/content/Intent;',
  );

  static final _putExtra20 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, double[] ds)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra20(
    jni.JString string,
    jni.JArray<jni.jdouble> ds,
  ) {
    return _putExtra20(reference.pointer, _id_putExtra20 as jni.JMethodIDPtr,
            string.reference.pointer, ds.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra21 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra21 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra21(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return _putExtra21(reference.pointer, _id_putExtra21 as jni.JMethodIDPtr,
            string.reference.pointer, strings.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra22 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra22 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra22(
    jni.JString string,
    jni.JArray<jni.JObject> charSequences,
  ) {
    return _putExtra22(reference.pointer, _id_putExtra22 as jni.JMethodIDPtr,
            string.reference.pointer, charSequences.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra23 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtra23 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra23(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _putExtra23(reference.pointer, _id_putExtra23 as jni.JMethodIDPtr,
            string.reference.pointer, bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtras = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _putExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras(
    Intent intent,
  ) {
    return _putExtras(reference.pointer, _id_putExtras as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtras1 = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtras1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras1(
    jni.JObject bundle,
  ) {
    return _putExtras1(reference.pointer, _id_putExtras1 as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_replaceExtras = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _replaceExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent replaceExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras(
    Intent intent,
  ) {
    return _replaceExtras(reference.pointer,
            _id_replaceExtras as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_replaceExtras1 = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _replaceExtras1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent replaceExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras1(
    jni.JObject bundle,
  ) {
    return _replaceExtras1(reference.pointer,
            _id_replaceExtras1 as jni.JMethodIDPtr, bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_removeExtra = _class.instanceMethodId(
    r'removeExtra',
    r'(Ljava/lang/String;)V',
  );

  static final _removeExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeExtra(java.lang.String string)
  void removeExtra(
    jni.JString string,
  ) {
    _removeExtra(reference.pointer, _id_removeExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setFlags = _class.instanceMethodId(
    r'setFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _setFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Intent setFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setFlags(
    int i,
  ) {
    return _setFlags(reference.pointer, _id_setFlags as jni.JMethodIDPtr, i)
        .object(const $IntentType());
  }

  static final _id_addFlags = _class.instanceMethodId(
    r'addFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _addFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Intent addFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addFlags(
    int i,
  ) {
    return _addFlags(reference.pointer, _id_addFlags as jni.JMethodIDPtr, i)
        .object(const $IntentType());
  }

  static final _id_removeFlags = _class.instanceMethodId(
    r'removeFlags',
    r'(I)V',
  );

  static final _removeFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void removeFlags(int i)
  void removeFlags(
    int i,
  ) {
    _removeFlags(reference.pointer, _id_removeFlags as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setPackage = _class.instanceMethodId(
    r'setPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setPackage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setPackage(
    jni.JString string,
  ) {
    return _setPackage(reference.pointer, _id_setPackage as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setComponent = _class.instanceMethodId(
    r'setComponent',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _setComponent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setComponent(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setComponent(
    jni.JObject componentName,
  ) {
    return _setComponent(
            reference.pointer,
            _id_setComponent as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setClassName = _class.instanceMethodId(
    r'setClassName',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClassName(android.content.Context context, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName(
    Context context,
    jni.JString string,
  ) {
    return _setClassName(
            reference.pointer,
            _id_setClassName as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setClassName1 = _class.instanceMethodId(
    r'setClassName',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName1(
    jni.JString string,
    jni.JString string1,
  ) {
    return _setClassName1(
            reference.pointer,
            _id_setClassName1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setClass = _class.instanceMethodId(
    r'setClass',
    r'(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;',
  );

  static final _setClass = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClass(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClass(
    Context context,
    jni.JObject class0,
  ) {
    return _setClass(reference.pointer, _id_setClass as jni.JMethodIDPtr,
            context.reference.pointer, class0.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setSourceBounds = _class.instanceMethodId(
    r'setSourceBounds',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setSourceBounds = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setSourceBounds(android.graphics.Rect rect)
  void setSourceBounds(
    jni.JObject rect,
  ) {
    _setSourceBounds(reference.pointer, _id_setSourceBounds as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_fillIn = _class.instanceMethodId(
    r'fillIn',
    r'(Landroid/content/Intent;I)I',
  );

  static final _fillIn = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public int fillIn(android.content.Intent intent, int i)
  int fillIn(
    Intent intent,
    int i,
  ) {
    return _fillIn(reference.pointer, _id_fillIn as jni.JMethodIDPtr,
            intent.reference.pointer, i)
        .integer;
  }

  static final _id_filterEquals = _class.instanceMethodId(
    r'filterEquals',
    r'(Landroid/content/Intent;)Z',
  );

  static final _filterEquals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean filterEquals(android.content.Intent intent)
  bool filterEquals(
    Intent intent,
  ) {
    return _filterEquals(reference.pointer,
            _id_filterEquals as jni.JMethodIDPtr, intent.reference.pointer)
        .boolean;
  }

  static final _id_filterHashCode = _class.instanceMethodId(
    r'filterHashCode',
    r'()I',
  );

  static final _filterHashCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int filterHashCode()
  int filterHashCode() {
    return _filterHashCode(
            reference.pointer, _id_filterHashCode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r'toURI',
    r'()Ljava/lang/String;',
  );

  static final _toURI = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toURI()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toURI() {
    return _toURI(reference.pointer, _id_toURI as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toUri = _class.instanceMethodId(
    r'toUri',
    r'(I)Ljava/lang/String;',
  );

  static final _toUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.String toUri(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toUri(
    int i,
  ) {
    return _toUri(reference.pointer, _id_toUri as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(
    jni.JObject parcel,
  ) {
    _readFromParcel(reference.pointer, _id_readFromParcel as jni.JMethodIDPtr,
            parcel.reference.pointer)
        .check();
  }

  static final _id_parseIntent = _class.staticMethodId(
    r'parseIntent',
    r'(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/content/Intent;',
  );

  static final _parseIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseIntent(
    jni.JObject resources,
    jni.JObject xmlPullParser,
    jni.JObject attributeSet,
  ) {
    return _parseIntent(
            _class.reference.pointer,
            _id_parseIntent as jni.JMethodIDPtr,
            resources.reference.pointer,
            xmlPullParser.reference.pointer,
            attributeSet.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_normalizeMimeType = _class.staticMethodId(
    r'normalizeMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _normalizeMimeType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String normalizeMimeType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString normalizeMimeType(
    jni.JString string,
  ) {
    return _normalizeMimeType(_class.reference.pointer,
            _id_normalizeMimeType as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $IntentType extends jni.JObjType<Intent> {
  const $IntentType();

  @override
  String get signature => r'Landroid/content/Intent;';

  @override
  Intent fromReference(jni.JReference reference) =>
      Intent.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentType) && other is $IntentType;
  }
}

/// from: android.content.IntentFilter$AuthorityEntry
class IntentFilter_AuthorityEntry extends jni.JObject {
  @override
  late final jni.JObjType<IntentFilter_AuthorityEntry> $type = type;

  IntentFilter_AuthorityEntry.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'android/content/IntentFilter$AuthorityEntry');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentFilter_AuthorityEntryType();
  static final _id_new0 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter_AuthorityEntry(
    jni.JString string,
    jni.JString string1,
  ) {
    return IntentFilter_AuthorityEntry.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Ljava/lang/String;',
  );

  static final _getHost = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getHost()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getHost() {
    return _getHost(reference.pointer, _id_getHost as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getPort()
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni.JMethodIDPtr).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_match = _class.instanceMethodId(
    r'match',
    r'(Landroid/net/Uri;)I',
  );

  static final _match = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int match(android.net.Uri uri)
  int match(
    jni.JObject uri,
  ) {
    return _match(reference.pointer, _id_match as jni.JMethodIDPtr,
            uri.reference.pointer)
        .integer;
  }
}

final class $IntentFilter_AuthorityEntryType
    extends jni.JObjType<IntentFilter_AuthorityEntry> {
  const $IntentFilter_AuthorityEntryType();

  @override
  String get signature => r'Landroid/content/IntentFilter$AuthorityEntry;';

  @override
  IntentFilter_AuthorityEntry fromReference(jni.JReference reference) =>
      IntentFilter_AuthorityEntry.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentFilter_AuthorityEntryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilter_AuthorityEntryType) &&
        other is $IntentFilter_AuthorityEntryType;
  }
}

/// from: android.content.IntentFilter$MalformedMimeTypeException
class IntentFilter_MalformedMimeTypeException extends jni.JObject {
  @override
  late final jni.JObjType<IntentFilter_MalformedMimeTypeException> $type = type;

  IntentFilter_MalformedMimeTypeException.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'android/content/IntentFilter$MalformedMimeTypeException');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentFilter_MalformedMimeTypeExceptionType();
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter_MalformedMimeTypeException() {
    return IntentFilter_MalformedMimeTypeException.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter_MalformedMimeTypeException.new1(
    jni.JString string,
  ) {
    return IntentFilter_MalformedMimeTypeException.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            string.reference.pointer)
        .reference);
  }
}

final class $IntentFilter_MalformedMimeTypeExceptionType
    extends jni.JObjType<IntentFilter_MalformedMimeTypeException> {
  const $IntentFilter_MalformedMimeTypeExceptionType();

  @override
  String get signature =>
      r'Landroid/content/IntentFilter$MalformedMimeTypeException;';

  @override
  IntentFilter_MalformedMimeTypeException fromReference(
          jni.JReference reference) =>
      IntentFilter_MalformedMimeTypeException.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentFilter_MalformedMimeTypeExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($IntentFilter_MalformedMimeTypeExceptionType) &&
        other is $IntentFilter_MalformedMimeTypeExceptionType;
  }
}

/// from: android.content.IntentFilter
class IntentFilter extends jni.JObject {
  @override
  late final jni.JObjType<IntentFilter> $type = type;

  IntentFilter.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/content/IntentFilter');

  /// The type which includes information such as the signature of this class.
  static const type = $IntentFilterType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  /// from: static public final int MATCH_ADJUSTMENT_MASK
  static const MATCH_ADJUSTMENT_MASK = 65535;

  /// from: static public final int MATCH_ADJUSTMENT_NORMAL
  static const MATCH_ADJUSTMENT_NORMAL = 32768;

  /// from: static public final int MATCH_CATEGORY_EMPTY
  static const MATCH_CATEGORY_EMPTY = 1048576;

  /// from: static public final int MATCH_CATEGORY_HOST
  static const MATCH_CATEGORY_HOST = 3145728;

  /// from: static public final int MATCH_CATEGORY_MASK
  static const MATCH_CATEGORY_MASK = 268369920;

  /// from: static public final int MATCH_CATEGORY_PATH
  static const MATCH_CATEGORY_PATH = 5242880;

  /// from: static public final int MATCH_CATEGORY_PORT
  static const MATCH_CATEGORY_PORT = 4194304;

  /// from: static public final int MATCH_CATEGORY_SCHEME
  static const MATCH_CATEGORY_SCHEME = 2097152;

  /// from: static public final int MATCH_CATEGORY_SCHEME_SPECIFIC_PART
  static const MATCH_CATEGORY_SCHEME_SPECIFIC_PART = 5767168;

  /// from: static public final int MATCH_CATEGORY_TYPE
  static const MATCH_CATEGORY_TYPE = 6291456;

  /// from: static public final int NO_MATCH_ACTION
  static const NO_MATCH_ACTION = -3;

  /// from: static public final int NO_MATCH_CATEGORY
  static const NO_MATCH_CATEGORY = -4;

  /// from: static public final int NO_MATCH_DATA
  static const NO_MATCH_DATA = -2;

  /// from: static public final int NO_MATCH_TYPE
  static const NO_MATCH_TYPE = -1;

  /// from: static public final int SYSTEM_HIGH_PRIORITY
  static const SYSTEM_HIGH_PRIORITY = 1000;

  /// from: static public final int SYSTEM_LOW_PRIORITY
  static const SYSTEM_LOW_PRIORITY = -1000;
  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter() {
    return IntentFilter.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new1(
    jni.JString string,
  ) {
    return IntentFilter.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new2(
    jni.JString string,
    jni.JString string1,
  ) {
    return IntentFilter.fromReference(_new2(
            _class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r'(Landroid/content/IntentFilter;)V',
  );

  static final _new3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new3(
    IntentFilter intentFilter,
  ) {
    return IntentFilter.fromReference(_new3(_class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr, intentFilter.reference.pointer)
        .reference);
  }

  static final _id_create = _class.staticMethodId(
    r'create',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;',
  );

  static final _create = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.IntentFilter create(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static IntentFilter create(
    jni.JString string,
    jni.JString string1,
  ) {
    return _create(_class.reference.pointer, _id_create as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $IntentFilterType());
  }

  static final _id_setPriority = _class.instanceMethodId(
    r'setPriority',
    r'(I)V',
  );

  static final _setPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setPriority(int i)
  void setPriority(
    int i,
  ) {
    _setPriority(reference.pointer, _id_setPriority as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getPriority = _class.instanceMethodId(
    r'getPriority',
    r'()I',
  );

  static final _getPriority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getPriority()
  int getPriority() {
    return _getPriority(reference.pointer, _id_getPriority as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_addAction = _class.instanceMethodId(
    r'addAction',
    r'(Ljava/lang/String;)V',
  );

  static final _addAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void addAction(java.lang.String string)
  void addAction(
    jni.JString string,
  ) {
    _addAction(reference.pointer, _id_addAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_countActions = _class.instanceMethodId(
    r'countActions',
    r'()I',
  );

  static final _countActions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countActions()
  int countActions() {
    return _countActions(
            reference.pointer, _id_countActions as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'(I)Ljava/lang/String;',
  );

  static final _getAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getAction(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAction(
    int i,
  ) {
    return _getAction(reference.pointer, _id_getAction as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_hasAction = _class.instanceMethodId(
    r'hasAction',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasAction(java.lang.String string)
  bool hasAction(
    jni.JString string,
  ) {
    return _hasAction(reference.pointer, _id_hasAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_matchAction = _class.instanceMethodId(
    r'matchAction',
    r'(Ljava/lang/String;)Z',
  );

  static final _matchAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean matchAction(java.lang.String string)
  bool matchAction(
    jni.JString string,
  ) {
    return _matchAction(reference.pointer, _id_matchAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_actionsIterator = _class.instanceMethodId(
    r'actionsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _actionsIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator actionsIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> actionsIterator() {
    return _actionsIterator(
            reference.pointer, _id_actionsIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_addDataType = _class.instanceMethodId(
    r'addDataType',
    r'(Ljava/lang/String;)V',
  );

  static final _addDataType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void addDataType(java.lang.String string)
  void addDataType(
    jni.JString string,
  ) {
    _addDataType(reference.pointer, _id_addDataType as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_hasDataType = _class.instanceMethodId(
    r'hasDataType',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasDataType(java.lang.String string)
  bool hasDataType(
    jni.JString string,
  ) {
    return _hasDataType(reference.pointer, _id_hasDataType as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_countDataTypes = _class.instanceMethodId(
    r'countDataTypes',
    r'()I',
  );

  static final _countDataTypes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countDataTypes()
  int countDataTypes() {
    return _countDataTypes(
            reference.pointer, _id_countDataTypes as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataType = _class.instanceMethodId(
    r'getDataType',
    r'(I)Ljava/lang/String;',
  );

  static final _getDataType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getDataType(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataType(
    int i,
  ) {
    return _getDataType(
            reference.pointer, _id_getDataType as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_typesIterator = _class.instanceMethodId(
    r'typesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _typesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator typesIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> typesIterator() {
    return _typesIterator(
            reference.pointer, _id_typesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_addDataScheme = _class.instanceMethodId(
    r'addDataScheme',
    r'(Ljava/lang/String;)V',
  );

  static final _addDataScheme = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void addDataScheme(java.lang.String string)
  void addDataScheme(
    jni.JString string,
  ) {
    _addDataScheme(reference.pointer, _id_addDataScheme as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_countDataSchemes = _class.instanceMethodId(
    r'countDataSchemes',
    r'()I',
  );

  static final _countDataSchemes = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countDataSchemes()
  int countDataSchemes() {
    return _countDataSchemes(
            reference.pointer, _id_countDataSchemes as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataScheme = _class.instanceMethodId(
    r'getDataScheme',
    r'(I)Ljava/lang/String;',
  );

  static final _getDataScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getDataScheme(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataScheme(
    int i,
  ) {
    return _getDataScheme(
            reference.pointer, _id_getDataScheme as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_hasDataScheme = _class.instanceMethodId(
    r'hasDataScheme',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataScheme = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasDataScheme(java.lang.String string)
  bool hasDataScheme(
    jni.JString string,
  ) {
    return _hasDataScheme(reference.pointer,
            _id_hasDataScheme as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_schemesIterator = _class.instanceMethodId(
    r'schemesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _schemesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator schemesIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> schemesIterator() {
    return _schemesIterator(
            reference.pointer, _id_schemesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_addDataSchemeSpecificPart = _class.instanceMethodId(
    r'addDataSchemeSpecificPart',
    r'(Ljava/lang/String;I)V',
  );

  static final _addDataSchemeSpecificPart = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void addDataSchemeSpecificPart(java.lang.String string, int i)
  void addDataSchemeSpecificPart(
    jni.JString string,
    int i,
  ) {
    _addDataSchemeSpecificPart(
            reference.pointer,
            _id_addDataSchemeSpecificPart as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .check();
  }

  static final _id_countDataSchemeSpecificParts = _class.instanceMethodId(
    r'countDataSchemeSpecificParts',
    r'()I',
  );

  static final _countDataSchemeSpecificParts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countDataSchemeSpecificParts()
  int countDataSchemeSpecificParts() {
    return _countDataSchemeSpecificParts(reference.pointer,
            _id_countDataSchemeSpecificParts as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataSchemeSpecificPart = _class.instanceMethodId(
    r'getDataSchemeSpecificPart',
    r'(I)Landroid/os/PatternMatcher;',
  );

  static final _getDataSchemeSpecificPart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.os.PatternMatcher getDataSchemeSpecificPart(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataSchemeSpecificPart(
    int i,
  ) {
    return _getDataSchemeSpecificPart(reference.pointer,
            _id_getDataSchemeSpecificPart as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_hasDataSchemeSpecificPart = _class.instanceMethodId(
    r'hasDataSchemeSpecificPart',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataSchemeSpecificPart = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasDataSchemeSpecificPart(java.lang.String string)
  bool hasDataSchemeSpecificPart(
    jni.JString string,
  ) {
    return _hasDataSchemeSpecificPart(
            reference.pointer,
            _id_hasDataSchemeSpecificPart as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_schemeSpecificPartsIterator = _class.instanceMethodId(
    r'schemeSpecificPartsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _schemeSpecificPartsIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator schemeSpecificPartsIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JObject> schemeSpecificPartsIterator() {
    return _schemeSpecificPartsIterator(reference.pointer,
            _id_schemeSpecificPartsIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JObjectType()));
  }

  static final _id_addDataAuthority = _class.instanceMethodId(
    r'addDataAuthority',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _addDataAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void addDataAuthority(java.lang.String string, java.lang.String string1)
  void addDataAuthority(
    jni.JString string,
    jni.JString string1,
  ) {
    _addDataAuthority(
            reference.pointer,
            _id_addDataAuthority as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_countDataAuthorities = _class.instanceMethodId(
    r'countDataAuthorities',
    r'()I',
  );

  static final _countDataAuthorities = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countDataAuthorities()
  int countDataAuthorities() {
    return _countDataAuthorities(
            reference.pointer, _id_countDataAuthorities as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataAuthority = _class.instanceMethodId(
    r'getDataAuthority',
    r'(I)Landroid/content/IntentFilter$AuthorityEntry;',
  );

  static final _getDataAuthority = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.content.IntentFilter$AuthorityEntry getDataAuthority(int i)
  /// The returned object must be released after use, by calling the [release] method.
  IntentFilter_AuthorityEntry getDataAuthority(
    int i,
  ) {
    return _getDataAuthority(
            reference.pointer, _id_getDataAuthority as jni.JMethodIDPtr, i)
        .object(const $IntentFilter_AuthorityEntryType());
  }

  static final _id_hasDataAuthority = _class.instanceMethodId(
    r'hasDataAuthority',
    r'(Landroid/net/Uri;)Z',
  );

  static final _hasDataAuthority = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasDataAuthority(android.net.Uri uri)
  bool hasDataAuthority(
    jni.JObject uri,
  ) {
    return _hasDataAuthority(reference.pointer,
            _id_hasDataAuthority as jni.JMethodIDPtr, uri.reference.pointer)
        .boolean;
  }

  static final _id_authoritiesIterator = _class.instanceMethodId(
    r'authoritiesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _authoritiesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator authoritiesIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<IntentFilter_AuthorityEntry> authoritiesIterator() {
    return _authoritiesIterator(
            reference.pointer, _id_authoritiesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType($IntentFilter_AuthorityEntryType()));
  }

  static final _id_addDataPath = _class.instanceMethodId(
    r'addDataPath',
    r'(Ljava/lang/String;I)V',
  );

  static final _addDataPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void addDataPath(java.lang.String string, int i)
  void addDataPath(
    jni.JString string,
    int i,
  ) {
    _addDataPath(reference.pointer, _id_addDataPath as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .check();
  }

  static final _id_countDataPaths = _class.instanceMethodId(
    r'countDataPaths',
    r'()I',
  );

  static final _countDataPaths = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countDataPaths()
  int countDataPaths() {
    return _countDataPaths(
            reference.pointer, _id_countDataPaths as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataPath = _class.instanceMethodId(
    r'getDataPath',
    r'(I)Landroid/os/PatternMatcher;',
  );

  static final _getDataPath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.os.PatternMatcher getDataPath(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataPath(
    int i,
  ) {
    return _getDataPath(
            reference.pointer, _id_getDataPath as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_hasDataPath = _class.instanceMethodId(
    r'hasDataPath',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasDataPath(java.lang.String string)
  bool hasDataPath(
    jni.JString string,
  ) {
    return _hasDataPath(reference.pointer, _id_hasDataPath as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_pathsIterator = _class.instanceMethodId(
    r'pathsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _pathsIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator pathsIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JObject> pathsIterator() {
    return _pathsIterator(
            reference.pointer, _id_pathsIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JObjectType()));
  }

  static final _id_matchDataAuthority = _class.instanceMethodId(
    r'matchDataAuthority',
    r'(Landroid/net/Uri;)I',
  );

  static final _matchDataAuthority = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int matchDataAuthority(android.net.Uri uri)
  int matchDataAuthority(
    jni.JObject uri,
  ) {
    return _matchDataAuthority(reference.pointer,
            _id_matchDataAuthority as jni.JMethodIDPtr, uri.reference.pointer)
        .integer;
  }

  static final _id_matchData = _class.instanceMethodId(
    r'matchData',
    r'(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)I',
  );

  static final _matchData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int matchData(java.lang.String string, java.lang.String string1, android.net.Uri uri)
  int matchData(
    jni.JString string,
    jni.JString string1,
    jni.JObject uri,
  ) {
    return _matchData(
            reference.pointer,
            _id_matchData as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            uri.reference.pointer)
        .integer;
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _addCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void addCategory(java.lang.String string)
  void addCategory(
    jni.JString string,
  ) {
    _addCategory(reference.pointer, _id_addCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_countCategories = _class.instanceMethodId(
    r'countCategories',
    r'()I',
  );

  static final _countCategories = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int countCategories()
  int countCategories() {
    return _countCategories(
            reference.pointer, _id_countCategories as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getCategory = _class.instanceMethodId(
    r'getCategory',
    r'(I)Ljava/lang/String;',
  );

  static final _getCategory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<($Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getCategory(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCategory(
    int i,
  ) {
    return _getCategory(
            reference.pointer, _id_getCategory as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasCategory(java.lang.String string)
  bool hasCategory(
    jni.JString string,
  ) {
    return _hasCategory(reference.pointer, _id_hasCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_categoriesIterator = _class.instanceMethodId(
    r'categoriesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _categoriesIterator = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Iterator categoriesIterator()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JIterator<jni.JString> categoriesIterator() {
    return _categoriesIterator(
            reference.pointer, _id_categoriesIterator as jni.JMethodIDPtr)
        .object(const jni.JIteratorType(jni.JStringType()));
  }

  static final _id_matchCategories = _class.instanceMethodId(
    r'matchCategories',
    r'(Ljava/util/Set;)Ljava/lang/String;',
  );

  static final _matchCategories = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String matchCategories(java.util.Set set)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString matchCategories(
    jni.JSet<jni.JString> set0,
  ) {
    return _matchCategories(reference.pointer,
            _id_matchCategories as jni.JMethodIDPtr, set0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_asPredicate = _class.instanceMethodId(
    r'asPredicate',
    r'()Ljava/util/function/Predicate;',
  );

  static final _asPredicate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.function.Predicate asPredicate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject asPredicate() {
    return _asPredicate(reference.pointer, _id_asPredicate as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_asPredicateWithTypeResolution = _class.instanceMethodId(
    r'asPredicateWithTypeResolution',
    r'(Landroid/content/ContentResolver;)Ljava/util/function/Predicate;',
  );

  static final _asPredicateWithTypeResolution = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject asPredicateWithTypeResolution(
    jni.JObject contentResolver,
  ) {
    return _asPredicateWithTypeResolution(
            reference.pointer,
            _id_asPredicateWithTypeResolution as jni.JMethodIDPtr,
            contentResolver.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_match = _class.instanceMethodId(
    r'match',
    r'(Landroid/content/ContentResolver;Landroid/content/Intent;ZLjava/lang/String;)I',
  );

  static final _match = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        $Int32,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int match(android.content.ContentResolver contentResolver, android.content.Intent intent, boolean z, java.lang.String string)
  int match(
    jni.JObject contentResolver,
    Intent intent,
    bool z,
    jni.JString string,
  ) {
    return _match(
            reference.pointer,
            _id_match as jni.JMethodIDPtr,
            contentResolver.reference.pointer,
            intent.reference.pointer,
            z ? 1 : 0,
            string.reference.pointer)
        .integer;
  }

  static final _id_match1 = _class.instanceMethodId(
    r'match',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/util/Set;Ljava/lang/String;)I',
  );

  static final _match1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int match(java.lang.String string, java.lang.String string1, java.lang.String string2, android.net.Uri uri, java.util.Set set, java.lang.String string3)
  int match1(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JObject uri,
    jni.JSet<jni.JString> set0,
    jni.JString string3,
  ) {
    return _match1(
            reference.pointer,
            _id_match1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            uri.reference.pointer,
            set0.reference.pointer,
            string3.reference.pointer)
        .integer;
  }

  static final _id_writeToXml = _class.instanceMethodId(
    r'writeToXml',
    r'(Lorg/xmlpull/v1/XmlSerializer;)V',
  );

  static final _writeToXml = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void writeToXml(org.xmlpull.v1.XmlSerializer xmlSerializer)
  void writeToXml(
    jni.JObject xmlSerializer,
  ) {
    _writeToXml(reference.pointer, _id_writeToXml as jni.JMethodIDPtr,
            xmlSerializer.reference.pointer)
        .check();
  }

  static final _id_readFromXml = _class.instanceMethodId(
    r'readFromXml',
    r'(Lorg/xmlpull/v1/XmlPullParser;)V',
  );

  static final _readFromXml = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromXml(org.xmlpull.v1.XmlPullParser xmlPullParser)
  void readFromXml(
    jni.JObject xmlPullParser,
  ) {
    _readFromXml(reference.pointer, _id_readFromXml as jni.JMethodIDPtr,
            xmlPullParser.reference.pointer)
        .check();
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dump = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(android.util.Printer printer, java.lang.String string)
  void dump(
    jni.JObject printer,
    jni.JString string,
  ) {
    _dump(reference.pointer, _id_dump as jni.JMethodIDPtr,
            printer.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $IntentFilterType extends jni.JObjType<IntentFilter> {
  const $IntentFilterType();

  @override
  String get signature => r'Landroid/content/IntentFilter;';

  @override
  IntentFilter fromReference(jni.JReference reference) =>
      IntentFilter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentFilterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilterType) &&
        other is $IntentFilterType;
  }
}

/// from: android.os.ParcelUuid
class ParcelUuid extends jni.JObject {
  @override
  late final jni.JObjType<ParcelUuid> $type = type;

  ParcelUuid.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r'android/os/ParcelUuid');

  /// The type which includes information such as the signature of this class.
  static const type = $ParcelUuidType();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_new0 = _class.constructorId(
    r'(Ljava/util/UUID;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.UUID uUID)
  /// The returned object must be released after use, by calling the [release] method.
  factory ParcelUuid(
    UUID uUID,
  ) {
    return ParcelUuid.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, uUID.reference.pointer)
        .reference);
  }

  static final _id_fromString = _class.staticMethodId(
    r'fromString',
    r'(Ljava/lang/String;)Landroid/os/ParcelUuid;',
  );

  static final _fromString = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.os.ParcelUuid fromString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static ParcelUuid fromString(
    jni.JString string,
  ) {
    return _fromString(_class.reference.pointer,
            _id_fromString as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $ParcelUuidType());
  }

  static final _id_getUuid = _class.instanceMethodId(
    r'getUuid',
    r'()Ljava/util/UUID;',
  );

  static final _getUuid = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.UUID getUuid()
  /// The returned object must be released after use, by calling the [release] method.
  UUID getUuid() {
    return _getUuid(reference.pointer, _id_getUuid as jni.JMethodIDPtr)
        .object(const $UUIDType());
  }

  static final _id_toString1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, $Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $ParcelUuidType extends jni.JObjType<ParcelUuid> {
  const $ParcelUuidType();

  @override
  String get signature => r'Landroid/os/ParcelUuid;';

  @override
  ParcelUuid fromReference(jni.JReference reference) =>
      ParcelUuid.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ParcelUuidType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ParcelUuidType) && other is $ParcelUuidType;
  }
}

/// from: com.lastgimbus.the.lastbluetooth.TheLastUtils$Companion
class TheLastUtils_Companion extends jni.JObject {
  @override
  late final jni.JObjType<TheLastUtils_Companion> $type = type;

  TheLastUtils_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/lastgimbus/the/lastbluetooth/TheLastUtils$Companion');

  /// The type which includes information such as the signature of this class.
  static const type = $TheLastUtils_CompanionType();
  static final _id_isBluetoothDeviceConnected = _class.instanceMethodId(
    r'isBluetoothDeviceConnected',
    r'(Landroid/bluetooth/BluetoothDevice;)Z',
  );

  static final _isBluetoothDeviceConnected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isBluetoothDeviceConnected(android.bluetooth.BluetoothDevice bluetoothDevice)
  bool isBluetoothDeviceConnected(
    BluetoothDevice bluetoothDevice,
  ) {
    return _isBluetoothDeviceConnected(
            reference.pointer,
            _id_isBluetoothDeviceConnected as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer)
        .boolean;
  }

  static final _id_bluetoothDeviceBatteryLevel = _class.instanceMethodId(
    r'bluetoothDeviceBatteryLevel',
    r'(Landroid/bluetooth/BluetoothDevice;)I',
  );

  static final _bluetoothDeviceBatteryLevel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final int bluetoothDeviceBatteryLevel(android.bluetooth.BluetoothDevice bluetoothDevice)
  int bluetoothDeviceBatteryLevel(
    BluetoothDevice bluetoothDevice,
  ) {
    return _bluetoothDeviceBatteryLevel(
            reference.pointer,
            _id_bluetoothDeviceBatteryLevel as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer)
        .integer;
  }

  static final _id_getIntentExtras = _class.instanceMethodId(
    r'getIntentExtras',
    r'(Landroid/content/Intent;)Ljava/util/Map;',
  );

  static final _getIntentExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.util.Map getIntentExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JMap<jni.JString, jni.JObject> getIntentExtras(
    Intent intent,
  ) {
    return _getIntentExtras(reference.pointer,
            _id_getIntentExtras as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JMapType(jni.JStringType(), jni.JObjectType()));
  }

  static final _id_new0 = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory TheLastUtils_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return TheLastUtils_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $TheLastUtils_CompanionType
    extends jni.JObjType<TheLastUtils_Companion> {
  const $TheLastUtils_CompanionType();

  @override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils$Companion;';

  @override
  TheLastUtils_Companion fromReference(jni.JReference reference) =>
      TheLastUtils_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TheLastUtils_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastUtils_CompanionType) &&
        other is $TheLastUtils_CompanionType;
  }
}

/// from: com.lastgimbus.the.lastbluetooth.TheLastUtils
class TheLastUtils extends jni.JObject {
  @override
  late final jni.JObjType<TheLastUtils> $type = type;

  TheLastUtils.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r'com/lastgimbus/the/lastbluetooth/TheLastUtils');

  /// The type which includes information such as the signature of this class.
  static const type = $TheLastUtilsType();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils$Companion;',
  );

  /// from: static public final com.lastgimbus.the.lastbluetooth.TheLastUtils$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static TheLastUtils_Companion get Companion =>
      _id_Companion.get(_class, const $TheLastUtils_CompanionType());

  static final _id_new0 = _class.constructorId(
    r'()V',
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory TheLastUtils() {
    return TheLastUtils.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_isBluetoothDeviceConnected = _class.staticMethodId(
    r'isBluetoothDeviceConnected',
    r'(Landroid/bluetooth/BluetoothDevice;)Z',
  );

  static final _isBluetoothDeviceConnected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final boolean isBluetoothDeviceConnected(android.bluetooth.BluetoothDevice bluetoothDevice)
  static bool isBluetoothDeviceConnected(
    BluetoothDevice bluetoothDevice,
  ) {
    return _isBluetoothDeviceConnected(
            _class.reference.pointer,
            _id_isBluetoothDeviceConnected as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer)
        .boolean;
  }

  static final _id_bluetoothDeviceBatteryLevel = _class.staticMethodId(
    r'bluetoothDeviceBatteryLevel',
    r'(Landroid/bluetooth/BluetoothDevice;)I',
  );

  static final _bluetoothDeviceBatteryLevel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final int bluetoothDeviceBatteryLevel(android.bluetooth.BluetoothDevice bluetoothDevice)
  static int bluetoothDeviceBatteryLevel(
    BluetoothDevice bluetoothDevice,
  ) {
    return _bluetoothDeviceBatteryLevel(
            _class.reference.pointer,
            _id_bluetoothDeviceBatteryLevel as jni.JMethodIDPtr,
            bluetoothDevice.reference.pointer)
        .integer;
  }

  static final _id_getIntentExtras = _class.staticMethodId(
    r'getIntentExtras',
    r'(Landroid/content/Intent;)Ljava/util/Map;',
  );

  static final _getIntentExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final java.util.Map getIntentExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JMap<jni.JString, jni.JObject> getIntentExtras(
    Intent intent,
  ) {
    return _getIntentExtras(_class.reference.pointer,
            _id_getIntentExtras as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JMapType(jni.JStringType(), jni.JObjectType()));
  }
}

final class $TheLastUtilsType extends jni.JObjType<TheLastUtils> {
  const $TheLastUtilsType();

  @override
  String get signature => r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils;';

  @override
  TheLastUtils fromReference(jni.JReference reference) =>
      TheLastUtils.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TheLastUtilsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastUtilsType) &&
        other is $TheLastUtilsType;
  }
}

/// from: com.lastgimbus.the.lastbluetooth.BroadcastReceiverInterface
class BroadcastReceiverInterface extends jni.JObject {
  @override
  late final jni.JObjType<BroadcastReceiverInterface> $type = type;

  BroadcastReceiverInterface.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface');

  /// The type which includes information such as the signature of this class.
  static const type = $BroadcastReceiverInterfaceType();
  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onReceive(android.content.Context context, android.content.Intent intent)
  void onReceive(
    Context context,
    Intent intent,
  ) {
    _onReceive(reference.pointer, _id_onReceive as jni.JMethodIDPtr,
            context.reference.pointer, intent.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $BroadcastReceiverInterfaceImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onReceive(Landroid/content/Context;Landroid/content/Intent;)V') {
        _$impls[$p]!.onReceive(
          $a[0].castTo(const $ContextType(), releaseOriginal: true),
          $a[1].castTo(const $IntentType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e);
    }
    return jni.nullptr;
  }

  factory BroadcastReceiverInterface.implement(
    $BroadcastReceiverInterfaceImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = BroadcastReceiverInterface.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r'com.lastgimbus.the.lastbluetooth.BroadcastReceiverInterface',
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $BroadcastReceiverInterfaceImpl {
  factory $BroadcastReceiverInterfaceImpl({
    required void Function(Context context, Intent intent) onReceive,
  }) = _$BroadcastReceiverInterfaceImpl;

  void onReceive(Context context, Intent intent);
}

class _$BroadcastReceiverInterfaceImpl
    implements $BroadcastReceiverInterfaceImpl {
  _$BroadcastReceiverInterfaceImpl({
    required void Function(Context context, Intent intent) onReceive,
  }) : _onReceive = onReceive;

  final void Function(Context context, Intent intent) _onReceive;

  void onReceive(Context context, Intent intent) {
    return _onReceive(context, intent);
  }
}

final class $BroadcastReceiverInterfaceType
    extends jni.JObjType<BroadcastReceiverInterface> {
  const $BroadcastReceiverInterfaceType();

  @override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface;';

  @override
  BroadcastReceiverInterface fromReference(jni.JReference reference) =>
      BroadcastReceiverInterface.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BroadcastReceiverInterfaceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiverInterfaceType) &&
        other is $BroadcastReceiverInterfaceType;
  }
}

/// from: com.lastgimbus.the.lastbluetooth.TheLastBroadcastReceiver
class TheLastBroadcastReceiver extends BroadcastReceiver {
  @override
  late final jni.JObjType<TheLastBroadcastReceiver> $type = type;

  TheLastBroadcastReceiver.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r'com/lastgimbus/the/lastbluetooth/TheLastBroadcastReceiver');

  /// The type which includes information such as the signature of this class.
  static const type = $TheLastBroadcastReceiverType();
  static final _id_new1 = _class.constructorId(
    r'(Lcom/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface;)V',
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(com.lastgimbus.the.lastbluetooth.BroadcastReceiverInterface broadcastReceiverInterface)
  /// The returned object must be released after use, by calling the [release] method.
  factory TheLastBroadcastReceiver.new1(
    BroadcastReceiverInterface broadcastReceiverInterface,
  ) {
    return TheLastBroadcastReceiver.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            broadcastReceiverInterface.reference.pointer)
        .reference);
  }

  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onReceive(android.content.Context context, android.content.Intent intent)
  void onReceive(
    Context context,
    Intent intent,
  ) {
    _onReceive(reference.pointer, _id_onReceive as jni.JMethodIDPtr,
            context.reference.pointer, intent.reference.pointer)
        .check();
  }
}

final class $TheLastBroadcastReceiverType
    extends jni.JObjType<TheLastBroadcastReceiver> {
  const $TheLastBroadcastReceiverType();

  @override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/TheLastBroadcastReceiver;';

  @override
  TheLastBroadcastReceiver fromReference(jni.JReference reference) =>
      TheLastBroadcastReceiver.fromReference(reference);

  @override
  jni.JObjType get superType => const $BroadcastReceiverType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($TheLastBroadcastReceiverType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastBroadcastReceiverType) &&
        other is $TheLastBroadcastReceiverType;
  }
}
