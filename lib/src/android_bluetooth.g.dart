// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `java.util.UUID`
class UUID extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<UUID> $type;

  @jni$_.internal
  UUID.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'java/util/UUID');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $UUID$NullableType();
  static const type = $UUID$Type();
  static final _id_new$ = _class.constructorId(
    r'(JJ)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int64, jni$_.Int64)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void <init>(long j, long j1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory UUID(
    int j,
    int j1,
  ) {
    return UUID.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, j, j1)
            .reference);
  }

  static final _id_randomUUID = _class.staticMethodId(
    r'randomUUID',
    r'()Ljava/util/UUID;',
  );

  static final _randomUUID = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public java.util.UUID randomUUID()`
  /// The returned object must be released after use, by calling the [release] method.
  static UUID? randomUUID() {
    return _randomUUID(
            _class.reference.pointer, _id_randomUUID as jni$_.JMethodIDPtr)
        .object<UUID?>(const $UUID$NullableType());
  }

  static final _id_nameUUIDFromBytes = _class.staticMethodId(
    r'nameUUIDFromBytes',
    r'([B)Ljava/util/UUID;',
  );

  static final _nameUUIDFromBytes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.util.UUID nameUUIDFromBytes(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static UUID? nameUUIDFromBytes(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _nameUUIDFromBytes(_class.reference.pointer,
            _id_nameUUIDFromBytes as jni$_.JMethodIDPtr, _$bs.pointer)
        .object<UUID?>(const $UUID$NullableType());
  }

  static final _id_fromString = _class.staticMethodId(
    r'fromString',
    r'(Ljava/lang/String;)Ljava/util/UUID;',
  );

  static final _fromString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.util.UUID fromString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static UUID? fromString(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fromString(_class.reference.pointer,
            _id_fromString as jni$_.JMethodIDPtr, _$string.pointer)
        .object<UUID?>(const $UUID$NullableType());
  }

  static final _id_getLeastSignificantBits = _class.instanceMethodId(
    r'getLeastSignificantBits',
    r'()J',
  );

  static final _getLeastSignificantBits = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long getLeastSignificantBits()`
  int getLeastSignificantBits() {
    return _getLeastSignificantBits(reference.pointer,
            _id_getLeastSignificantBits as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getMostSignificantBits = _class.instanceMethodId(
    r'getMostSignificantBits',
    r'()J',
  );

  static final _getMostSignificantBits = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long getMostSignificantBits()`
  int getMostSignificantBits() {
    return _getMostSignificantBits(
            reference.pointer, _id_getMostSignificantBits as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_version = _class.instanceMethodId(
    r'version',
    r'()I',
  );

  static final _version = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int version()`
  int version() {
    return _version(reference.pointer, _id_version as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_variant = _class.instanceMethodId(
    r'variant',
    r'()I',
  );

  static final _variant = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int variant()`
  int variant() {
    return _variant(reference.pointer, _id_variant as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_timestamp = _class.instanceMethodId(
    r'timestamp',
    r'()J',
  );

  static final _timestamp = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long timestamp()`
  int timestamp() {
    return _timestamp(reference.pointer, _id_timestamp as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_clockSequence = _class.instanceMethodId(
    r'clockSequence',
    r'()I',
  );

  static final _clockSequence = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int clockSequence()`
  int clockSequence() {
    return _clockSequence(
            reference.pointer, _id_clockSequence as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_node = _class.instanceMethodId(
    r'node',
    r'()J',
  );

  static final _node = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public long node()`
  int node() {
    return _node(reference.pointer, _id_node as jni$_.JMethodIDPtr).long;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r'compareTo',
    r'(Ljava/util/UUID;)I',
  );

  static final _compareTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int compareTo(java.util.UUID uUID)`
  int compareTo(
    UUID? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _compareTo(reference.pointer, _id_compareTo as jni$_.JMethodIDPtr,
            _$uUID.pointer)
        .integer;
  }
}

final class $UUID$NullableType extends jni$_.JObjType<UUID?> {
  @jni$_.internal
  const $UUID$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/util/UUID;';

  @jni$_.internal
  @core$_.override
  UUID? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : UUID.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<UUID?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($UUID$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UUID$NullableType) &&
        other is $UUID$NullableType;
  }
}

final class $UUID$Type extends jni$_.JObjType<UUID> {
  @jni$_.internal
  const $UUID$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/util/UUID;';

  @jni$_.internal
  @core$_.override
  UUID fromReference(jni$_.JReference reference) => UUID.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<UUID?> get nullableType => const $UUID$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($UUID$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($UUID$Type) && other is $UUID$Type;
  }
}

/// from: `java.io.InputStream`
class InputStream extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<InputStream> $type;

  @jni$_.internal
  InputStream.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'java/io/InputStream');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $InputStream$NullableType();
  static const type = $InputStream$Type();
  static final _id_nullInputStream = _class.staticMethodId(
    r'nullInputStream',
    r'()Ljava/io/InputStream;',
  );

  static final _nullInputStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public java.io.InputStream nullInputStream()`
  /// The returned object must be released after use, by calling the [release] method.
  static InputStream? nullInputStream() {
    return _nullInputStream(
            _class.reference.pointer, _id_nullInputStream as jni$_.JMethodIDPtr)
        .object<InputStream?>(const $InputStream$NullableType());
  }

  static final _id_read = _class.instanceMethodId(
    r'read',
    r'()I',
  );

  static final _read = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract int read()`
  int read() {
    return _read(reference.pointer, _id_read as jni$_.JMethodIDPtr).integer;
  }

  static final _id_read$1 = _class.instanceMethodId(
    r'read',
    r'([B)I',
  );

  static final _read$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int read(byte[] bs)`
  int read$1(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _read$1(
            reference.pointer, _id_read$1 as jni$_.JMethodIDPtr, _$bs.pointer)
        .integer;
  }

  static final _id_read$2 = _class.instanceMethodId(
    r'read',
    r'([BII)I',
  );

  static final _read$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public int read(byte[] bs, int i, int i1)`
  int read$2(
    jni$_.JByteArray? bs,
    int i,
    int i1,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _read$2(reference.pointer, _id_read$2 as jni$_.JMethodIDPtr,
            _$bs.pointer, i, i1)
        .integer;
  }

  static final _id_readAllBytes = _class.instanceMethodId(
    r'readAllBytes',
    r'()[B',
  );

  static final _readAllBytes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public byte[] readAllBytes()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? readAllBytes() {
    return _readAllBytes(
            reference.pointer, _id_readAllBytes as jni$_.JMethodIDPtr)
        .object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_readNBytes = _class.instanceMethodId(
    r'readNBytes',
    r'(I)[B',
  );

  static final _readNBytes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public byte[] readNBytes(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? readNBytes(
    int i,
  ) {
    return _readNBytes(
            reference.pointer, _id_readNBytes as jni$_.JMethodIDPtr, i)
        .object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_readNBytes$1 = _class.instanceMethodId(
    r'readNBytes',
    r'([BII)I',
  );

  static final _readNBytes$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public int readNBytes(byte[] bs, int i, int i1)`
  int readNBytes$1(
    jni$_.JByteArray? bs,
    int i,
    int i1,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _readNBytes$1(reference.pointer,
            _id_readNBytes$1 as jni$_.JMethodIDPtr, _$bs.pointer, i, i1)
        .integer;
  }

  static final _id_skip = _class.instanceMethodId(
    r'skip',
    r'(J)J',
  );

  static final _skip = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public long skip(long j)`
  int skip(
    int j,
  ) {
    return _skip(reference.pointer, _id_skip as jni$_.JMethodIDPtr, j).long;
  }

  static final _id_skipNBytes = _class.instanceMethodId(
    r'skipNBytes',
    r'(J)V',
  );

  static final _skipNBytes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void skipNBytes(long j)`
  void skipNBytes(
    int j,
  ) {
    _skipNBytes(reference.pointer, _id_skipNBytes as jni$_.JMethodIDPtr, j)
        .check();
  }

  static final _id_available = _class.instanceMethodId(
    r'available',
    r'()I',
  );

  static final _available = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int available()`
  int available() {
    return _available(reference.pointer, _id_available as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }

  static final _id_mark = _class.instanceMethodId(
    r'mark',
    r'(I)V',
  );

  static final _mark = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void mark(int i)`
  void mark(
    int i,
  ) {
    _mark(reference.pointer, _id_mark as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_reset = _class.instanceMethodId(
    r'reset',
    r'()V',
  );

  static final _reset = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void reset()`
  void reset() {
    _reset(reference.pointer, _id_reset as jni$_.JMethodIDPtr).check();
  }

  static final _id_markSupported = _class.instanceMethodId(
    r'markSupported',
    r'()Z',
  );

  static final _markSupported = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean markSupported()`
  bool markSupported() {
    return _markSupported(
            reference.pointer, _id_markSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_transferTo = _class.instanceMethodId(
    r'transferTo',
    r'(Ljava/io/OutputStream;)J',
  );

  static final _transferTo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public long transferTo(java.io.OutputStream outputStream)`
  int transferTo(
    OutputStream? outputStream,
  ) {
    final _$outputStream = outputStream?.reference ?? jni$_.jNullReference;
    return _transferTo(reference.pointer, _id_transferTo as jni$_.JMethodIDPtr,
            _$outputStream.pointer)
        .long;
  }
}

final class $InputStream$NullableType extends jni$_.JObjType<InputStream?> {
  @jni$_.internal
  const $InputStream$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/io/InputStream;';

  @jni$_.internal
  @core$_.override
  InputStream? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : InputStream.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<InputStream?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($InputStream$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($InputStream$NullableType) &&
        other is $InputStream$NullableType;
  }
}

final class $InputStream$Type extends jni$_.JObjType<InputStream> {
  @jni$_.internal
  const $InputStream$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/io/InputStream;';

  @jni$_.internal
  @core$_.override
  InputStream fromReference(jni$_.JReference reference) =>
      InputStream.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<InputStream?> get nullableType =>
      const $InputStream$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($InputStream$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($InputStream$Type) &&
        other is $InputStream$Type;
  }
}

/// from: `java.io.OutputStream`
class OutputStream extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<OutputStream> $type;

  @jni$_.internal
  OutputStream.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'java/io/OutputStream');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $OutputStream$NullableType();
  static const type = $OutputStream$Type();
  static final _id_nullOutputStream = _class.staticMethodId(
    r'nullOutputStream',
    r'()Ljava/io/OutputStream;',
  );

  static final _nullOutputStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public java.io.OutputStream nullOutputStream()`
  /// The returned object must be released after use, by calling the [release] method.
  static OutputStream? nullOutputStream() {
    return _nullOutputStream(_class.reference.pointer,
            _id_nullOutputStream as jni$_.JMethodIDPtr)
        .object<OutputStream?>(const $OutputStream$NullableType());
  }

  static final _id_write = _class.instanceMethodId(
    r'write',
    r'(I)V',
  );

  static final _write = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void write(int i)`
  void write(
    int i,
  ) {
    _write(reference.pointer, _id_write as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_write$1 = _class.instanceMethodId(
    r'write',
    r'([B)V',
  );

  static final _write$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void write(byte[] bs)`
  void write$1(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _write$1(reference.pointer, _id_write$1 as jni$_.JMethodIDPtr, _$bs.pointer)
        .check();
  }

  static final _id_write$2 = _class.instanceMethodId(
    r'write',
    r'([BII)V',
  );

  static final _write$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public void write(byte[] bs, int i, int i1)`
  void write$2(
    jni$_.JByteArray? bs,
    int i,
    int i1,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _write$2(reference.pointer, _id_write$2 as jni$_.JMethodIDPtr, _$bs.pointer,
            i, i1)
        .check();
  }

  static final _id_flush = _class.instanceMethodId(
    r'flush',
    r'()V',
  );

  static final _flush = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void flush()`
  void flush() {
    _flush(reference.pointer, _id_flush as jni$_.JMethodIDPtr).check();
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }
}

final class $OutputStream$NullableType extends jni$_.JObjType<OutputStream?> {
  @jni$_.internal
  const $OutputStream$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/io/OutputStream;';

  @jni$_.internal
  @core$_.override
  OutputStream? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : OutputStream.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OutputStream?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OutputStream$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OutputStream$NullableType) &&
        other is $OutputStream$NullableType;
  }
}

final class $OutputStream$Type extends jni$_.JObjType<OutputStream> {
  @jni$_.internal
  const $OutputStream$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Ljava/io/OutputStream;';

  @jni$_.internal
  @core$_.override
  OutputStream fromReference(jni$_.JReference reference) =>
      OutputStream.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<OutputStream?> get nullableType =>
      const $OutputStream$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($OutputStream$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($OutputStream$Type) &&
        other is $OutputStream$Type;
  }
}

/// from: `android.bluetooth.BluetoothAdapter$LeScanCallback`
class BluetoothAdapter$LeScanCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothAdapter$LeScanCallback> $type;

  @jni$_.internal
  BluetoothAdapter$LeScanCallback.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'android/bluetooth/BluetoothAdapter$LeScanCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothAdapter$LeScanCallback$NullableType();
  static const type = $BluetoothAdapter$LeScanCallback$Type();
  static final _id_onLeScan = _class.instanceMethodId(
    r'onLeScan',
    r'(Landroid/bluetooth/BluetoothDevice;I[B)V',
  );

  static final _onLeScan = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onLeScan(android.bluetooth.BluetoothDevice bluetoothDevice, int i, byte[] bs)`
  void onLeScan(
    BluetoothDevice? bluetoothDevice,
    int i,
    jni$_.JByteArray? bs,
  ) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _onLeScan(reference.pointer, _id_onLeScan as jni$_.JMethodIDPtr,
            _$bluetoothDevice.pointer, i, _$bs.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BluetoothAdapter$LeScanCallback> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onLeScan(Landroid/bluetooth/BluetoothDevice;I[B)V') {
        _$impls[$p]!.onLeScan(
          $a![0]?.as(const $BluetoothDevice$Type(), releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![2]?.as(const jni$_.JByteArrayType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BluetoothAdapter$LeScanCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.bluetooth.BluetoothAdapter$LeScanCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onLeScan$async)
          r'onLeScan(Landroid/bluetooth/BluetoothDevice;I[B)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BluetoothAdapter$LeScanCallback.implement(
    $BluetoothAdapter$LeScanCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BluetoothAdapter$LeScanCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BluetoothAdapter$LeScanCallback {
  factory $BluetoothAdapter$LeScanCallback({
    required void Function(
            BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs)
        onLeScan,
    bool onLeScan$async,
  }) = _$BluetoothAdapter$LeScanCallback;

  void onLeScan(BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs);
  bool get onLeScan$async => false;
}

final class _$BluetoothAdapter$LeScanCallback
    with $BluetoothAdapter$LeScanCallback {
  _$BluetoothAdapter$LeScanCallback({
    required void Function(
            BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs)
        onLeScan,
    this.onLeScan$async = false,
  }) : _onLeScan = onLeScan;

  final void Function(
      BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs) _onLeScan;
  final bool onLeScan$async;

  void onLeScan(BluetoothDevice? bluetoothDevice, int i, jni$_.JByteArray? bs) {
    return _onLeScan(bluetoothDevice, i, bs);
  }
}

final class $BluetoothAdapter$LeScanCallback$NullableType
    extends jni$_.JObjType<BluetoothAdapter$LeScanCallback?> {
  @jni$_.internal
  const $BluetoothAdapter$LeScanCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/bluetooth/BluetoothAdapter$LeScanCallback;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter$LeScanCallback? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothAdapter$LeScanCallback.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter$LeScanCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$LeScanCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BluetoothAdapter$LeScanCallback$NullableType) &&
        other is $BluetoothAdapter$LeScanCallback$NullableType;
  }
}

final class $BluetoothAdapter$LeScanCallback$Type
    extends jni$_.JObjType<BluetoothAdapter$LeScanCallback> {
  @jni$_.internal
  const $BluetoothAdapter$LeScanCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/bluetooth/BluetoothAdapter$LeScanCallback;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter$LeScanCallback fromReference(jni$_.JReference reference) =>
      BluetoothAdapter$LeScanCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter$LeScanCallback?> get nullableType =>
      const $BluetoothAdapter$LeScanCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$LeScanCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter$LeScanCallback$Type) &&
        other is $BluetoothAdapter$LeScanCallback$Type;
  }
}

/// from: `android.bluetooth.BluetoothAdapter`
class BluetoothAdapter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothAdapter> $type;

  @jni$_.internal
  BluetoothAdapter.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/bluetooth/BluetoothAdapter');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothAdapter$NullableType();
  static const type = $BluetoothAdapter$Type();
  static final _id_ACTION_CONNECTION_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_CONNECTION_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CONNECTION_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CONNECTION_STATE_CHANGED =>
      _id_ACTION_CONNECTION_STATE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DISCOVERY_FINISHED = _class.staticFieldId(
    r'ACTION_DISCOVERY_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DISCOVERY_FINISHED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DISCOVERY_FINISHED =>
      _id_ACTION_DISCOVERY_FINISHED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DISCOVERY_STARTED = _class.staticFieldId(
    r'ACTION_DISCOVERY_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DISCOVERY_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DISCOVERY_STARTED =>
      _id_ACTION_DISCOVERY_STARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCAL_NAME_CHANGED = _class.staticFieldId(
    r'ACTION_LOCAL_NAME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCAL_NAME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCAL_NAME_CHANGED =>
      _id_ACTION_LOCAL_NAME_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_REQUEST_DISCOVERABLE = _class.staticFieldId(
    r'ACTION_REQUEST_DISCOVERABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REQUEST_DISCOVERABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REQUEST_DISCOVERABLE =>
      _id_ACTION_REQUEST_DISCOVERABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_REQUEST_ENABLE = _class.staticFieldId(
    r'ACTION_REQUEST_ENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REQUEST_ENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REQUEST_ENABLE =>
      _id_ACTION_REQUEST_ENABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCAN_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_SCAN_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCAN_MODE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCAN_MODE_CHANGED =>
      _id_ACTION_SCAN_MODE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_STATE_CHANGED =>
      _id_ACTION_STATE_CHANGED.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int ERROR`
  static const ERROR = -2147483648;
  static final _id_EXTRA_CONNECTION_STATE = _class.staticFieldId(
    r'EXTRA_CONNECTION_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONNECTION_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONNECTION_STATE =>
      _id_EXTRA_CONNECTION_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DISCOVERABLE_DURATION = _class.staticFieldId(
    r'EXTRA_DISCOVERABLE_DURATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DISCOVERABLE_DURATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DISCOVERABLE_DURATION =>
      _id_EXTRA_DISCOVERABLE_DURATION.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCAL_NAME = _class.staticFieldId(
    r'EXTRA_LOCAL_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCAL_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCAL_NAME =>
      _id_EXTRA_LOCAL_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PREVIOUS_CONNECTION_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_CONNECTION_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_CONNECTION_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_CONNECTION_STATE =>
      _id_EXTRA_PREVIOUS_CONNECTION_STATE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PREVIOUS_SCAN_MODE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_SCAN_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_SCAN_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_SCAN_MODE =>
      _id_EXTRA_PREVIOUS_SCAN_MODE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PREVIOUS_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_STATE =>
      _id_EXTRA_PREVIOUS_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SCAN_MODE = _class.staticFieldId(
    r'EXTRA_SCAN_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SCAN_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SCAN_MODE =>
      _id_EXTRA_SCAN_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_STATE = _class.staticFieldId(
    r'EXTRA_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_STATE =>
      _id_EXTRA_STATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int SCAN_MODE_CONNECTABLE`
  static const SCAN_MODE_CONNECTABLE = 21;

  /// from: `static public final int SCAN_MODE_CONNECTABLE_DISCOVERABLE`
  static const SCAN_MODE_CONNECTABLE_DISCOVERABLE = 23;

  /// from: `static public final int SCAN_MODE_NONE`
  static const SCAN_MODE_NONE = 20;

  /// from: `static public final int STATE_CONNECTED`
  static const STATE_CONNECTED = 2;

  /// from: `static public final int STATE_CONNECTING`
  static const STATE_CONNECTING = 1;

  /// from: `static public final int STATE_DISCONNECTED`
  static const STATE_DISCONNECTED = 0;

  /// from: `static public final int STATE_DISCONNECTING`
  static const STATE_DISCONNECTING = 3;

  /// from: `static public final int STATE_OFF`
  static const STATE_OFF = 10;

  /// from: `static public final int STATE_ON`
  static const STATE_ON = 12;

  /// from: `static public final int STATE_TURNING_OFF`
  static const STATE_TURNING_OFF = 13;

  /// from: `static public final int STATE_TURNING_ON`
  static const STATE_TURNING_ON = 11;
  static final _id_getDefaultAdapter = _class.staticMethodId(
    r'getDefaultAdapter',
    r'()Landroid/bluetooth/BluetoothAdapter;',
  );

  static final _getDefaultAdapter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public android.bluetooth.BluetoothAdapter getDefaultAdapter()`
  /// The returned object must be released after use, by calling the [release] method.
  static BluetoothAdapter? getDefaultAdapter() {
    return _getDefaultAdapter(_class.reference.pointer,
            _id_getDefaultAdapter as jni$_.JMethodIDPtr)
        .object<BluetoothAdapter?>(const $BluetoothAdapter$NullableType());
  }

  static final _id_getRemoteDevice = _class.instanceMethodId(
    r'getRemoteDevice',
    r'(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteDevice(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getRemoteDevice(reference.pointer,
            _id_getRemoteDevice as jni$_.JMethodIDPtr, _$string.pointer)
        .object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getRemoteLeDevice = _class.instanceMethodId(
    r'getRemoteLeDevice',
    r'(Ljava/lang/String;I)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteLeDevice = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteLeDevice(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteLeDevice(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getRemoteLeDevice(reference.pointer,
            _id_getRemoteLeDevice as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getRemoteDevice$1 = _class.instanceMethodId(
    r'getRemoteDevice',
    r'([B)Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteDevice(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteDevice$1(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _getRemoteDevice$1(reference.pointer,
            _id_getRemoteDevice$1 as jni$_.JMethodIDPtr, _$bs.pointer)
        .object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getBluetoothLeAdvertiser = _class.instanceMethodId(
    r'getBluetoothLeAdvertiser',
    r'()Landroid/bluetooth/le/BluetoothLeAdvertiser;',
  );

  static final _getBluetoothLeAdvertiser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBluetoothLeAdvertiser() {
    return _getBluetoothLeAdvertiser(reference.pointer,
            _id_getBluetoothLeAdvertiser as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getBluetoothLeScanner = _class.instanceMethodId(
    r'getBluetoothLeScanner',
    r'()Landroid/bluetooth/le/BluetoothLeScanner;',
  );

  static final _getBluetoothLeScanner = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBluetoothLeScanner() {
    return _getBluetoothLeScanner(
            reference.pointer, _id_getBluetoothLeScanner as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isEnabled = _class.instanceMethodId(
    r'isEnabled',
    r'()Z',
  );

  static final _isEnabled = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isEnabled()`
  bool isEnabled() {
    return _isEnabled(reference.pointer, _id_isEnabled as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getState = _class.instanceMethodId(
    r'getState',
    r'()I',
  );

  static final _getState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getState()`
  int getState() {
    return _getState(reference.pointer, _id_getState as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_enable = _class.instanceMethodId(
    r'enable',
    r'()Z',
  );

  static final _enable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean enable()`
  bool enable() {
    return _enable(reference.pointer, _id_enable as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_disable = _class.instanceMethodId(
    r'disable',
    r'()Z',
  );

  static final _disable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean disable()`
  bool disable() {
    return _disable(reference.pointer, _id_disable as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getAddress = _class.instanceMethodId(
    r'getAddress',
    r'()Ljava/lang/String;',
  );

  static final _getAddress = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAddress() {
    return _getAddress(reference.pointer, _id_getAddress as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getName() {
    return _getName(reference.pointer, _id_getName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setName = _class.instanceMethodId(
    r'setName',
    r'(Ljava/lang/String;)Z',
  );

  static final _setName = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean setName(java.lang.String string)`
  bool setName(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setName(reference.pointer, _id_setName as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_getScanMode = _class.instanceMethodId(
    r'getScanMode',
    r'()I',
  );

  static final _getScanMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getScanMode()`
  int getScanMode() {
    return _getScanMode(
            reference.pointer, _id_getScanMode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getDiscoverableTimeout = _class.instanceMethodId(
    r'getDiscoverableTimeout',
    r'()Ljava/time/Duration;',
  );

  static final _getDiscoverableTimeout = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.Duration getDiscoverableTimeout()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDiscoverableTimeout() {
    return _getDiscoverableTimeout(
            reference.pointer, _id_getDiscoverableTimeout as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startDiscovery = _class.instanceMethodId(
    r'startDiscovery',
    r'()Z',
  );

  static final _startDiscovery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean startDiscovery()`
  bool startDiscovery() {
    return _startDiscovery(
            reference.pointer, _id_startDiscovery as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_cancelDiscovery = _class.instanceMethodId(
    r'cancelDiscovery',
    r'()Z',
  );

  static final _cancelDiscovery = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean cancelDiscovery()`
  bool cancelDiscovery() {
    return _cancelDiscovery(
            reference.pointer, _id_cancelDiscovery as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDiscovering = _class.instanceMethodId(
    r'isDiscovering',
    r'()Z',
  );

  static final _isDiscovering = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isDiscovering()`
  bool isDiscovering() {
    return _isDiscovering(
            reference.pointer, _id_isDiscovering as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isMultipleAdvertisementSupported = _class.instanceMethodId(
    r'isMultipleAdvertisementSupported',
    r'()Z',
  );

  static final _isMultipleAdvertisementSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isMultipleAdvertisementSupported()`
  bool isMultipleAdvertisementSupported() {
    return _isMultipleAdvertisementSupported(reference.pointer,
            _id_isMultipleAdvertisementSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOffloadedFilteringSupported = _class.instanceMethodId(
    r'isOffloadedFilteringSupported',
    r'()Z',
  );

  static final _isOffloadedFilteringSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isOffloadedFilteringSupported()`
  bool isOffloadedFilteringSupported() {
    return _isOffloadedFilteringSupported(reference.pointer,
            _id_isOffloadedFilteringSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isOffloadedScanBatchingSupported = _class.instanceMethodId(
    r'isOffloadedScanBatchingSupported',
    r'()Z',
  );

  static final _isOffloadedScanBatchingSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isOffloadedScanBatchingSupported()`
  bool isOffloadedScanBatchingSupported() {
    return _isOffloadedScanBatchingSupported(reference.pointer,
            _id_isOffloadedScanBatchingSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLe2MPhySupported = _class.instanceMethodId(
    r'isLe2MPhySupported',
    r'()Z',
  );

  static final _isLe2MPhySupported = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isLe2MPhySupported()`
  bool isLe2MPhySupported() {
    return _isLe2MPhySupported(
            reference.pointer, _id_isLe2MPhySupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLeCodedPhySupported = _class.instanceMethodId(
    r'isLeCodedPhySupported',
    r'()Z',
  );

  static final _isLeCodedPhySupported = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isLeCodedPhySupported()`
  bool isLeCodedPhySupported() {
    return _isLeCodedPhySupported(
            reference.pointer, _id_isLeCodedPhySupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLeExtendedAdvertisingSupported = _class.instanceMethodId(
    r'isLeExtendedAdvertisingSupported',
    r'()Z',
  );

  static final _isLeExtendedAdvertisingSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isLeExtendedAdvertisingSupported()`
  bool isLeExtendedAdvertisingSupported() {
    return _isLeExtendedAdvertisingSupported(reference.pointer,
            _id_isLeExtendedAdvertisingSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLePeriodicAdvertisingSupported = _class.instanceMethodId(
    r'isLePeriodicAdvertisingSupported',
    r'()Z',
  );

  static final _isLePeriodicAdvertisingSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public boolean isLePeriodicAdvertisingSupported()`
  bool isLePeriodicAdvertisingSupported() {
    return _isLePeriodicAdvertisingSupported(reference.pointer,
            _id_isLePeriodicAdvertisingSupported as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isLeAudioSupported = _class.instanceMethodId(
    r'isLeAudioSupported',
    r'()I',
  );

  static final _isLeAudioSupported = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int isLeAudioSupported()`
  int isLeAudioSupported() {
    return _isLeAudioSupported(
            reference.pointer, _id_isLeAudioSupported as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_isLeAudioBroadcastSourceSupported = _class.instanceMethodId(
    r'isLeAudioBroadcastSourceSupported',
    r'()I',
  );

  static final _isLeAudioBroadcastSourceSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int isLeAudioBroadcastSourceSupported()`
  int isLeAudioBroadcastSourceSupported() {
    return _isLeAudioBroadcastSourceSupported(reference.pointer,
            _id_isLeAudioBroadcastSourceSupported as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_isLeAudioBroadcastAssistantSupported =
      _class.instanceMethodId(
    r'isLeAudioBroadcastAssistantSupported',
    r'()I',
  );

  static final _isLeAudioBroadcastAssistantSupported =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int isLeAudioBroadcastAssistantSupported()`
  int isLeAudioBroadcastAssistantSupported() {
    return _isLeAudioBroadcastAssistantSupported(reference.pointer,
            _id_isLeAudioBroadcastAssistantSupported as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getLeMaximumAdvertisingDataLength = _class.instanceMethodId(
    r'getLeMaximumAdvertisingDataLength',
    r'()I',
  );

  static final _getLeMaximumAdvertisingDataLength =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int getLeMaximumAdvertisingDataLength()`
  int getLeMaximumAdvertisingDataLength() {
    return _getLeMaximumAdvertisingDataLength(reference.pointer,
            _id_getLeMaximumAdvertisingDataLength as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getMaxConnectedAudioDevices = _class.instanceMethodId(
    r'getMaxConnectedAudioDevices',
    r'()I',
  );

  static final _getMaxConnectedAudioDevices =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public int getMaxConnectedAudioDevices()`
  int getMaxConnectedAudioDevices() {
    return _getMaxConnectedAudioDevices(reference.pointer,
            _id_getMaxConnectedAudioDevices as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getBondedDevices = _class.instanceMethodId(
    r'getBondedDevices',
    r'()Ljava/util/Set;',
  );

  static final _getBondedDevices = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.Set getBondedDevices()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<BluetoothDevice?>? getBondedDevices() {
    return _getBondedDevices(
            reference.pointer, _id_getBondedDevices as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<BluetoothDevice?>?>(
            const jni$_.JSetNullableType<BluetoothDevice?>(
                $BluetoothDevice$NullableType()));
  }

  static final _id_getProfileConnectionState = _class.instanceMethodId(
    r'getProfileConnectionState',
    r'(I)I',
  );

  static final _getProfileConnectionState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public int getProfileConnectionState(int i)`
  int getProfileConnectionState(
    int i,
  ) {
    return _getProfileConnectionState(reference.pointer,
            _id_getProfileConnectionState as jni$_.JMethodIDPtr, i)
        .integer;
  }

  static final _id_listenUsingRfcommWithServiceRecord = _class.instanceMethodId(
    r'listenUsingRfcommWithServiceRecord',
    r'(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingRfcommWithServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String string, java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingRfcommWithServiceRecord(
    jni$_.JString? string,
    UUID? uUID,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _listenUsingRfcommWithServiceRecord(
            reference.pointer,
            _id_listenUsingRfcommWithServiceRecord as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uUID.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_listenUsingInsecureRfcommWithServiceRecord =
      _class.instanceMethodId(
    r'listenUsingInsecureRfcommWithServiceRecord',
    r'(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingInsecureRfcommWithServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String string, java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingInsecureRfcommWithServiceRecord(
    jni$_.JString? string,
    UUID? uUID,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _listenUsingInsecureRfcommWithServiceRecord(
            reference.pointer,
            _id_listenUsingInsecureRfcommWithServiceRecord
                as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uUID.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getProfileProxy = _class.instanceMethodId(
    r'getProfileProxy',
    r'(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z',
  );

  static final _getProfileProxy = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public boolean getProfileProxy(android.content.Context context, android.bluetooth.BluetoothProfile$ServiceListener serviceListener, int i)`
  bool getProfileProxy(
    Context? context,
    jni$_.JObject? serviceListener,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$serviceListener =
        serviceListener?.reference ?? jni$_.jNullReference;
    return _getProfileProxy(
            reference.pointer,
            _id_getProfileProxy as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$serviceListener.pointer,
            i)
        .boolean;
  }

  static final _id_closeProfileProxy = _class.instanceMethodId(
    r'closeProfileProxy',
    r'(ILandroid/bluetooth/BluetoothProfile;)V',
  );

  static final _closeProfileProxy = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void closeProfileProxy(int i, android.bluetooth.BluetoothProfile bluetoothProfile)`
  void closeProfileProxy(
    int i,
    jni$_.JObject? bluetoothProfile,
  ) {
    final _$bluetoothProfile =
        bluetoothProfile?.reference ?? jni$_.jNullReference;
    _closeProfileProxy(
            reference.pointer,
            _id_closeProfileProxy as jni$_.JMethodIDPtr,
            i,
            _$bluetoothProfile.pointer)
        .check();
  }

  static final _id_checkBluetoothAddress = _class.staticMethodId(
    r'checkBluetoothAddress',
    r'(Ljava/lang/String;)Z',
  );

  static final _checkBluetoothAddress = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public boolean checkBluetoothAddress(java.lang.String string)`
  static bool checkBluetoothAddress(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkBluetoothAddress(_class.reference.pointer,
            _id_checkBluetoothAddress as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_startLeScan = _class.instanceMethodId(
    r'startLeScan',
    r'(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z',
  );

  static final _startLeScan = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)`
  bool startLeScan(
    BluetoothAdapter$LeScanCallback? leScanCallback,
  ) {
    final _$leScanCallback = leScanCallback?.reference ?? jni$_.jNullReference;
    return _startLeScan(reference.pointer,
            _id_startLeScan as jni$_.JMethodIDPtr, _$leScanCallback.pointer)
        .boolean;
  }

  static final _id_startLeScan$1 = _class.instanceMethodId(
    r'startLeScan',
    r'([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z',
  );

  static final _startLeScan$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean startLeScan(java.util.UUID[] uUIDs, android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)`
  bool startLeScan$1(
    jni$_.JArray<UUID?>? uUIDs,
    BluetoothAdapter$LeScanCallback? leScanCallback,
  ) {
    final _$uUIDs = uUIDs?.reference ?? jni$_.jNullReference;
    final _$leScanCallback = leScanCallback?.reference ?? jni$_.jNullReference;
    return _startLeScan$1(
            reference.pointer,
            _id_startLeScan$1 as jni$_.JMethodIDPtr,
            _$uUIDs.pointer,
            _$leScanCallback.pointer)
        .boolean;
  }

  static final _id_stopLeScan = _class.instanceMethodId(
    r'stopLeScan',
    r'(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V',
  );

  static final _stopLeScan = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback leScanCallback)`
  void stopLeScan(
    BluetoothAdapter$LeScanCallback? leScanCallback,
  ) {
    final _$leScanCallback = leScanCallback?.reference ?? jni$_.jNullReference;
    _stopLeScan(reference.pointer, _id_stopLeScan as jni$_.JMethodIDPtr,
            _$leScanCallback.pointer)
        .check();
  }

  static final _id_listenUsingL2capChannel = _class.instanceMethodId(
    r'listenUsingL2capChannel',
    r'()Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingL2capChannel = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingL2capChannel()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingL2capChannel() {
    return _listenUsingL2capChannel(reference.pointer,
            _id_listenUsingL2capChannel as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_listenUsingInsecureL2capChannel = _class.instanceMethodId(
    r'listenUsingInsecureL2capChannel',
    r'()Landroid/bluetooth/BluetoothServerSocket;',
  );

  static final _listenUsingInsecureL2capChannel =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public android.bluetooth.BluetoothServerSocket listenUsingInsecureL2capChannel()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? listenUsingInsecureL2capChannel() {
    return _listenUsingInsecureL2capChannel(reference.pointer,
            _id_listenUsingInsecureL2capChannel as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $BluetoothAdapter$NullableType
    extends jni$_.JObjType<BluetoothAdapter?> {
  @jni$_.internal
  const $BluetoothAdapter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothAdapter;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothAdapter.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter$NullableType) &&
        other is $BluetoothAdapter$NullableType;
  }
}

final class $BluetoothAdapter$Type extends jni$_.JObjType<BluetoothAdapter> {
  @jni$_.internal
  const $BluetoothAdapter$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothAdapter;';

  @jni$_.internal
  @core$_.override
  BluetoothAdapter fromReference(jni$_.JReference reference) =>
      BluetoothAdapter.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothAdapter?> get nullableType =>
      const $BluetoothAdapter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothAdapter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothAdapter$Type) &&
        other is $BluetoothAdapter$Type;
  }
}

/// from: `android.bluetooth.BluetoothDevice`
class BluetoothDevice extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothDevice> $type;

  @jni$_.internal
  BluetoothDevice.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/bluetooth/BluetoothDevice');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothDevice$NullableType();
  static const type = $BluetoothDevice$Type();
  static final _id_ACTION_ACL_CONNECTED = _class.staticFieldId(
    r'ACTION_ACL_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ACL_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ACL_CONNECTED =>
      _id_ACTION_ACL_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ACL_DISCONNECTED = _class.staticFieldId(
    r'ACTION_ACL_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ACL_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ACL_DISCONNECTED =>
      _id_ACTION_ACL_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_ACL_DISCONNECT_REQUESTED = _class.staticFieldId(
    r'ACTION_ACL_DISCONNECT_REQUESTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ACL_DISCONNECT_REQUESTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ACL_DISCONNECT_REQUESTED =>
      _id_ACTION_ACL_DISCONNECT_REQUESTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_ALIAS_CHANGED = _class.staticFieldId(
    r'ACTION_ALIAS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ALIAS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ALIAS_CHANGED =>
      _id_ACTION_ALIAS_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BOND_STATE_CHANGED = _class.staticFieldId(
    r'ACTION_BOND_STATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BOND_STATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BOND_STATE_CHANGED =>
      _id_ACTION_BOND_STATE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_CLASS_CHANGED = _class.staticFieldId(
    r'ACTION_CLASS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CLASS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CLASS_CHANGED =>
      _id_ACTION_CLASS_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_FOUND = _class.staticFieldId(
    r'ACTION_FOUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_FOUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_FOUND =>
      _id_ACTION_FOUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_NAME_CHANGED = _class.staticFieldId(
    r'ACTION_NAME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_NAME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_NAME_CHANGED =>
      _id_ACTION_NAME_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PAIRING_REQUEST = _class.staticFieldId(
    r'ACTION_PAIRING_REQUEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PAIRING_REQUEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PAIRING_REQUEST =>
      _id_ACTION_PAIRING_REQUEST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UUID = _class.staticFieldId(
    r'ACTION_UUID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UUID =>
      _id_ACTION_UUID.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int ADDRESS_TYPE_ANONYMOUS`
  static const ADDRESS_TYPE_ANONYMOUS = 255;

  /// from: `static public final int ADDRESS_TYPE_PUBLIC`
  static const ADDRESS_TYPE_PUBLIC = 0;

  /// from: `static public final int ADDRESS_TYPE_RANDOM`
  static const ADDRESS_TYPE_RANDOM = 1;

  /// from: `static public final int ADDRESS_TYPE_UNKNOWN`
  static const ADDRESS_TYPE_UNKNOWN = 65535;

  /// from: `static public final int BOND_BONDED`
  static const BOND_BONDED = 12;

  /// from: `static public final int BOND_BONDING`
  static const BOND_BONDING = 11;

  /// from: `static public final int BOND_NONE`
  static const BOND_NONE = 10;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int DEVICE_TYPE_CLASSIC`
  static const DEVICE_TYPE_CLASSIC = 1;

  /// from: `static public final int DEVICE_TYPE_DUAL`
  static const DEVICE_TYPE_DUAL = 3;

  /// from: `static public final int DEVICE_TYPE_LE`
  static const DEVICE_TYPE_LE = 2;

  /// from: `static public final int DEVICE_TYPE_UNKNOWN`
  static const DEVICE_TYPE_UNKNOWN = 0;

  /// from: `static public final int ERROR`
  static const ERROR = -2147483648;
  static final _id_EXTRA_BOND_STATE = _class.staticFieldId(
    r'EXTRA_BOND_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BOND_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BOND_STATE =>
      _id_EXTRA_BOND_STATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CLASS = _class.staticFieldId(
    r'EXTRA_CLASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CLASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CLASS =>
      _id_EXTRA_CLASS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DEVICE = _class.staticFieldId(
    r'EXTRA_DEVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DEVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DEVICE =>
      _id_EXTRA_DEVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_IS_COORDINATED_SET_MEMBER = _class.staticFieldId(
    r'EXTRA_IS_COORDINATED_SET_MEMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_IS_COORDINATED_SET_MEMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_IS_COORDINATED_SET_MEMBER =>
      _id_EXTRA_IS_COORDINATED_SET_MEMBER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_NAME = _class.staticFieldId(
    r'EXTRA_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_NAME =>
      _id_EXTRA_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PAIRING_KEY = _class.staticFieldId(
    r'EXTRA_PAIRING_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PAIRING_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PAIRING_KEY =>
      _id_EXTRA_PAIRING_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PAIRING_VARIANT = _class.staticFieldId(
    r'EXTRA_PAIRING_VARIANT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PAIRING_VARIANT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PAIRING_VARIANT =>
      _id_EXTRA_PAIRING_VARIANT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PREVIOUS_BOND_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_BOND_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_BOND_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PREVIOUS_BOND_STATE =>
      _id_EXTRA_PREVIOUS_BOND_STATE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RSSI = _class.staticFieldId(
    r'EXTRA_RSSI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RSSI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RSSI =>
      _id_EXTRA_RSSI.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TRANSPORT = _class.staticFieldId(
    r'EXTRA_TRANSPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TRANSPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TRANSPORT =>
      _id_EXTRA_TRANSPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_UUID = _class.staticFieldId(
    r'EXTRA_UUID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_UUID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_UUID =>
      _id_EXTRA_UUID.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int PAIRING_VARIANT_PASSKEY_CONFIRMATION`
  static const PAIRING_VARIANT_PASSKEY_CONFIRMATION = 2;

  /// from: `static public final int PAIRING_VARIANT_PIN`
  static const PAIRING_VARIANT_PIN = 0;

  /// from: `static public final int PHY_LE_1M`
  static const PHY_LE_1M = 1;

  /// from: `static public final int PHY_LE_1M_MASK`
  static const PHY_LE_1M_MASK = 1;

  /// from: `static public final int PHY_LE_2M`
  static const PHY_LE_2M = 2;

  /// from: `static public final int PHY_LE_2M_MASK`
  static const PHY_LE_2M_MASK = 2;

  /// from: `static public final int PHY_LE_CODED`
  static const PHY_LE_CODED = 3;

  /// from: `static public final int PHY_LE_CODED_MASK`
  static const PHY_LE_CODED_MASK = 4;

  /// from: `static public final int PHY_OPTION_NO_PREFERRED`
  static const PHY_OPTION_NO_PREFERRED = 0;

  /// from: `static public final int PHY_OPTION_S2`
  static const PHY_OPTION_S2 = 1;

  /// from: `static public final int PHY_OPTION_S8`
  static const PHY_OPTION_S8 = 2;

  /// from: `static public final int TRANSPORT_AUTO`
  static const TRANSPORT_AUTO = 0;

  /// from: `static public final int TRANSPORT_BREDR`
  static const TRANSPORT_BREDR = 1;

  /// from: `static public final int TRANSPORT_LE`
  static const TRANSPORT_LE = 2;
  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_getAddress = _class.instanceMethodId(
    r'getAddress',
    r'()Ljava/lang/String;',
  );

  static final _getAddress = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAddress() {
    return _getAddress(reference.pointer, _id_getAddress as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAddressType = _class.instanceMethodId(
    r'getAddressType',
    r'()I',
  );

  static final _getAddressType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getAddressType()`
  int getAddressType() {
    return _getAddressType(
            reference.pointer, _id_getAddressType as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getName() {
    return _getName(reference.pointer, _id_getName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getType()`
  int getType() {
    return _getType(reference.pointer, _id_getType as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getAlias = _class.instanceMethodId(
    r'getAlias',
    r'()Ljava/lang/String;',
  );

  static final _getAlias = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAlias()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAlias() {
    return _getAlias(reference.pointer, _id_getAlias as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setAlias = _class.instanceMethodId(
    r'setAlias',
    r'(Ljava/lang/String;)I',
  );

  static final _setAlias = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int setAlias(java.lang.String string)`
  int setAlias(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAlias(reference.pointer, _id_setAlias as jni$_.JMethodIDPtr,
            _$string.pointer)
        .integer;
  }

  static final _id_createBond = _class.instanceMethodId(
    r'createBond',
    r'()Z',
  );

  static final _createBond = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean createBond()`
  bool createBond() {
    return _createBond(reference.pointer, _id_createBond as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getBondState = _class.instanceMethodId(
    r'getBondState',
    r'()I',
  );

  static final _getBondState = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getBondState()`
  int getBondState() {
    return _getBondState(
            reference.pointer, _id_getBondState as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getBluetoothClass = _class.instanceMethodId(
    r'getBluetoothClass',
    r'()Landroid/bluetooth/BluetoothClass;',
  );

  static final _getBluetoothClass = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.bluetooth.BluetoothClass getBluetoothClass()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBluetoothClass() {
    return _getBluetoothClass(
            reference.pointer, _id_getBluetoothClass as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getUuids = _class.instanceMethodId(
    r'getUuids',
    r'()[Landroid/os/ParcelUuid;',
  );

  static final _getUuids = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.ParcelUuid[] getUuids()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<ParcelUuid?>? getUuids() {
    return _getUuids(reference.pointer, _id_getUuids as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<ParcelUuid?>?>(
            const jni$_.JArrayNullableType<ParcelUuid?>(
                $ParcelUuid$NullableType()));
  }

  static final _id_fetchUuidsWithSdp = _class.instanceMethodId(
    r'fetchUuidsWithSdp',
    r'()Z',
  );

  static final _fetchUuidsWithSdp = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean fetchUuidsWithSdp()`
  bool fetchUuidsWithSdp() {
    return _fetchUuidsWithSdp(
            reference.pointer, _id_fetchUuidsWithSdp as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setPin = _class.instanceMethodId(
    r'setPin',
    r'([B)Z',
  );

  static final _setPin = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean setPin(byte[] bs)`
  bool setPin(
    jni$_.JByteArray? bs,
  ) {
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _setPin(
            reference.pointer, _id_setPin as jni$_.JMethodIDPtr, _$bs.pointer)
        .boolean;
  }

  static final _id_setPairingConfirmation = _class.instanceMethodId(
    r'setPairingConfirmation',
    r'(Z)Z',
  );

  static final _setPairingConfirmation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean setPairingConfirmation(boolean z)`
  bool setPairingConfirmation(
    bool z,
  ) {
    return _setPairingConfirmation(reference.pointer,
            _id_setPairingConfirmation as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_createRfcommSocketToServiceRecord = _class.instanceMethodId(
    r'createRfcommSocketToServiceRecord',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createRfcommSocketToServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket? createRfcommSocketToServiceRecord(
    UUID? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _createRfcommSocketToServiceRecord(
            reference.pointer,
            _id_createRfcommSocketToServiceRecord as jni$_.JMethodIDPtr,
            _$uUID.pointer)
        .object<BluetoothSocket?>(const $BluetoothSocket$NullableType());
  }

  static final _id_createInsecureRfcommSocketToServiceRecord =
      _class.instanceMethodId(
    r'createInsecureRfcommSocketToServiceRecord',
    r'(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createInsecureRfcommSocketToServiceRecord =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket? createInsecureRfcommSocketToServiceRecord(
    UUID? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return _createInsecureRfcommSocketToServiceRecord(
            reference.pointer,
            _id_createInsecureRfcommSocketToServiceRecord as jni$_.JMethodIDPtr,
            _$uUID.pointer)
        .object<BluetoothSocket?>(const $BluetoothSocket$NullableType());
  }

  static final _id_connectGatt = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? connectGatt(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    return _connectGatt(
            reference.pointer,
            _id_connectGatt as jni$_.JMethodIDPtr,
            _$context.pointer,
            z ? 1 : 0,
            _$bluetoothGattCallback.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_connectGatt$1 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? connectGatt$1(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    return _connectGatt$1(
            reference.pointer,
            _id_connectGatt$1 as jni$_.JMethodIDPtr,
            _$context.pointer,
            z ? 1 : 0,
            _$bluetoothGattCallback.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_connectGatt$2 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int)>();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? connectGatt$2(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
    int i,
    int i1,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    return _connectGatt$2(
            reference.pointer,
            _id_connectGatt$2 as jni$_.JMethodIDPtr,
            _$context.pointer,
            z ? 1 : 0,
            _$bluetoothGattCallback.pointer,
            i,
            i1)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_connectGatt$3 = _class.instanceMethodId(
    r'connectGatt',
    r'(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;IILandroid/os/Handler;)Landroid/bluetooth/BluetoothGatt;',
  );

  static final _connectGatt$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothGatt connectGatt(android.content.Context context, boolean z, android.bluetooth.BluetoothGattCallback bluetoothGattCallback, int i, int i1, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? connectGatt$3(
    Context? context,
    bool z,
    jni$_.JObject? bluetoothGattCallback,
    int i,
    int i1,
    jni$_.JObject? handler,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattCallback =
        bluetoothGattCallback?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _connectGatt$3(
            reference.pointer,
            _id_connectGatt$3 as jni$_.JMethodIDPtr,
            _$context.pointer,
            z ? 1 : 0,
            _$bluetoothGattCallback.pointer,
            i,
            i1,
            _$handler.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_createL2capChannel = _class.instanceMethodId(
    r'createL2capChannel',
    r'(I)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createL2capChannel = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.bluetooth.BluetoothSocket createL2capChannel(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket? createL2capChannel(
    int i,
  ) {
    return _createL2capChannel(
            reference.pointer, _id_createL2capChannel as jni$_.JMethodIDPtr, i)
        .object<BluetoothSocket?>(const $BluetoothSocket$NullableType());
  }

  static final _id_createInsecureL2capChannel = _class.instanceMethodId(
    r'createInsecureL2capChannel',
    r'(I)Landroid/bluetooth/BluetoothSocket;',
  );

  static final _createInsecureL2capChannel =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.bluetooth.BluetoothSocket createInsecureL2capChannel(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothSocket? createInsecureL2capChannel(
    int i,
  ) {
    return _createInsecureL2capChannel(reference.pointer,
            _id_createInsecureL2capChannel as jni$_.JMethodIDPtr, i)
        .object<BluetoothSocket?>(const $BluetoothSocket$NullableType());
  }
}

final class $BluetoothDevice$NullableType
    extends jni$_.JObjType<BluetoothDevice?> {
  @jni$_.internal
  const $BluetoothDevice$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothDevice;';

  @jni$_.internal
  @core$_.override
  BluetoothDevice? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : BluetoothDevice.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothDevice?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothDevice$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothDevice$NullableType) &&
        other is $BluetoothDevice$NullableType;
  }
}

final class $BluetoothDevice$Type extends jni$_.JObjType<BluetoothDevice> {
  @jni$_.internal
  const $BluetoothDevice$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothDevice;';

  @jni$_.internal
  @core$_.override
  BluetoothDevice fromReference(jni$_.JReference reference) =>
      BluetoothDevice.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothDevice?> get nullableType =>
      const $BluetoothDevice$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothDevice$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothDevice$Type) &&
        other is $BluetoothDevice$Type;
  }
}

/// from: `android.bluetooth.BluetoothManager`
class BluetoothManager extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothManager> $type;

  @jni$_.internal
  BluetoothManager.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/bluetooth/BluetoothManager');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothManager$NullableType();
  static const type = $BluetoothManager$Type();
  static final _id_getAdapter = _class.instanceMethodId(
    r'getAdapter',
    r'()Landroid/bluetooth/BluetoothAdapter;',
  );

  static final _getAdapter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.bluetooth.BluetoothAdapter getAdapter()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothAdapter? getAdapter() {
    return _getAdapter(reference.pointer, _id_getAdapter as jni$_.JMethodIDPtr)
        .object<BluetoothAdapter?>(const $BluetoothAdapter$NullableType());
  }

  static final _id_getConnectionState = _class.instanceMethodId(
    r'getConnectionState',
    r'(Landroid/bluetooth/BluetoothDevice;I)I',
  );

  static final _getConnectionState = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public int getConnectionState(android.bluetooth.BluetoothDevice bluetoothDevice, int i)`
  int getConnectionState(
    BluetoothDevice? bluetoothDevice,
    int i,
  ) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    return _getConnectionState(
            reference.pointer,
            _id_getConnectionState as jni$_.JMethodIDPtr,
            _$bluetoothDevice.pointer,
            i)
        .integer;
  }

  static final _id_getConnectedDevices = _class.instanceMethodId(
    r'getConnectedDevices',
    r'(I)Ljava/util/List;',
  );

  static final _getConnectedDevices = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.util.List getConnectedDevices(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getConnectedDevices(
    int i,
  ) {
    return _getConnectedDevices(
            reference.pointer, _id_getConnectedDevices as jni$_.JMethodIDPtr, i)
        .object<jni$_.JList<BluetoothDevice?>?>(
            const jni$_.JListNullableType<BluetoothDevice?>(
                $BluetoothDevice$NullableType()));
  }

  static final _id_getDevicesMatchingConnectionStates = _class.instanceMethodId(
    r'getDevicesMatchingConnectionStates',
    r'(I[I)Ljava/util/List;',
  );

  static final _getDevicesMatchingConnectionStates =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.List getDevicesMatchingConnectionStates(int i, java.lang.Object[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<BluetoothDevice?>? getDevicesMatchingConnectionStates(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _getDevicesMatchingConnectionStates(
            reference.pointer,
            _id_getDevicesMatchingConnectionStates as jni$_.JMethodIDPtr,
            i,
            _$is$.pointer)
        .object<jni$_.JList<BluetoothDevice?>?>(
            const jni$_.JListNullableType<BluetoothDevice?>(
                $BluetoothDevice$NullableType()));
  }

  static final _id_openGattServer = _class.instanceMethodId(
    r'openGattServer',
    r'(Landroid/content/Context;Landroid/bluetooth/BluetoothGattServerCallback;)Landroid/bluetooth/BluetoothGattServer;',
  );

  static final _openGattServer = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.bluetooth.BluetoothGattServer openGattServer(android.content.Context context, android.bluetooth.BluetoothGattServerCallback bluetoothGattServerCallback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openGattServer(
    Context? context,
    jni$_.JObject? bluetoothGattServerCallback,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$bluetoothGattServerCallback =
        bluetoothGattServerCallback?.reference ?? jni$_.jNullReference;
    return _openGattServer(
            reference.pointer,
            _id_openGattServer as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$bluetoothGattServerCallback.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $BluetoothManager$NullableType
    extends jni$_.JObjType<BluetoothManager?> {
  @jni$_.internal
  const $BluetoothManager$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothManager;';

  @jni$_.internal
  @core$_.override
  BluetoothManager? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BluetoothManager.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothManager?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothManager$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothManager$NullableType) &&
        other is $BluetoothManager$NullableType;
  }
}

final class $BluetoothManager$Type extends jni$_.JObjType<BluetoothManager> {
  @jni$_.internal
  const $BluetoothManager$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothManager;';

  @jni$_.internal
  @core$_.override
  BluetoothManager fromReference(jni$_.JReference reference) =>
      BluetoothManager.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothManager?> get nullableType =>
      const $BluetoothManager$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothManager$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothManager$Type) &&
        other is $BluetoothManager$Type;
  }
}

/// from: `android.bluetooth.BluetoothSocket`
class BluetoothSocket extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BluetoothSocket> $type;

  @jni$_.internal
  BluetoothSocket.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/bluetooth/BluetoothSocket');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BluetoothSocket$NullableType();
  static const type = $BluetoothSocket$Type();

  /// from: `static public final int TYPE_L2CAP`
  static const TYPE_L2CAP = 3;

  /// from: `static public final int TYPE_RFCOMM`
  static const TYPE_RFCOMM = 1;

  /// from: `static public final int TYPE_SCO`
  static const TYPE_SCO = 2;
  static final _id_getRemoteDevice = _class.instanceMethodId(
    r'getRemoteDevice',
    r'()Landroid/bluetooth/BluetoothDevice;',
  );

  static final _getRemoteDevice = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.bluetooth.BluetoothDevice getRemoteDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  BluetoothDevice? getRemoteDevice() {
    return _getRemoteDevice(
            reference.pointer, _id_getRemoteDevice as jni$_.JMethodIDPtr)
        .object<BluetoothDevice?>(const $BluetoothDevice$NullableType());
  }

  static final _id_getInputStream = _class.instanceMethodId(
    r'getInputStream',
    r'()Ljava/io/InputStream;',
  );

  static final _getInputStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.io.InputStream getInputStream()`
  /// The returned object must be released after use, by calling the [release] method.
  InputStream? getInputStream() {
    return _getInputStream(
            reference.pointer, _id_getInputStream as jni$_.JMethodIDPtr)
        .object<InputStream?>(const $InputStream$NullableType());
  }

  static final _id_getOutputStream = _class.instanceMethodId(
    r'getOutputStream',
    r'()Ljava/io/OutputStream;',
  );

  static final _getOutputStream = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.io.OutputStream getOutputStream()`
  /// The returned object must be released after use, by calling the [release] method.
  OutputStream? getOutputStream() {
    return _getOutputStream(
            reference.pointer, _id_getOutputStream as jni$_.JMethodIDPtr)
        .object<OutputStream?>(const $OutputStream$NullableType());
  }

  static final _id_isConnected = _class.instanceMethodId(
    r'isConnected',
    r'()Z',
  );

  static final _isConnected = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isConnected()`
  bool isConnected() {
    return _isConnected(
            reference.pointer, _id_isConnected as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_connect = _class.instanceMethodId(
    r'connect',
    r'()V',
  );

  static final _connect = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void connect()`
  void connect() {
    _connect(reference.pointer, _id_connect as jni$_.JMethodIDPtr).check();
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void close()`
  void close() {
    _close(reference.pointer, _id_close as jni$_.JMethodIDPtr).check();
  }

  static final _id_getMaxTransmitPacketSize = _class.instanceMethodId(
    r'getMaxTransmitPacketSize',
    r'()I',
  );

  static final _getMaxTransmitPacketSize = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getMaxTransmitPacketSize()`
  int getMaxTransmitPacketSize() {
    return _getMaxTransmitPacketSize(reference.pointer,
            _id_getMaxTransmitPacketSize as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getMaxReceivePacketSize = _class.instanceMethodId(
    r'getMaxReceivePacketSize',
    r'()I',
  );

  static final _getMaxReceivePacketSize = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getMaxReceivePacketSize()`
  int getMaxReceivePacketSize() {
    return _getMaxReceivePacketSize(reference.pointer,
            _id_getMaxReceivePacketSize as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getConnectionType = _class.instanceMethodId(
    r'getConnectionType',
    r'()I',
  );

  static final _getConnectionType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getConnectionType()`
  int getConnectionType() {
    return _getConnectionType(
            reference.pointer, _id_getConnectionType as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $BluetoothSocket$NullableType
    extends jni$_.JObjType<BluetoothSocket?> {
  @jni$_.internal
  const $BluetoothSocket$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothSocket;';

  @jni$_.internal
  @core$_.override
  BluetoothSocket? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : BluetoothSocket.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothSocket?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothSocket$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothSocket$NullableType) &&
        other is $BluetoothSocket$NullableType;
  }
}

final class $BluetoothSocket$Type extends jni$_.JObjType<BluetoothSocket> {
  @jni$_.internal
  const $BluetoothSocket$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/bluetooth/BluetoothSocket;';

  @jni$_.internal
  @core$_.override
  BluetoothSocket fromReference(jni$_.JReference reference) =>
      BluetoothSocket.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BluetoothSocket?> get nullableType =>
      const $BluetoothSocket$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BluetoothSocket$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BluetoothSocket$Type) &&
        other is $BluetoothSocket$Type;
  }
}

/// from: `android.content.BroadcastReceiver$PendingResult`
class BroadcastReceiver$PendingResult extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BroadcastReceiver$PendingResult> $type;

  @jni$_.internal
  BroadcastReceiver$PendingResult.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/BroadcastReceiver$PendingResult');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BroadcastReceiver$PendingResult$NullableType();
  static const type = $BroadcastReceiver$PendingResult$Type();
  static final _id_setResultCode = _class.instanceMethodId(
    r'setResultCode',
    r'(I)V',
  );

  static final _setResultCode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setResultCode(int i)`
  void setResultCode(
    int i,
  ) {
    _setResultCode(
            reference.pointer, _id_setResultCode as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getResultCode = _class.instanceMethodId(
    r'getResultCode',
    r'()I',
  );

  static final _getResultCode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getResultCode()`
  int getResultCode() {
    return _getResultCode(
            reference.pointer, _id_getResultCode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setResultData = _class.instanceMethodId(
    r'setResultData',
    r'(Ljava/lang/String;)V',
  );

  static final _setResultData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResultData(java.lang.String string)`
  void setResultData(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setResultData(reference.pointer, _id_setResultData as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_getResultData = _class.instanceMethodId(
    r'getResultData',
    r'()Ljava/lang/String;',
  );

  static final _getResultData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getResultData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getResultData() {
    return _getResultData(
            reference.pointer, _id_getResultData as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setResultExtras = _class.instanceMethodId(
    r'setResultExtras',
    r'(Landroid/os/Bundle;)V',
  );

  static final _setResultExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResultExtras(android.os.Bundle bundle)`
  void setResultExtras(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setResultExtras(reference.pointer,
            _id_setResultExtras as jni$_.JMethodIDPtr, _$bundle.pointer)
        .check();
  }

  static final _id_getResultExtras = _class.instanceMethodId(
    r'getResultExtras',
    r'(Z)Landroid/os/Bundle;',
  );

  static final _getResultExtras = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.os.Bundle getResultExtras(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResultExtras(
    bool z,
  ) {
    return _getResultExtras(reference.pointer,
            _id_getResultExtras as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _setResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResult(int i, java.lang.String string, android.os.Bundle bundle)`
  void setResult(
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setResult(reference.pointer, _id_setResult as jni$_.JMethodIDPtr, i,
            _$string.pointer, _$bundle.pointer)
        .check();
  }

  static final _id_getAbortBroadcast = _class.instanceMethodId(
    r'getAbortBroadcast',
    r'()Z',
  );

  static final _getAbortBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean getAbortBroadcast()`
  bool getAbortBroadcast() {
    return _getAbortBroadcast(
            reference.pointer, _id_getAbortBroadcast as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_abortBroadcast = _class.instanceMethodId(
    r'abortBroadcast',
    r'()V',
  );

  static final _abortBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void abortBroadcast()`
  void abortBroadcast() {
    _abortBroadcast(reference.pointer, _id_abortBroadcast as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_clearAbortBroadcast = _class.instanceMethodId(
    r'clearAbortBroadcast',
    r'()V',
  );

  static final _clearAbortBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void clearAbortBroadcast()`
  void clearAbortBroadcast() {
    _clearAbortBroadcast(
            reference.pointer, _id_clearAbortBroadcast as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_finish = _class.instanceMethodId(
    r'finish',
    r'()V',
  );

  static final _finish = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void finish()`
  void finish() {
    _finish(reference.pointer, _id_finish as jni$_.JMethodIDPtr).check();
  }
}

final class $BroadcastReceiver$PendingResult$NullableType
    extends jni$_.JObjType<BroadcastReceiver$PendingResult?> {
  @jni$_.internal
  const $BroadcastReceiver$PendingResult$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/BroadcastReceiver$PendingResult;';

  @jni$_.internal
  @core$_.override
  BroadcastReceiver$PendingResult? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BroadcastReceiver$PendingResult.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BroadcastReceiver$PendingResult?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BroadcastReceiver$PendingResult$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BroadcastReceiver$PendingResult$NullableType) &&
        other is $BroadcastReceiver$PendingResult$NullableType;
  }
}

final class $BroadcastReceiver$PendingResult$Type
    extends jni$_.JObjType<BroadcastReceiver$PendingResult> {
  @jni$_.internal
  const $BroadcastReceiver$PendingResult$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/BroadcastReceiver$PendingResult;';

  @jni$_.internal
  @core$_.override
  BroadcastReceiver$PendingResult fromReference(jni$_.JReference reference) =>
      BroadcastReceiver$PendingResult.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BroadcastReceiver$PendingResult?> get nullableType =>
      const $BroadcastReceiver$PendingResult$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BroadcastReceiver$PendingResult$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiver$PendingResult$Type) &&
        other is $BroadcastReceiver$PendingResult$Type;
  }
}

/// from: `android.content.BroadcastReceiver`
class BroadcastReceiver extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BroadcastReceiver> $type;

  @jni$_.internal
  BroadcastReceiver.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/BroadcastReceiver');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BroadcastReceiver$NullableType();
  static const type = $BroadcastReceiver$Type();
  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onReceive(android.content.Context context, android.content.Intent intent)`
  void onReceive(
    Context? context,
    Intent? intent,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onReceive(reference.pointer, _id_onReceive as jni$_.JMethodIDPtr,
            _$context.pointer, _$intent.pointer)
        .check();
  }

  static final _id_goAsync = _class.instanceMethodId(
    r'goAsync',
    r'()Landroid/content/BroadcastReceiver$PendingResult;',
  );

  static final _goAsync = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final android.content.BroadcastReceiver$PendingResult goAsync()`
  /// The returned object must be released after use, by calling the [release] method.
  BroadcastReceiver$PendingResult? goAsync() {
    return _goAsync(reference.pointer, _id_goAsync as jni$_.JMethodIDPtr)
        .object<BroadcastReceiver$PendingResult?>(
            const $BroadcastReceiver$PendingResult$NullableType());
  }

  static final _id_peekService = _class.instanceMethodId(
    r'peekService',
    r'(Landroid/content/Context;Landroid/content/Intent;)Landroid/os/IBinder;',
  );

  static final _peekService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.os.IBinder peekService(android.content.Context context, android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekService(
    Context? context,
    Intent? intent,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _peekService(
            reference.pointer,
            _id_peekService as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setResultCode = _class.instanceMethodId(
    r'setResultCode',
    r'(I)V',
  );

  static final _setResultCode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setResultCode(int i)`
  void setResultCode(
    int i,
  ) {
    _setResultCode(
            reference.pointer, _id_setResultCode as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getResultCode = _class.instanceMethodId(
    r'getResultCode',
    r'()I',
  );

  static final _getResultCode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getResultCode()`
  int getResultCode() {
    return _getResultCode(
            reference.pointer, _id_getResultCode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setResultData = _class.instanceMethodId(
    r'setResultData',
    r'(Ljava/lang/String;)V',
  );

  static final _setResultData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResultData(java.lang.String string)`
  void setResultData(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _setResultData(reference.pointer, _id_setResultData as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_getResultData = _class.instanceMethodId(
    r'getResultData',
    r'()Ljava/lang/String;',
  );

  static final _getResultData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getResultData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getResultData() {
    return _getResultData(
            reference.pointer, _id_getResultData as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setResultExtras = _class.instanceMethodId(
    r'setResultExtras',
    r'(Landroid/os/Bundle;)V',
  );

  static final _setResultExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResultExtras(android.os.Bundle bundle)`
  void setResultExtras(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setResultExtras(reference.pointer,
            _id_setResultExtras as jni$_.JMethodIDPtr, _$bundle.pointer)
        .check();
  }

  static final _id_getResultExtras = _class.instanceMethodId(
    r'getResultExtras',
    r'(Z)Landroid/os/Bundle;',
  );

  static final _getResultExtras = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.os.Bundle getResultExtras(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResultExtras(
    bool z,
  ) {
    return _getResultExtras(reference.pointer,
            _id_getResultExtras as jni$_.JMethodIDPtr, z ? 1 : 0)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _setResult = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setResult(int i, java.lang.String string, android.os.Bundle bundle)`
  void setResult(
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setResult(reference.pointer, _id_setResult as jni$_.JMethodIDPtr, i,
            _$string.pointer, _$bundle.pointer)
        .check();
  }

  static final _id_getAbortBroadcast = _class.instanceMethodId(
    r'getAbortBroadcast',
    r'()Z',
  );

  static final _getAbortBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean getAbortBroadcast()`
  bool getAbortBroadcast() {
    return _getAbortBroadcast(
            reference.pointer, _id_getAbortBroadcast as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_abortBroadcast = _class.instanceMethodId(
    r'abortBroadcast',
    r'()V',
  );

  static final _abortBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void abortBroadcast()`
  void abortBroadcast() {
    _abortBroadcast(reference.pointer, _id_abortBroadcast as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_clearAbortBroadcast = _class.instanceMethodId(
    r'clearAbortBroadcast',
    r'()V',
  );

  static final _clearAbortBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final void clearAbortBroadcast()`
  void clearAbortBroadcast() {
    _clearAbortBroadcast(
            reference.pointer, _id_clearAbortBroadcast as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_isOrderedBroadcast = _class.instanceMethodId(
    r'isOrderedBroadcast',
    r'()Z',
  );

  static final _isOrderedBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isOrderedBroadcast()`
  bool isOrderedBroadcast() {
    return _isOrderedBroadcast(
            reference.pointer, _id_isOrderedBroadcast as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isInitialStickyBroadcast = _class.instanceMethodId(
    r'isInitialStickyBroadcast',
    r'()Z',
  );

  static final _isInitialStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean isInitialStickyBroadcast()`
  bool isInitialStickyBroadcast() {
    return _isInitialStickyBroadcast(reference.pointer,
            _id_isInitialStickyBroadcast as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_setOrderedHint = _class.instanceMethodId(
    r'setOrderedHint',
    r'(Z)V',
  );

  static final _setOrderedHint = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setOrderedHint(boolean z)`
  void setOrderedHint(
    bool z,
  ) {
    _setOrderedHint(reference.pointer, _id_setOrderedHint as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getSentFromUid = _class.instanceMethodId(
    r'getSentFromUid',
    r'()I',
  );

  static final _getSentFromUid = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getSentFromUid()`
  int getSentFromUid() {
    return _getSentFromUid(
            reference.pointer, _id_getSentFromUid as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getSentFromPackage = _class.instanceMethodId(
    r'getSentFromPackage',
    r'()Ljava/lang/String;',
  );

  static final _getSentFromPackage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSentFromPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSentFromPackage() {
    return _getSentFromPackage(
            reference.pointer, _id_getSentFromPackage as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_setDebugUnregister = _class.instanceMethodId(
    r'setDebugUnregister',
    r'(Z)V',
  );

  static final _setDebugUnregister = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setDebugUnregister(boolean z)`
  void setDebugUnregister(
    bool z,
  ) {
    _setDebugUnregister(reference.pointer,
            _id_setDebugUnregister as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getDebugUnregister = _class.instanceMethodId(
    r'getDebugUnregister',
    r'()Z',
  );

  static final _getDebugUnregister = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean getDebugUnregister()`
  bool getDebugUnregister() {
    return _getDebugUnregister(
            reference.pointer, _id_getDebugUnregister as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $BroadcastReceiver$NullableType
    extends jni$_.JObjType<BroadcastReceiver?> {
  @jni$_.internal
  const $BroadcastReceiver$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/BroadcastReceiver;';

  @jni$_.internal
  @core$_.override
  BroadcastReceiver? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BroadcastReceiver.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BroadcastReceiver?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BroadcastReceiver$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiver$NullableType) &&
        other is $BroadcastReceiver$NullableType;
  }
}

final class $BroadcastReceiver$Type extends jni$_.JObjType<BroadcastReceiver> {
  @jni$_.internal
  const $BroadcastReceiver$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/BroadcastReceiver;';

  @jni$_.internal
  @core$_.override
  BroadcastReceiver fromReference(jni$_.JReference reference) =>
      BroadcastReceiver.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BroadcastReceiver?> get nullableType =>
      const $BroadcastReceiver$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BroadcastReceiver$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiver$Type) &&
        other is $BroadcastReceiver$Type;
  }
}

/// from: `android.content.Context$BindServiceFlags`
class Context$BindServiceFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context$BindServiceFlags> $type;

  @jni$_.internal
  Context$BindServiceFlags.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/Context$BindServiceFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$BindServiceFlags$NullableType();
  static const type = $Context$BindServiceFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public android.content.Context$BindServiceFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Context$BindServiceFlags? of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as jni$_.JMethodIDPtr, j)
        .object<Context$BindServiceFlags?>(
            const $Context$BindServiceFlags$NullableType());
  }
}

final class $Context$BindServiceFlags$NullableType
    extends jni$_.JObjType<Context$BindServiceFlags?> {
  @jni$_.internal
  const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Context$BindServiceFlags.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$NullableType) &&
        other is $Context$BindServiceFlags$NullableType;
  }
}

final class $Context$BindServiceFlags$Type
    extends jni$_.JObjType<Context$BindServiceFlags> {
  @jni$_.internal
  const $Context$BindServiceFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags fromReference(jni$_.JReference reference) =>
      Context$BindServiceFlags.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType =>
      const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$Type) &&
        other is $Context$BindServiceFlags$Type;
  }
}

/// from: `android.content.Context`
class Context extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context> $type;

  @jni$_.internal
  Context.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$NullableType();
  static const type = $Context$Type();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ALARM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPWIDGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_OPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int BIND_ABOVE_CLIENT`
  static const BIND_ABOVE_CLIENT = 8;

  /// from: `static public final int BIND_ADJUST_WITH_ACTIVITY`
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: `static public final int BIND_ALLOW_ACTIVITY_STARTS`
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: `static public final int BIND_ALLOW_OOM_MANAGEMENT`
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: `static public final int BIND_AUTO_CREATE`
  static const BIND_AUTO_CREATE = 1;

  /// from: `static public final int BIND_DEBUG_UNBIND`
  static const BIND_DEBUG_UNBIND = 2;

  /// from: `static public final int BIND_EXTERNAL_SERVICE`
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: `static public final long BIND_EXTERNAL_SERVICE_LONG`
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: `static public final int BIND_IMPORTANT`
  static const BIND_IMPORTANT = 64;

  /// from: `static public final int BIND_INCLUDE_CAPABILITIES`
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: `static public final int BIND_NOT_FOREGROUND`
  static const BIND_NOT_FOREGROUND = 4;

  /// from: `static public final int BIND_NOT_PERCEPTIBLE`
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: `static public final int BIND_PACKAGE_ISOLATED_PROCESS`
  static const BIND_PACKAGE_ISOLATED_PROCESS = 16384;

  /// from: `static public final int BIND_SHARED_ISOLATED_PROCESS`
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: `static public final int BIND_WAIVE_PRIORITY`
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIOMETRIC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLOB_STORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BUGREPORT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTIONING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CARRIER_CONFIG_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLIPBOARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONSUMER_IR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACT_KEYS_SERVICE = _class.staticFieldId(
    r'CONTACT_KEYS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACT_KEYS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACT_KEYS_SERVICE =>
      _id_CONTACT_KEYS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTEXT_IGNORE_SECURITY`
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: `static public final int CONTEXT_INCLUDE_CODE`
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: `static public final int CONTEXT_RESTRICTED`
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CREDENTIAL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_SERVICE =>
      _id_CREDENTIAL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CROSS_PROFILE_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  /// from: `static public final int DEVICE_ID_DEFAULT`
  static const DEVICE_ID_DEFAULT = 0;

  /// from: `static public final int DEVICE_ID_INVALID`
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_LOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_POLICY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_HASH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOMAIN_VERIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOWNLOAD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DROPBOX_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EUICC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FILE_INTEGRITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FINGERPRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GAME_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HARDWARE_PROPERTIES_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTHCONNECT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_METHOD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IPSEC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_SCHEDULER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYGUARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCHER_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAYOUT_INFLATER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCALE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_COMMUNICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_METRICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_PROJECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_SESSION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_APPEND`
  static const MODE_APPEND = 32768;

  /// from: `static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING`
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: `static public final int MODE_MULTI_PROCESS`
  static const MODE_MULTI_PROCESS = 4;

  /// from: `static public final int MODE_NO_LOCALIZED_COLLATORS`
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: `static public final int MODE_PRIVATE`
  static const MODE_PRIVATE = 0;

  /// from: `static public final int MODE_WORLD_READABLE`
  static const MODE_WORLD_READABLE = 1;

  /// from: `static public final int MODE_WORLD_WRITEABLE`
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NSD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OVERLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OVERLAY_SERVICE =>
      _id_OVERLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PEOPLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERFORMANCE_HINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_PERSISTENT_DATA_BLOCK_SERVICE = _class.staticFieldId(
    r'PERSISTENT_DATA_BLOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERSISTENT_DATA_BLOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERSISTENT_DATA_BLOCK_SERVICE =>
      _id_PERSISTENT_DATA_BLOCK_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POWER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PROFILING_SERVICE = _class.staticFieldId(
    r'PROFILING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROFILING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROFILING_SERVICE =>
      _id_PROFILING_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTRICTIONS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ROLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECURITY_STATE_SERVICE = _class.staticFieldId(
    r'SECURITY_STATE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECURITY_STATE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECURITY_STATE_SERVICE =>
      _id_SECURITY_STATE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_HEALTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELECOM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_IMS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_CLASSIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INTERACTIVE_APP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UI_MODE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USB_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIRTUAL_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VPN_MANAGEMENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WALLPAPER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_AWARE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_P2P_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_RTT_RANGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WINDOW_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.AssetManager getAssets()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.Resources getResources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.PackageManager getPackageManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.ContentResolver getContentResolver()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.os.Looper getMainLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.concurrent.Executor getMainExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni$_.JMethodIDPtr)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.CharSequence getText(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getString$1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String getString(int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString$1(
    int i,
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _getString$1(reference.pointer,
            _id_getString$1 as jni$_.JMethodIDPtr, i, _$objects.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final int getColor(int i)`
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni$_.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.graphics.drawable.Drawable getDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.res.ColorStateList getColorStateList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.res.Resources$Theme getTheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes(reference.pointer,
            _id_obtainStyledAttributes as jni$_.JMethodIDPtr, _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$1(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$1(
            reference.pointer,
            _id_obtainStyledAttributes$1 as jni$_.JMethodIDPtr,
            i,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$2(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$2(
            reference.pointer,
            _id_obtainStyledAttributes$2 as jni$_.JMethodIDPtr,
            _$attributeSet.pointer,
            _$is$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int)>();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$3(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
    int i,
    int i1,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$3(
            reference.pointer,
            _id_obtainStyledAttributes$3 as jni$_.JMethodIDPtr,
            _$attributeSet.pointer,
            _$is$.pointer,
            i,
            i1)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.ClassLoader getClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getOpPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAttributionTag()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.AttributionSource getAttributionSource()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ContextParams getParams()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParams() {
    return _getParams(reference.pointer, _id_getParams as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageResourcePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getPackageCodePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSharedPreferences(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSharedPreferences(reference.pointer,
            _id_getSharedPreferences as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)`
  bool moveSharedPreferencesFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteSharedPreferences(java.lang.String string)`
  bool deleteSharedPreferences(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteSharedPreferences(reference.pointer,
            _id_deleteSharedPreferences as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.FileInputStream openFileInput(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileInput(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileOutput(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteFile(java.lang.String string)`
  bool deleteFile(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteFile(reference.pointer, _id_deleteFile as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getFileStreamPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFileStreamPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getDataDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilesDir() {
    return _getFilesDir(
            reference.pointer, _id_getFilesDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getNoBackupFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getExternalFilesDir(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalFilesDir(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDir(reference.pointer,
            _id_getExternalFilesDir as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalFilesDirs(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDirs(reference.pointer,
            _id_getExternalFilesDirs as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getObbDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getObbDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCacheDir() {
    return _getCacheDir(
            reference.pointer, _id_getCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getCodeCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File getExternalCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getExternalCacheDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.io.File[] getExternalMediaDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] fileList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? fileList() {
    return _fileList(reference.pointer, _id_fileList as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract java.io.File getDir(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDir(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDir(reference.pointer, _id_getDir as jni$_.JMethodIDPtr,
            _$string.pointer, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            _$cursorFactory.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase$1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase$1(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
    jni$_.JObject? databaseErrorHandler,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    final _$databaseErrorHandler =
        databaseErrorHandler?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase$1(
            reference.pointer,
            _id_openOrCreateDatabase$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            _$cursorFactory.pointer,
            _$databaseErrorHandler.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)`
  bool moveDatabaseFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean deleteDatabase(java.lang.String string)`
  bool deleteDatabase(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.io.File getDatabasePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDatabasePath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String[] databaseList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni$_.JMethodIDPtr)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable getWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable peekWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract int getWallpaperDesiredMinimumWidth()`
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract int getWallpaperDesiredMinimumHeight()`
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setWallpaper(android.graphics.Bitmap bitmap)`
  void setWallpaper(
    jni$_.JObject? bitmap,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    _setWallpaper(reference.pointer, _id_setWallpaper as jni$_.JMethodIDPtr,
            _$bitmap.pointer)
        .check();
  }

  static final _id_setWallpaper$1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void setWallpaper(java.io.InputStream inputStream)`
  void setWallpaper$1(
    InputStream? inputStream,
  ) {
    final _$inputStream = inputStream?.reference ?? jni$_.jNullReference;
    _setWallpaper$1(reference.pointer, _id_setWallpaper$1 as jni$_.JMethodIDPtr,
            _$inputStream.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void clearWallpaper()`
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivity(android.content.Intent intent)`
  void startActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
            reference.pointer,
            _id_startActivity$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<Intent?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer,
            _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer)
        .check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<Intent?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
            reference.pointer,
            _id_startActivities$1 as jni$_.JMethodIDPtr,
            _$intents.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
            reference.pointer,
            _id_startIntentSender$1 as jni$_.JMethodIDPtr,
            _$intentSender.pointer,
            _$intent.pointer,
            i,
            i1,
            i2,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent)`
  void sendBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_sendBroadcast$1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendBroadcast$1(
    Intent? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcast$1(
            reference.pointer,
            _id_sendBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)`
  void sendBroadcastWithMultiplePermissions(
    Intent? intent,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$strings.pointer)
        .check();
  }

  static final _id_sendBroadcast$2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendBroadcast$2(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendBroadcast$2(
            reference.pointer,
            _id_sendBroadcast$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendOrderedBroadcast(
    Intent? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendOrderedBroadcast$1(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$1(
            reference.pointer,
            _id_sendOrderedBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcast$2(
    Intent? intent,
    jni$_.JString? string,
    BroadcastReceiver? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$2(
            reference.pointer,
            _id_sendOrderedBroadcast$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)`
  void sendOrderedBroadcast$3(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
    BroadcastReceiver? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle1 = bundle1?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$3(
            reference.pointer,
            _id_sendOrderedBroadcast$3 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$bundle.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle1.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser$1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)`
  void sendBroadcastAsUser$1(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser$1(
            reference.pointer,
            _id_sendBroadcastAsUser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
    BroadcastReceiver? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$string.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string1.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast$4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)`
  void sendOrderedBroadcast$4(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JString? string1,
    BroadcastReceiver? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string2,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$4(
            reference.pointer,
            _id_sendOrderedBroadcast$4 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$string.pointer,
            _$string1.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string2.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyBroadcast(android.content.Intent intent)`
  void sendStickyBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast(reference.pointer,
            _id_sendStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast$1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)`
  void sendStickyBroadcast$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast$1(
            reference.pointer,
            _id_sendStickyBroadcast$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcast(
    Intent? intent,
    BroadcastReceiver? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void removeStickyBroadcast(android.content.Intent intent)`
  void removeStickyBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcast(reference.pointer,
            _id_removeStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendStickyBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
    BroadcastReceiver? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer,
            _$broadcastReceiver.pointer,
            _$handler.pointer,
            i,
            _$string.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void removeStickyBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$userHandle.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver(
    BroadcastReceiver? broadcastReceiver,
    IntentFilter? intentFilter,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$1(
    BroadcastReceiver? broadcastReceiver,
    IntentFilter? intentFilter,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver$1(
            reference.pointer,
            _id_registerReceiver$1 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$2(
    BroadcastReceiver? broadcastReceiver,
    IntentFilter? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$2(
            reference.pointer,
            _id_registerReceiver$2 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            _$string.pointer,
            _$handler.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$3(
    BroadcastReceiver? broadcastReceiver,
    IntentFilter? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
    int i,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$3(
            reference.pointer,
            _id_registerReceiver$3 as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer,
            _$intentFilter.pointer,
            _$string.pointer,
            _$handler.pointer,
            i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)`
  void unregisterReceiver(
    BroadcastReceiver? broadcastReceiver,
  ) {
    final _$broadcastReceiver =
        broadcastReceiver?.reference ?? jni$_.jNullReference;
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni$_.JMethodIDPtr,
            _$broadcastReceiver.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.ComponentName startService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startService(reference.pointer,
            _id_startService as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startForegroundService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startForegroundService(reference.pointer,
            _id_startForegroundService as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean stopService(android.content.Intent intent)`
  bool stopService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _stopService(reference.pointer,
            _id_stopService as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)`
  bool bindService(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService(
            reference.pointer,
            _id_bindService as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            i)
        .boolean;
  }

  static final _id_bindService$1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)`
  bool bindService$1(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    return _bindService$1(
            reference.pointer,
            _id_bindService$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            _$bindServiceFlags.pointer)
        .boolean;
  }

  static final _id_bindService$2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$2(
    Intent? intent,
    int i,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$2(
            reference.pointer,
            _id_bindService$2 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindService$3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$3(
    Intent? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$3(
            reference.pointer,
            _id_bindService$3 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bindServiceFlags.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService(
    Intent? intent,
    int i,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni$_.JMethodIDPtr,
            _$intent.pointer,
            i,
            _$string.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService$1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService$1(
    Intent? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService$1(
            reference.pointer,
            _id_bindIsolatedService$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$bindServiceFlags.pointer,
            _$string.pointer,
            _$executor.pointer,
            _$serviceConnection.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)`
  bool bindServiceAsUser(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    int i,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            i,
            _$userHandle.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser$1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)`
  bool bindServiceAsUser$1(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags =
        bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser$1(
            reference.pointer,
            _id_bindServiceAsUser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$serviceConnection.pointer,
            _$bindServiceFlags.pointer,
            _$userHandle.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)`
  void updateServiceGroup(
    jni$_.JObject? serviceConnection,
    int i,
    int i1,
  ) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni$_.JMethodIDPtr,
            _$serviceConnection.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void unbindService(android.content.ServiceConnection serviceConnection)`
  void unbindService(
    jni$_.JObject? serviceConnection,
  ) {
    final _$serviceConnection =
        serviceConnection?.reference ?? jni$_.jNullReference;
    _unbindService(reference.pointer, _id_unbindService as jni$_.JMethodIDPtr,
            _$serviceConnection.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)`
  bool startInstrumentation(
    jni$_.JObject? componentName,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni$_.JMethodIDPtr,
            _$componentName.pointer,
            _$string.pointer,
            _$bundle.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemService$1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final T getSystemService(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSystemService$1<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemService$1(reference.pointer,
            _id_getSystemService$1 as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String getSystemServiceName(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSystemServiceName(
    jni$_.JObject? class$,
  ) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemServiceName(reference.pointer,
            _id_getSystemServiceName as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)>();

  /// from: `public abstract int checkPermission(java.lang.String string, int i, int i1)`
  int checkPermission(
    jni$_.JString? string,
    int i,
    int i1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkPermission(reference.pointer,
            _id_checkPermission as jni$_.JMethodIDPtr, _$string.pointer, i, i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkCallingPermission(java.lang.String string)`
  int checkCallingPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingPermission(reference.pointer,
            _id_checkCallingPermission as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkCallingOrSelfPermission(java.lang.String string)`
  int checkCallingOrSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni$_.JMethodIDPtr,
            _$string.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract int checkSelfPermission(java.lang.String string)`
  int checkSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkSelfPermission(reference.pointer,
            _id_checkSelfPermission as jni$_.JMethodIDPtr, _$string.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)`
  void enforcePermission(
    jni$_.JString? string,
    int i,
    int i1,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            i,
            i1,
            _$string1.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingOrSelfPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void grantUriPermission(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract void revokeUriPermission(android.net.Uri uri, int i)`
  void revokeUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission(reference.pointer,
            _id_revokeUriPermission as jni$_.JMethodIDPtr, _$uri.pointer, i)
        .check();
  }

  static final _id_revokeUriPermission$1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void revokeUriPermission$1(
    jni$_.JString? string,
    jni$_.JObject? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission$1(
            reference.pointer,
            _id_revokeUriPermission$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)`
  int checkUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkContentUriPermissionFull = _class.instanceMethodId(
    r'checkContentUriPermissionFull',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkContentUriPermissionFull =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Int32,
                            jni$_.Int32
                          )>)>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  int,
                  int)>();

  /// from: `public int checkContentUriPermissionFull(android.net.Uri uri, int i, int i1, int i2)`
  int checkContentUriPermissionFull(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkContentUriPermissionFull(
            reference.pointer,
            _id_checkContentUriPermissionFull as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int, int)>();

  /// from: `public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
    int i1,
    int i2,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i,
            i1,
            i2)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract int checkCallingUriPermission(android.net.Uri uri, int i)`
  int checkCallingUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)`
  int checkCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingOrSelfUriPermissions(
    jni$_.JList<jni$_.JObject?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni$_.JMethodIDPtr,
            _$list.pointer,
            i)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkUriPermission$1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int)>();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)`
  int checkUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _checkUriPermission$1(
            reference.pointer,
            _id_checkUriPermission$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)`
  void enforceUriPermission(
    jni$_.JObject? uri,
    int i,
    int i1,
    int i2,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            i1,
            i2,
            _$string.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            _$string.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Int32,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  int,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingOrSelfUriPermission(
    jni$_.JObject? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
            _$uri.pointer,
            i,
            _$string.pointer)
        .check();
  }

  static final _id_enforceUriPermission$1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)`
  void enforceUriPermission$1(
    jni$_.JObject? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _enforceUriPermission$1(
            reference.pointer,
            _id_enforceUriPermission$1 as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer,
            _$string1.pointer,
            i,
            i1,
            i2,
            _$string2.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void revokeSelfPermissionOnKill(java.lang.String string)`
  void revokeSelfPermissionOnKill(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void revokeSelfPermissionsOnKill(java.util.Collection collection)`
  void revokeSelfPermissionsOnKill(
    jni$_.JObject? collection,
  ) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni$_.JMethodIDPtr,
            _$collection.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public abstract android.content.Context createPackageContext(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createPackageContext(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createPackageContext(reference.pointer,
            _id_createPackageContext as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createContextForSplit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContextForSplit(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createContextForSplit(reference.pointer,
            _id_createContextForSplit as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createConfigurationContext(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni$_.JMethodIDPtr,
            _$configuration.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract android.content.Context createDisplayContext(android.view.Display display)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDisplayContext(
    jni$_.JObject? display,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    return _createDisplayContext(reference.pointer,
            _id_createDisplayContext as jni$_.JMethodIDPtr, _$display.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Context createDeviceContext(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
            reference.pointer, _id_createDeviceContext as jni$_.JMethodIDPtr, i)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createWindowContext(int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext(reference.pointer,
            _id_createWindowContext as jni$_.JMethodIDPtr, i, _$bundle.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext$1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext$1(
    jni$_.JObject? display,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext$1(
            reference.pointer,
            _id_createWindowContext$1 as jni$_.JMethodIDPtr,
            _$display.pointer,
            i,
            _$bundle.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createContext(android.content.ContextParams contextParams)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContext(
    jni$_.JObject? contextParams,
  ) {
    final _$contextParams = contextParams?.reference ?? jni$_.jNullReference;
    return _createContext(reference.pointer,
            _id_createContext as jni$_.JMethodIDPtr, _$contextParams.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Context createAttributionContext(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createAttributionContext(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public abstract android.content.Context createDeviceProtectedStorageContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni$_.JMethodIDPtr)
        .object<Context?>(const $Context$NullableType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.view.Display getDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getDeviceId()`
  int getDeviceId() {
    return _getDeviceId(
            reference.pointer, _id_getDeviceId as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)`
  void registerDeviceIdChangeListener(
    jni$_.JObject? executor,
    jni$_.JObject? intConsumer,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _registerDeviceIdChangeListener(
            reference.pointer,
            _id_registerDeviceIdChangeListener as jni$_.JMethodIDPtr,
            _$executor.pointer,
            _$intConsumer.pointer)
        .check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)`
  void unregisterDeviceIdChangeListener(
    jni$_.JObject? intConsumer,
  ) {
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _unregisterDeviceIdChangeListener(
            reference.pointer,
            _id_unregisterDeviceIdChangeListener as jni$_.JMethodIDPtr,
            _$intConsumer.pointer)
        .check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isDeviceProtectedStorage()`
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(reference.pointer,
            _id_isDeviceProtectedStorage as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isUiContext()`
  bool isUiContext() {
    return _isUiContext(
            reference.pointer, _id_isUiContext as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $Context$NullableType extends jni$_.JObjType<Context?> {
  @jni$_.internal
  const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$NullableType) &&
        other is $Context$NullableType;
  }
}

final class $Context$Type extends jni$_.JObjType<Context> {
  @jni$_.internal
  const $Context$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context fromReference(jni$_.JReference reference) => Context.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$Type) && other is $Context$Type;
  }
}

/// from: `android.content.Intent$FilterComparison`
class Intent$FilterComparison extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent$FilterComparison> $type;

  @jni$_.internal
  Intent$FilterComparison.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/Intent$FilterComparison');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$FilterComparison$NullableType();
  static const type = $Intent$FilterComparison$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent$FilterComparison(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return Intent$FilterComparison.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$intent.pointer)
        .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $Intent$FilterComparison$NullableType
    extends jni$_.JObjType<Intent$FilterComparison?> {
  @jni$_.internal
  const $Intent$FilterComparison$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @jni$_.internal
  @core$_.override
  Intent$FilterComparison? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Intent$FilterComparison.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$FilterComparison?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$FilterComparison$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$FilterComparison$NullableType) &&
        other is $Intent$FilterComparison$NullableType;
  }
}

final class $Intent$FilterComparison$Type
    extends jni$_.JObjType<Intent$FilterComparison> {
  @jni$_.internal
  const $Intent$FilterComparison$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @jni$_.internal
  @core$_.override
  Intent$FilterComparison fromReference(jni$_.JReference reference) =>
      Intent$FilterComparison.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$FilterComparison?> get nullableType =>
      const $Intent$FilterComparison$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$FilterComparison$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$FilterComparison$Type) &&
        other is $Intent$FilterComparison$Type;
  }
}

/// from: `android.content.Intent$ShortcutIconResource`
class Intent$ShortcutIconResource extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent$ShortcutIconResource> $type;

  @jni$_.internal
  Intent$ShortcutIconResource.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/Intent$ShortcutIconResource');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$ShortcutIconResource$NullableType();
  static const type = $Intent$ShortcutIconResource$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_packageName = _class.instanceFieldId(
    r'packageName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String packageName`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get packageName =>
      _id_packageName.get(this, const jni$_.JStringNullableType());

  /// from: `public java.lang.String packageName`
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni$_.JString? value) =>
      _id_packageName.set(this, const jni$_.JStringNullableType(), value);

  static final _id_resourceName = _class.instanceFieldId(
    r'resourceName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String resourceName`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get resourceName =>
      _id_resourceName.get(this, const jni$_.JStringNullableType());

  /// from: `public java.lang.String resourceName`
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni$_.JString? value) =>
      _id_resourceName.set(this, const jni$_.JStringNullableType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent$ShortcutIconResource() {
    return Intent$ShortcutIconResource.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_fromContext = _class.staticMethodId(
    r'fromContext',
    r'(Landroid/content/Context;I)Landroid/content/Intent$ShortcutIconResource;',
  );

  static final _fromContext = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent$ShortcutIconResource? fromContext(
    Context? context,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _fromContext(_class.reference.pointer,
            _id_fromContext as jni$_.JMethodIDPtr, _$context.pointer, i)
        .object<Intent$ShortcutIconResource?>(
            const $Intent$ShortcutIconResource$NullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Intent$ShortcutIconResource$NullableType
    extends jni$_.JObjType<Intent$ShortcutIconResource?> {
  @jni$_.internal
  const $Intent$ShortcutIconResource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @jni$_.internal
  @core$_.override
  Intent$ShortcutIconResource? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Intent$ShortcutIconResource.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$ShortcutIconResource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$ShortcutIconResource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$ShortcutIconResource$NullableType) &&
        other is $Intent$ShortcutIconResource$NullableType;
  }
}

final class $Intent$ShortcutIconResource$Type
    extends jni$_.JObjType<Intent$ShortcutIconResource> {
  @jni$_.internal
  const $Intent$ShortcutIconResource$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @jni$_.internal
  @core$_.override
  Intent$ShortcutIconResource fromReference(jni$_.JReference reference) =>
      Intent$ShortcutIconResource.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$ShortcutIconResource?> get nullableType =>
      const $Intent$ShortcutIconResource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$ShortcutIconResource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$ShortcutIconResource$Type) &&
        other is $Intent$ShortcutIconResource$Type;
  }
}

/// from: `android.content.Intent`
class Intent extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent> $type;

  @jni$_.internal
  Intent.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Intent');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$NullableType();
  static const type = $Intent$Type();
  static final _id_ACTION_AIRPLANE_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_AIRPLANE_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_AIRPLANE_MODE_CHANGED =>
      _id_ACTION_AIRPLANE_MODE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_ALL_APPS = _class.staticFieldId(
    r'ACTION_ALL_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ALL_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ALL_APPS =>
      _id_ACTION_ALL_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ANSWER = _class.staticFieldId(
    r'ACTION_ANSWER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ANSWER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ANSWER =>
      _id_ACTION_ANSWER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_APPLICATION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_LOCALE_CHANGED =>
      _id_ACTION_APPLICATION_LOCALE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_PREFERENCES = _class.staticFieldId(
    r'ACTION_APPLICATION_PREFERENCES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_PREFERENCES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_PREFERENCES =>
      _id_ACTION_APPLICATION_PREFERENCES.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED =
      _class.staticFieldId(
    r'ACTION_APPLICATION_RESTRICTIONS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_RESTRICTIONS_CHANGED =>
      _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_APP_ERROR = _class.staticFieldId(
    r'ACTION_APP_ERROR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APP_ERROR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APP_ERROR =>
      _id_ACTION_APP_ERROR.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ASSIST = _class.staticFieldId(
    r'ACTION_ASSIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ASSIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ASSIST =>
      _id_ACTION_ASSIST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ATTACH_DATA = _class.staticFieldId(
    r'ACTION_ATTACH_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ATTACH_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ATTACH_DATA =>
      _id_ACTION_ATTACH_DATA.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_AUTO_REVOKE_PERMISSIONS = _class.staticFieldId(
    r'ACTION_AUTO_REVOKE_PERMISSIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_AUTO_REVOKE_PERMISSIONS =>
      _id_ACTION_AUTO_REVOKE_PERMISSIONS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_CHANGED = _class.staticFieldId(
    r'ACTION_BATTERY_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_CHANGED =>
      _id_ACTION_BATTERY_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_LOW = _class.staticFieldId(
    r'ACTION_BATTERY_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_LOW =>
      _id_ACTION_BATTERY_LOW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_OKAY = _class.staticFieldId(
    r'ACTION_BATTERY_OKAY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_OKAY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_OKAY =>
      _id_ACTION_BATTERY_OKAY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BOOT_COMPLETED =>
      _id_ACTION_BOOT_COMPLETED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BUG_REPORT = _class.staticFieldId(
    r'ACTION_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BUG_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BUG_REPORT =>
      _id_ACTION_BUG_REPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CALL = _class.staticFieldId(
    r'ACTION_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CALL =>
      _id_ACTION_CALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CALL_BUTTON = _class.staticFieldId(
    r'ACTION_CALL_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CALL_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CALL_BUTTON =>
      _id_ACTION_CALL_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CAMERA_BUTTON = _class.staticFieldId(
    r'ACTION_CAMERA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CAMERA_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CAMERA_BUTTON =>
      _id_ACTION_CAMERA_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CARRIER_SETUP = _class.staticFieldId(
    r'ACTION_CARRIER_SETUP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CARRIER_SETUP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CARRIER_SETUP =>
      _id_ACTION_CARRIER_SETUP.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CHOOSER = _class.staticFieldId(
    r'ACTION_CHOOSER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CHOOSER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CHOOSER =>
      _id_ACTION_CHOOSER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CLOSE_SYSTEM_DIALOGS = _class.staticFieldId(
    r'ACTION_CLOSE_SYSTEM_DIALOGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CLOSE_SYSTEM_DIALOGS =>
      _id_ACTION_CLOSE_SYSTEM_DIALOGS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_CONFIGURATION_CHANGED = _class.staticFieldId(
    r'ACTION_CONFIGURATION_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CONFIGURATION_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CONFIGURATION_CHANGED =>
      _id_ACTION_CONFIGURATION_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_DOCUMENT = _class.staticFieldId(
    r'ACTION_CREATE_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_DOCUMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_DOCUMENT =>
      _id_ACTION_CREATE_DOCUMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_NOTE = _class.staticFieldId(
    r'ACTION_CREATE_NOTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_NOTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_NOTE =>
      _id_ACTION_CREATE_NOTE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_REMINDER = _class.staticFieldId(
    r'ACTION_CREATE_REMINDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_REMINDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_REMINDER =>
      _id_ACTION_CREATE_REMINDER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_SHORTCUT = _class.staticFieldId(
    r'ACTION_CREATE_SHORTCUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_SHORTCUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_SHORTCUT =>
      _id_ACTION_CREATE_SHORTCUT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DATE_CHANGED = _class.staticFieldId(
    r'ACTION_DATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DATE_CHANGED =>
      _id_ACTION_DATE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEFAULT = _class.staticFieldId(
    r'ACTION_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEFAULT =>
      _id_ACTION_DEFAULT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEFINE = _class.staticFieldId(
    r'ACTION_DEFINE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEFINE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEFINE =>
      _id_ACTION_DEFINE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DELETE = _class.staticFieldId(
    r'ACTION_DELETE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DELETE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DELETE =>
      _id_ACTION_DELETE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEVICE_STORAGE_LOW = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEVICE_STORAGE_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEVICE_STORAGE_LOW =>
      _id_ACTION_DEVICE_STORAGE_LOW.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEVICE_STORAGE_OK = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_OK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEVICE_STORAGE_OK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEVICE_STORAGE_OK =>
      _id_ACTION_DEVICE_STORAGE_OK.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DIAL = _class.staticFieldId(
    r'ACTION_DIAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DIAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DIAL =>
      _id_ACTION_DIAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DOCK_EVENT = _class.staticFieldId(
    r'ACTION_DOCK_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DOCK_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DOCK_EVENT =>
      _id_ACTION_DOCK_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DREAMING_STARTED = _class.staticFieldId(
    r'ACTION_DREAMING_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DREAMING_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DREAMING_STARTED =>
      _id_ACTION_DREAMING_STARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_DREAMING_STOPPED = _class.staticFieldId(
    r'ACTION_DREAMING_STOPPED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DREAMING_STOPPED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DREAMING_STOPPED =>
      _id_ACTION_DREAMING_STOPPED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_EDIT = _class.staticFieldId(
    r'ACTION_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EDIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EDIT =>
      _id_ACTION_EDIT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =
      _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =
      _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_FACTORY_TEST = _class.staticFieldId(
    r'ACTION_FACTORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_FACTORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_FACTORY_TEST =>
      _id_ACTION_FACTORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GET_CONTENT = _class.staticFieldId(
    r'ACTION_GET_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GET_CONTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GET_CONTENT =>
      _id_ACTION_GET_CONTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GET_RESTRICTION_ENTRIES = _class.staticFieldId(
    r'ACTION_GET_RESTRICTION_ENTRIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GET_RESTRICTION_ENTRIES =>
      _id_ACTION_GET_RESTRICTION_ENTRIES.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_GTALK_SERVICE_CONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GTALK_SERVICE_CONNECTED =>
      _id_ACTION_GTALK_SERVICE_CONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_GTALK_SERVICE_DISCONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GTALK_SERVICE_DISCONNECTED =>
      _id_ACTION_GTALK_SERVICE_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_HEADSET_PLUG = _class.staticFieldId(
    r'ACTION_HEADSET_PLUG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_HEADSET_PLUG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_HEADSET_PLUG =>
      _id_ACTION_HEADSET_PLUG.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INPUT_METHOD_CHANGED = _class.staticFieldId(
    r'ACTION_INPUT_METHOD_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INPUT_METHOD_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INPUT_METHOD_CHANGED =>
      _id_ACTION_INPUT_METHOD_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSERT = _class.staticFieldId(
    r'ACTION_INSERT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSERT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSERT =>
      _id_ACTION_INSERT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSERT_OR_EDIT = _class.staticFieldId(
    r'ACTION_INSERT_OR_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSERT_OR_EDIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSERT_OR_EDIT =>
      _id_ACTION_INSERT_OR_EDIT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSTALL_FAILURE = _class.staticFieldId(
    r'ACTION_INSTALL_FAILURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSTALL_FAILURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSTALL_FAILURE =>
      _id_ACTION_INSTALL_FAILURE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_INSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSTALL_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSTALL_PACKAGE =>
      _id_ACTION_INSTALL_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =
      _class.staticFieldId(
    r'ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =>
      _id_ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCALE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCALE_CHANGED =>
      _id_ACTION_LOCALE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCKED_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_LOCKED_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCKED_BOOT_COMPLETED =>
      _id_ACTION_LOCKED_BOOT_COMPLETED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MAIN = _class.staticFieldId(
    r'ACTION_MAIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MAIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MAIN =>
      _id_ACTION_MAIN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_ADDED =>
      _id_ACTION_MANAGED_PROFILE_ADDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_AVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_AVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_AVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_REMOVED =>
      _id_ACTION_MANAGED_PROFILE_REMOVED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_UNAVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_UNAVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_UNLOCKED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_UNLOCKED =>
      _id_ACTION_MANAGED_PROFILE_UNLOCKED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_NETWORK_USAGE = _class.staticFieldId(
    r'ACTION_MANAGE_NETWORK_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_NETWORK_USAGE =>
      _id_ACTION_MANAGE_NETWORK_USAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_PACKAGE_STORAGE = _class.staticFieldId(
    r'ACTION_MANAGE_PACKAGE_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_PACKAGE_STORAGE =>
      _id_ACTION_MANAGE_PACKAGE_STORAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_UNUSED_APPS = _class.staticFieldId(
    r'ACTION_MANAGE_UNUSED_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_UNUSED_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_UNUSED_APPS =>
      _id_ACTION_MANAGE_UNUSED_APPS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_BAD_REMOVAL = _class.staticFieldId(
    r'ACTION_MEDIA_BAD_REMOVAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_BAD_REMOVAL =>
      _id_ACTION_MEDIA_BAD_REMOVAL.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_BUTTON = _class.staticFieldId(
    r'ACTION_MEDIA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_BUTTON =>
      _id_ACTION_MEDIA_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_CHECKING = _class.staticFieldId(
    r'ACTION_MEDIA_CHECKING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_CHECKING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_CHECKING =>
      _id_ACTION_MEDIA_CHECKING.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_EJECT = _class.staticFieldId(
    r'ACTION_MEDIA_EJECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_EJECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_EJECT =>
      _id_ACTION_MEDIA_EJECT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_MOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_MOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_MOUNTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_MOUNTED =>
      _id_ACTION_MEDIA_MOUNTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_NOFS = _class.staticFieldId(
    r'ACTION_MEDIA_NOFS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_NOFS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_NOFS =>
      _id_ACTION_MEDIA_NOFS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_REMOVED = _class.staticFieldId(
    r'ACTION_MEDIA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_REMOVED =>
      _id_ACTION_MEDIA_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_FINISHED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_FINISHED =>
      _id_ACTION_MEDIA_SCANNER_FINISHED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_SCAN_FILE = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_SCAN_FILE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_SCAN_FILE =>
      _id_ACTION_MEDIA_SCANNER_SCAN_FILE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_STARTED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_STARTED =>
      _id_ACTION_MEDIA_SCANNER_STARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SHARED = _class.staticFieldId(
    r'ACTION_MEDIA_SHARED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SHARED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SHARED =>
      _id_ACTION_MEDIA_SHARED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_UNMOUNTABLE = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_UNMOUNTABLE =>
      _id_ACTION_MEDIA_UNMOUNTABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_UNMOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_UNMOUNTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_UNMOUNTED =>
      _id_ACTION_MEDIA_UNMOUNTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_REPLACED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_REPLACED =>
      _id_ACTION_MY_PACKAGE_REPLACED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_SUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_SUSPENDED =>
      _id_ACTION_MY_PACKAGE_SUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_UNSUSPENDED =>
      _id_ACTION_MY_PACKAGE_UNSUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_NEW_OUTGOING_CALL = _class.staticFieldId(
    r'ACTION_NEW_OUTGOING_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_NEW_OUTGOING_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_NEW_OUTGOING_CALL =>
      _id_ACTION_NEW_OUTGOING_CALL.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_OPEN_DOCUMENT = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_OPEN_DOCUMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_OPEN_DOCUMENT =>
      _id_ACTION_OPEN_DOCUMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_OPEN_DOCUMENT_TREE = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT_TREE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_OPEN_DOCUMENT_TREE =>
      _id_ACTION_OPEN_DOCUMENT_TREE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGES_SUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGES_SUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGES_SUSPENDED =>
      _id_ACTION_PACKAGES_SUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGES_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGES_UNSUSPENDED =>
      _id_ACTION_PACKAGES_UNSUSPENDED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_ADDED = _class.staticFieldId(
    r'ACTION_PACKAGE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_ADDED =>
      _id_ACTION_PACKAGE_ADDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_CHANGED = _class.staticFieldId(
    r'ACTION_PACKAGE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_CHANGED =>
      _id_ACTION_PACKAGE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_DATA_CLEARED = _class.staticFieldId(
    r'ACTION_PACKAGE_DATA_CLEARED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_DATA_CLEARED =>
      _id_ACTION_PACKAGE_DATA_CLEARED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_FIRST_LAUNCH = _class.staticFieldId(
    r'ACTION_PACKAGE_FIRST_LAUNCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_FIRST_LAUNCH =>
      _id_ACTION_PACKAGE_FIRST_LAUNCH.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_FULLY_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_FULLY_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_FULLY_REMOVED =>
      _id_ACTION_PACKAGE_FULLY_REMOVED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_INSTALL = _class.staticFieldId(
    r'ACTION_PACKAGE_INSTALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_INSTALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_INSTALL =>
      _id_ACTION_PACKAGE_INSTALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_NEEDS_VERIFICATION = _class.staticFieldId(
    r'ACTION_PACKAGE_NEEDS_VERIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_NEEDS_VERIFICATION =>
      _id_ACTION_PACKAGE_NEEDS_VERIFICATION.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_REMOVED =>
      _id_ACTION_PACKAGE_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_REPLACED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_REPLACED =>
      _id_ACTION_PACKAGE_REPLACED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_RESTARTED = _class.staticFieldId(
    r'ACTION_PACKAGE_RESTARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_RESTARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_RESTARTED =>
      _id_ACTION_PACKAGE_RESTARTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_UNSTOPPED = _class.staticFieldId(
    r'ACTION_PACKAGE_UNSTOPPED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_UNSTOPPED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_UNSTOPPED =>
      _id_ACTION_PACKAGE_UNSTOPPED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_VERIFIED = _class.staticFieldId(
    r'ACTION_PACKAGE_VERIFIED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_VERIFIED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_VERIFIED =>
      _id_ACTION_PACKAGE_VERIFIED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PASTE = _class.staticFieldId(
    r'ACTION_PASTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PASTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PASTE =>
      _id_ACTION_PASTE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PICK = _class.staticFieldId(
    r'ACTION_PICK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PICK =>
      _id_ACTION_PICK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PICK_ACTIVITY = _class.staticFieldId(
    r'ACTION_PICK_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK_ACTIVITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PICK_ACTIVITY =>
      _id_ACTION_PICK_ACTIVITY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_CONNECTED = _class.staticFieldId(
    r'ACTION_POWER_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_CONNECTED =>
      _id_ACTION_POWER_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_DISCONNECTED = _class.staticFieldId(
    r'ACTION_POWER_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_DISCONNECTED =>
      _id_ACTION_POWER_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_USAGE_SUMMARY = _class.staticFieldId(
    r'ACTION_POWER_USAGE_SUMMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_USAGE_SUMMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_USAGE_SUMMARY =>
      _id_ACTION_POWER_USAGE_SUMMARY.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROCESS_TEXT = _class.staticFieldId(
    r'ACTION_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROCESS_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROCESS_TEXT =>
      _id_ACTION_PROCESS_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_ACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_ACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_ACCESSIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_ACCESSIBLE =>
      _id_ACTION_PROFILE_ACCESSIBLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_ADDED =>
      _id_ACTION_PROFILE_ADDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_AVAILABLE = _class.staticFieldId(
    r'ACTION_PROFILE_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_AVAILABLE =>
      _id_ACTION_PROFILE_AVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_INACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_INACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_INACCESSIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_INACCESSIBLE =>
      _id_ACTION_PROFILE_INACCESSIBLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_REMOVED =>
      _id_ACTION_PROFILE_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_PROFILE_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_UNAVAILABLE =>
      _id_ACTION_PROFILE_UNAVAILABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROVIDER_CHANGED = _class.staticFieldId(
    r'ACTION_PROVIDER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROVIDER_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROVIDER_CHANGED =>
      _id_ACTION_PROVIDER_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_QUICK_CLOCK = _class.staticFieldId(
    r'ACTION_QUICK_CLOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_CLOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_CLOCK =>
      _id_ACTION_QUICK_CLOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_QUICK_VIEW = _class.staticFieldId(
    r'ACTION_QUICK_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_VIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_VIEW =>
      _id_ACTION_QUICK_VIEW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_REBOOT = _class.staticFieldId(
    r'ACTION_REBOOT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REBOOT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REBOOT =>
      _id_ACTION_REBOOT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_RUN = _class.staticFieldId(
    r'ACTION_RUN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_RUN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_RUN =>
      _id_ACTION_RUN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SAFETY_CENTER = _class.staticFieldId(
    r'ACTION_SAFETY_CENTER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SAFETY_CENTER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SAFETY_CENTER =>
      _id_ACTION_SAFETY_CENTER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCREEN_OFF = _class.staticFieldId(
    r'ACTION_SCREEN_OFF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCREEN_OFF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCREEN_OFF =>
      _id_ACTION_SCREEN_OFF.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCREEN_ON = _class.staticFieldId(
    r'ACTION_SCREEN_ON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCREEN_ON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCREEN_ON =>
      _id_ACTION_SCREEN_ON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEARCH = _class.staticFieldId(
    r'ACTION_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEARCH =>
      _id_ACTION_SEARCH.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEARCH_LONG_PRESS = _class.staticFieldId(
    r'ACTION_SEARCH_LONG_PRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEARCH_LONG_PRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEARCH_LONG_PRESS =>
      _id_ACTION_SEARCH_LONG_PRESS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEND = _class.staticFieldId(
    r'ACTION_SEND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEND =>
      _id_ACTION_SEND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SENDTO = _class.staticFieldId(
    r'ACTION_SENDTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SENDTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SENDTO =>
      _id_ACTION_SENDTO.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEND_MULTIPLE = _class.staticFieldId(
    r'ACTION_SEND_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEND_MULTIPLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEND_MULTIPLE =>
      _id_ACTION_SEND_MULTIPLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SET_WALLPAPER = _class.staticFieldId(
    r'ACTION_SET_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SET_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SET_WALLPAPER =>
      _id_ACTION_SET_WALLPAPER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHOW_APP_INFO = _class.staticFieldId(
    r'ACTION_SHOW_APP_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHOW_APP_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHOW_APP_INFO =>
      _id_ACTION_SHOW_APP_INFO.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHOW_WORK_APPS = _class.staticFieldId(
    r'ACTION_SHOW_WORK_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHOW_WORK_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHOW_WORK_APPS =>
      _id_ACTION_SHOW_WORK_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHUTDOWN = _class.staticFieldId(
    r'ACTION_SHUTDOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHUTDOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHUTDOWN =>
      _id_ACTION_SHUTDOWN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SYNC = _class.staticFieldId(
    r'ACTION_SYNC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SYNC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SYNC =>
      _id_ACTION_SYNC.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SYSTEM_TUTORIAL = _class.staticFieldId(
    r'ACTION_SYSTEM_TUTORIAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SYSTEM_TUTORIAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SYSTEM_TUTORIAL =>
      _id_ACTION_SYSTEM_TUTORIAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIMEZONE_CHANGED = _class.staticFieldId(
    r'ACTION_TIMEZONE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIMEZONE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIMEZONE_CHANGED =>
      _id_ACTION_TIMEZONE_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIME_CHANGED = _class.staticFieldId(
    r'ACTION_TIME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIME_CHANGED =>
      _id_ACTION_TIME_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIME_TICK = _class.staticFieldId(
    r'ACTION_TIME_TICK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIME_TICK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIME_TICK =>
      _id_ACTION_TIME_TICK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TRANSLATE = _class.staticFieldId(
    r'ACTION_TRANSLATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TRANSLATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TRANSLATE =>
      _id_ACTION_TRANSLATE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UID_REMOVED = _class.staticFieldId(
    r'ACTION_UID_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UID_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UID_REMOVED =>
      _id_ACTION_UID_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UMS_CONNECTED = _class.staticFieldId(
    r'ACTION_UMS_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UMS_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UMS_CONNECTED =>
      _id_ACTION_UMS_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UMS_DISCONNECTED = _class.staticFieldId(
    r'ACTION_UMS_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UMS_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UMS_DISCONNECTED =>
      _id_ACTION_UMS_DISCONNECTED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_UNARCHIVE_PACKAGE = _class.staticFieldId(
    r'ACTION_UNARCHIVE_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UNARCHIVE_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UNARCHIVE_PACKAGE =>
      _id_ACTION_UNARCHIVE_PACKAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_UNINSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_UNINSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UNINSTALL_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UNINSTALL_PACKAGE =>
      _id_ACTION_UNINSTALL_PACKAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_BACKGROUND = _class.staticFieldId(
    r'ACTION_USER_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_BACKGROUND =>
      _id_ACTION_USER_BACKGROUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_FOREGROUND = _class.staticFieldId(
    r'ACTION_USER_FOREGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_FOREGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_FOREGROUND =>
      _id_ACTION_USER_FOREGROUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_INITIALIZE = _class.staticFieldId(
    r'ACTION_USER_INITIALIZE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_INITIALIZE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_INITIALIZE =>
      _id_ACTION_USER_INITIALIZE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_PRESENT = _class.staticFieldId(
    r'ACTION_USER_PRESENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_PRESENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_PRESENT =>
      _id_ACTION_USER_PRESENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_UNLOCKED = _class.staticFieldId(
    r'ACTION_USER_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_UNLOCKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_UNLOCKED =>
      _id_ACTION_USER_UNLOCKED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW = _class.staticFieldId(
    r'ACTION_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW =>
      _id_ACTION_VIEW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_LOCUS = _class.staticFieldId(
    r'ACTION_VIEW_LOCUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_LOCUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_LOCUS =>
      _id_ACTION_VIEW_LOCUS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE = _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_PERMISSION_USAGE =>
      _id_ACTION_VIEW_PERMISSION_USAGE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =
      _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =>
      _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_VOICE_COMMAND = _class.staticFieldId(
    r'ACTION_VOICE_COMMAND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VOICE_COMMAND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VOICE_COMMAND =>
      _id_ACTION_VOICE_COMMAND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_WALLPAPER_CHANGED = _class.staticFieldId(
    r'ACTION_WALLPAPER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WALLPAPER_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_WALLPAPER_CHANGED =>
      _id_ACTION_WALLPAPER_CHANGED.get(
          _class, const jni$_.JStringNullableType());

  static final _id_ACTION_WEB_SEARCH = _class.staticFieldId(
    r'ACTION_WEB_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WEB_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_WEB_SEARCH =>
      _id_ACTION_WEB_SEARCH.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN`
  static const CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN = 4;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_FAILED`
  static const CAPTURE_CONTENT_FOR_NOTE_FAILED = 1;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_SUCCESS`
  static const CAPTURE_CONTENT_FOR_NOTE_SUCCESS = 0;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED`
  static const CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED = 2;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED`
  static const CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED = 3;
  static final _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =
      _class.staticFieldId(
    r'CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =>
      _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_ALTERNATIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_ALTERNATIVE =>
      _id_CATEGORY_ALTERNATIVE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_BROWSER = _class.staticFieldId(
    r'CATEGORY_APP_BROWSER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_BROWSER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_BROWSER =>
      _id_CATEGORY_APP_BROWSER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CALCULATOR = _class.staticFieldId(
    r'CATEGORY_APP_CALCULATOR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CALCULATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CALCULATOR =>
      _id_CATEGORY_APP_CALCULATOR.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CALENDAR = _class.staticFieldId(
    r'CATEGORY_APP_CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CALENDAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CALENDAR =>
      _id_CATEGORY_APP_CALENDAR.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CONTACTS = _class.staticFieldId(
    r'CATEGORY_APP_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CONTACTS =>
      _id_CATEGORY_APP_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_EMAIL = _class.staticFieldId(
    r'CATEGORY_APP_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_EMAIL =>
      _id_CATEGORY_APP_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_FILES = _class.staticFieldId(
    r'CATEGORY_APP_FILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_FILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_FILES =>
      _id_CATEGORY_APP_FILES.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_FITNESS = _class.staticFieldId(
    r'CATEGORY_APP_FITNESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_FITNESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_FITNESS =>
      _id_CATEGORY_APP_FITNESS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_GALLERY = _class.staticFieldId(
    r'CATEGORY_APP_GALLERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_GALLERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_GALLERY =>
      _id_CATEGORY_APP_GALLERY.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MAPS = _class.staticFieldId(
    r'CATEGORY_APP_MAPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MAPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MAPS =>
      _id_CATEGORY_APP_MAPS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MARKET = _class.staticFieldId(
    r'CATEGORY_APP_MARKET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MARKET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MARKET =>
      _id_CATEGORY_APP_MARKET.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MESSAGING = _class.staticFieldId(
    r'CATEGORY_APP_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MESSAGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MESSAGING =>
      _id_CATEGORY_APP_MESSAGING.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MUSIC = _class.staticFieldId(
    r'CATEGORY_APP_MUSIC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MUSIC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MUSIC =>
      _id_CATEGORY_APP_MUSIC.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_WEATHER = _class.staticFieldId(
    r'CATEGORY_APP_WEATHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_WEATHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_WEATHER =>
      _id_CATEGORY_APP_WEATHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_BROWSABLE = _class.staticFieldId(
    r'CATEGORY_BROWSABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_BROWSABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_BROWSABLE =>
      _id_CATEGORY_BROWSABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_CAR_DOCK = _class.staticFieldId(
    r'CATEGORY_CAR_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_CAR_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_CAR_DOCK =>
      _id_CATEGORY_CAR_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_CAR_MODE = _class.staticFieldId(
    r'CATEGORY_CAR_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_CAR_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_CAR_MODE =>
      _id_CATEGORY_CAR_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DEFAULT = _class.staticFieldId(
    r'CATEGORY_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DEFAULT =>
      _id_CATEGORY_DEFAULT.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DESK_DOCK =>
      _id_CATEGORY_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DEVELOPMENT_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_DEVELOPMENT_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DEVELOPMENT_PREFERENCE =>
      _id_CATEGORY_DEVELOPMENT_PREFERENCE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_EMBED = _class.staticFieldId(
    r'CATEGORY_EMBED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_EMBED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_EMBED =>
      _id_CATEGORY_EMBED.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =
      _class.staticFieldId(
    r'CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =>
      _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_HE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_HE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_HE_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_HE_DESK_DOCK =>
      _id_CATEGORY_HE_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_HOME = _class.staticFieldId(
    r'CATEGORY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_HOME =>
      _id_CATEGORY_HOME.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_INFO = _class.staticFieldId(
    r'CATEGORY_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_INFO =>
      _id_CATEGORY_INFO.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LAUNCHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LAUNCHER =>
      _id_CATEGORY_LAUNCHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LEANBACK_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LEANBACK_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LEANBACK_LAUNCHER =>
      _id_CATEGORY_LEANBACK_LAUNCHER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_LE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LE_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LE_DESK_DOCK =>
      _id_CATEGORY_LE_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_MONKEY = _class.staticFieldId(
    r'CATEGORY_MONKEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_MONKEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_MONKEY =>
      _id_CATEGORY_MONKEY.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_OPENABLE = _class.staticFieldId(
    r'CATEGORY_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_OPENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_OPENABLE =>
      _id_CATEGORY_OPENABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_PREFERENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_PREFERENCE =>
      _id_CATEGORY_PREFERENCE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SAMPLE_CODE = _class.staticFieldId(
    r'CATEGORY_SAMPLE_CODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SAMPLE_CODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SAMPLE_CODE =>
      _id_CATEGORY_SAMPLE_CODE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SECONDARY_HOME = _class.staticFieldId(
    r'CATEGORY_SECONDARY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SECONDARY_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SECONDARY_HOME =>
      _id_CATEGORY_SECONDARY_HOME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SELECTED_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_SELECTED_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SELECTED_ALTERNATIVE =>
      _id_CATEGORY_SELECTED_ALTERNATIVE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TAB = _class.staticFieldId(
    r'CATEGORY_TAB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TAB`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TAB =>
      _id_CATEGORY_TAB.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TEST = _class.staticFieldId(
    r'CATEGORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TEST =>
      _id_CATEGORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TYPED_OPENABLE = _class.staticFieldId(
    r'CATEGORY_TYPED_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TYPED_OPENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TYPED_OPENABLE =>
      _id_CATEGORY_TYPED_OPENABLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_UNIT_TEST = _class.staticFieldId(
    r'CATEGORY_UNIT_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_UNIT_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_UNIT_TEST =>
      _id_CATEGORY_UNIT_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_VOICE = _class.staticFieldId(
    r'CATEGORY_VOICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_VOICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_VOICE =>
      _id_CATEGORY_VOICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_VR_HOME = _class.staticFieldId(
    r'CATEGORY_VR_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_VR_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_VR_HOME =>
      _id_CATEGORY_VR_HOME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CHOOSER_CONTENT_TYPE_ALBUM`
  static const CHOOSER_CONTENT_TYPE_ALBUM = 1;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_EXTRA_ALARM_COUNT = _class.staticFieldId(
    r'EXTRA_ALARM_COUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALARM_COUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALARM_COUNT =>
      _id_EXTRA_ALARM_COUNT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALLOW_MULTIPLE = _class.staticFieldId(
    r'EXTRA_ALLOW_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALLOW_MULTIPLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALLOW_MULTIPLE =>
      _id_EXTRA_ALLOW_MULTIPLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALLOW_REPLACE = _class.staticFieldId(
    r'EXTRA_ALLOW_REPLACE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALLOW_REPLACE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALLOW_REPLACE =>
      _id_EXTRA_ALLOW_REPLACE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALTERNATE_INTENTS = _class.staticFieldId(
    r'EXTRA_ALTERNATE_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALTERNATE_INTENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALTERNATE_INTENTS =>
      _id_EXTRA_ALTERNATE_INTENTS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ARCHIVAL = _class.staticFieldId(
    r'EXTRA_ARCHIVAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ARCHIVAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ARCHIVAL =>
      _id_EXTRA_ARCHIVAL.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_CONTEXT = _class.staticFieldId(
    r'EXTRA_ASSIST_CONTEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_CONTEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_CONTEXT =>
      _id_EXTRA_ASSIST_CONTEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_INPUT_DEVICE_ID = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_DEVICE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_INPUT_DEVICE_ID =>
      _id_EXTRA_ASSIST_INPUT_DEVICE_ID.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_HINT_KEYBOARD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_INPUT_HINT_KEYBOARD =>
      _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_PACKAGE = _class.staticFieldId(
    r'EXTRA_ASSIST_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_PACKAGE =>
      _id_EXTRA_ASSIST_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_UID = _class.staticFieldId(
    r'EXTRA_ASSIST_UID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_UID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_UID =>
      _id_EXTRA_ASSIST_UID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ATTRIBUTION_TAGS = _class.staticFieldId(
    r'EXTRA_ATTRIBUTION_TAGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ATTRIBUTION_TAGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ATTRIBUTION_TAGS =>
      _id_EXTRA_ATTRIBUTION_TAGS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE = _class.staticFieldId(
    r'EXTRA_AUTO_LAUNCH_SINGLE_CHOICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =>
      _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_BCC = _class.staticFieldId(
    r'EXTRA_BCC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BCC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BCC =>
      _id_EXTRA_BCC.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_BUG_REPORT = _class.staticFieldId(
    r'EXTRA_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BUG_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BUG_REPORT =>
      _id_EXTRA_BUG_REPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE =
      _class.staticFieldId(
    r'EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE =>
      _id_EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CC = _class.staticFieldId(
    r'EXTRA_CC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CC =>
      _id_EXTRA_CC.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_COMPONENT_NAME =>
      _id_EXTRA_CHANGED_COMPONENT_NAME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_COMPONENT_NAME_LIST =>
      _id_EXTRA_CHANGED_COMPONENT_NAME_LIST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_PACKAGE_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_PACKAGE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_PACKAGE_LIST =>
      _id_EXTRA_CHANGED_PACKAGE_LIST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_UID_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_UID_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_UID_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_UID_LIST =>
      _id_EXTRA_CHANGED_UID_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI = _class.staticFieldId(
    r'EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI =>
      _id_EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_CONTENT_TYPE_HINT = _class.staticFieldId(
    r'EXTRA_CHOOSER_CONTENT_TYPE_HINT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_CONTENT_TYPE_HINT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_CONTENT_TYPE_HINT =>
      _id_EXTRA_CHOOSER_CONTENT_TYPE_HINT.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_CUSTOM_ACTIONS = _class.staticFieldId(
    r'EXTRA_CHOOSER_CUSTOM_ACTIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_CUSTOM_ACTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_CUSTOM_ACTIONS =>
      _id_EXTRA_CHOOSER_CUSTOM_ACTIONS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_FOCUSED_ITEM_POSITION = _class.staticFieldId(
    r'EXTRA_CHOOSER_FOCUSED_ITEM_POSITION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_FOCUSED_ITEM_POSITION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_FOCUSED_ITEM_POSITION =>
      _id_EXTRA_CHOOSER_FOCUSED_ITEM_POSITION.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_MODIFY_SHARE_ACTION = _class.staticFieldId(
    r'EXTRA_CHOOSER_MODIFY_SHARE_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_MODIFY_SHARE_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_MODIFY_SHARE_ACTION =>
      _id_EXTRA_CHOOSER_MODIFY_SHARE_ACTION.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =
      _class.staticFieldId(
    r'EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_RESULT = _class.staticFieldId(
    r'EXTRA_CHOOSER_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_RESULT =>
      _id_EXTRA_CHOOSER_RESULT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_RESULT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOOSER_RESULT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_RESULT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_RESULT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_RESULT_INTENT_SENDER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_TARGETS = _class.staticFieldId(
    r'EXTRA_CHOOSER_TARGETS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_TARGETS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_TARGETS =>
      _id_EXTRA_CHOOSER_TARGETS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOSEN_COMPONENT = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOSEN_COMPONENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOSEN_COMPONENT =>
      _id_EXTRA_CHOSEN_COMPONENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =>
      _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_COMPONENT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_COMPONENT_NAME =>
      _id_EXTRA_COMPONENT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CONTENT_ANNOTATIONS = _class.staticFieldId(
    r'EXTRA_CONTENT_ANNOTATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONTENT_ANNOTATIONS =>
      _id_EXTRA_CONTENT_ANNOTATIONS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CONTENT_QUERY = _class.staticFieldId(
    r'EXTRA_CONTENT_QUERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONTENT_QUERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONTENT_QUERY =>
      _id_EXTRA_CONTENT_QUERY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DATA_REMOVED = _class.staticFieldId(
    r'EXTRA_DATA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DATA_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DATA_REMOVED =>
      _id_EXTRA_DATA_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DOCK_STATE = _class.staticFieldId(
    r'EXTRA_DOCK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DOCK_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DOCK_STATE =>
      _id_EXTRA_DOCK_STATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int EXTRA_DOCK_STATE_CAR`
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: `static public final int EXTRA_DOCK_STATE_DESK`
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: `static public final int EXTRA_DOCK_STATE_HE_DESK`
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: `static public final int EXTRA_DOCK_STATE_LE_DESK`
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: `static public final int EXTRA_DOCK_STATE_UNDOCKED`
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;
  static final _id_EXTRA_DONT_KILL_APP = _class.staticFieldId(
    r'EXTRA_DONT_KILL_APP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DONT_KILL_APP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DONT_KILL_APP =>
      _id_EXTRA_DONT_KILL_APP.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DURATION_MILLIS = _class.staticFieldId(
    r'EXTRA_DURATION_MILLIS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DURATION_MILLIS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DURATION_MILLIS =>
      _id_EXTRA_DURATION_MILLIS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EMAIL = _class.staticFieldId(
    r'EXTRA_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EMAIL =>
      _id_EXTRA_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_END_TIME = _class.staticFieldId(
    r'EXTRA_END_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_END_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_END_TIME =>
      _id_EXTRA_END_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EXCLUDE_COMPONENTS = _class.staticFieldId(
    r'EXTRA_EXCLUDE_COMPONENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EXCLUDE_COMPONENTS =>
      _id_EXTRA_EXCLUDE_COMPONENTS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_FROM_STORAGE = _class.staticFieldId(
    r'EXTRA_FROM_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_FROM_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_FROM_STORAGE =>
      _id_EXTRA_FROM_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_HTML_TEXT = _class.staticFieldId(
    r'EXTRA_HTML_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_HTML_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_HTML_TEXT =>
      _id_EXTRA_HTML_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INDEX = _class.staticFieldId(
    r'EXTRA_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INDEX =>
      _id_EXTRA_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INITIAL_INTENTS = _class.staticFieldId(
    r'EXTRA_INITIAL_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INITIAL_INTENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INITIAL_INTENTS =>
      _id_EXTRA_INITIAL_INTENTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INSTALLER_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_INSTALLER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INSTALLER_PACKAGE_NAME =>
      _id_EXTRA_INSTALLER_PACKAGE_NAME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INTENT = _class.staticFieldId(
    r'EXTRA_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INTENT =>
      _id_EXTRA_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_KEY_EVENT = _class.staticFieldId(
    r'EXTRA_KEY_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_KEY_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_KEY_EVENT =>
      _id_EXTRA_KEY_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCALE_LIST = _class.staticFieldId(
    r'EXTRA_LOCALE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCALE_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCALE_LIST =>
      _id_EXTRA_LOCALE_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCAL_ONLY = _class.staticFieldId(
    r'EXTRA_LOCAL_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCAL_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCAL_ONLY =>
      _id_EXTRA_LOCAL_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCUS_ID = _class.staticFieldId(
    r'EXTRA_LOCUS_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCUS_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCUS_ID =>
      _id_EXTRA_LOCUS_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_METADATA_TEXT = _class.staticFieldId(
    r'EXTRA_METADATA_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_METADATA_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_METADATA_TEXT =>
      _id_EXTRA_METADATA_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_MIME_TYPES = _class.staticFieldId(
    r'EXTRA_MIME_TYPES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_MIME_TYPES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_MIME_TYPES =>
      _id_EXTRA_MIME_TYPES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_NOT_UNKNOWN_SOURCE = _class.staticFieldId(
    r'EXTRA_NOT_UNKNOWN_SOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_NOT_UNKNOWN_SOURCE =>
      _id_EXTRA_NOT_UNKNOWN_SOURCE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ORIGINATING_URI = _class.staticFieldId(
    r'EXTRA_ORIGINATING_URI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ORIGINATING_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ORIGINATING_URI =>
      _id_EXTRA_ORIGINATING_URI.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PACKAGES = _class.staticFieldId(
    r'EXTRA_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PACKAGES =>
      _id_EXTRA_PACKAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PACKAGE_NAME =>
      _id_EXTRA_PACKAGE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PERMISSION_GROUP_NAME = _class.staticFieldId(
    r'EXTRA_PERMISSION_GROUP_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PERMISSION_GROUP_NAME =>
      _id_EXTRA_PERMISSION_GROUP_NAME.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PHONE_NUMBER = _class.staticFieldId(
    r'EXTRA_PHONE_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PHONE_NUMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PHONE_NUMBER =>
      _id_EXTRA_PHONE_NUMBER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PROCESS_TEXT = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PROCESS_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PROCESS_TEXT =>
      _id_EXTRA_PROCESS_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PROCESS_TEXT_READONLY = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT_READONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PROCESS_TEXT_READONLY =>
      _id_EXTRA_PROCESS_TEXT_READONLY.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_QUICK_VIEW_FEATURES = _class.staticFieldId(
    r'EXTRA_QUICK_VIEW_FEATURES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_QUICK_VIEW_FEATURES =>
      _id_EXTRA_QUICK_VIEW_FEATURES.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_QUIET_MODE = _class.staticFieldId(
    r'EXTRA_QUIET_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_QUIET_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_QUIET_MODE =>
      _id_EXTRA_QUIET_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REFERRER = _class.staticFieldId(
    r'EXTRA_REFERRER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFERRER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REFERRER =>
      _id_EXTRA_REFERRER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REFERRER_NAME = _class.staticFieldId(
    r'EXTRA_REFERRER_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFERRER_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REFERRER_NAME =>
      _id_EXTRA_REFERRER_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REMOTE_INTENT_TOKEN = _class.staticFieldId(
    r'EXTRA_REMOTE_INTENT_TOKEN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REMOTE_INTENT_TOKEN =>
      _id_EXTRA_REMOTE_INTENT_TOKEN.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REPLACEMENT_EXTRAS = _class.staticFieldId(
    r'EXTRA_REPLACEMENT_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REPLACEMENT_EXTRAS =>
      _id_EXTRA_REPLACEMENT_EXTRAS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REPLACING = _class.staticFieldId(
    r'EXTRA_REPLACING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REPLACING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REPLACING =>
      _id_EXTRA_REPLACING.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_BUNDLE = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_BUNDLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_BUNDLE =>
      _id_EXTRA_RESTRICTIONS_BUNDLE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_INTENT = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_INTENT =>
      _id_EXTRA_RESTRICTIONS_INTENT.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_LIST = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_LIST =>
      _id_EXTRA_RESTRICTIONS_LIST.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESULT_RECEIVER = _class.staticFieldId(
    r'EXTRA_RESULT_RECEIVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESULT_RECEIVER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESULT_RECEIVER =>
      _id_EXTRA_RESULT_RECEIVER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RETURN_RESULT = _class.staticFieldId(
    r'EXTRA_RETURN_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RETURN_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RETURN_RESULT =>
      _id_EXTRA_RETURN_RESULT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ICON = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ICON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ICON =>
      _id_EXTRA_SHORTCUT_ICON.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ICON_RESOURCE = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON_RESOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ICON_RESOURCE =>
      _id_EXTRA_SHORTCUT_ICON_RESOURCE.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ID = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ID =>
      _id_EXTRA_SHORTCUT_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_INTENT = _class.staticFieldId(
    r'EXTRA_SHORTCUT_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_INTENT =>
      _id_EXTRA_SHORTCUT_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_NAME = _class.staticFieldId(
    r'EXTRA_SHORTCUT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_NAME =>
      _id_EXTRA_SHORTCUT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHUTDOWN_USERSPACE_ONLY = _class.staticFieldId(
    r'EXTRA_SHUTDOWN_USERSPACE_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHUTDOWN_USERSPACE_ONLY =>
      _id_EXTRA_SHUTDOWN_USERSPACE_ONLY.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SPLIT_NAME = _class.staticFieldId(
    r'EXTRA_SPLIT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SPLIT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SPLIT_NAME =>
      _id_EXTRA_SPLIT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_START_TIME = _class.staticFieldId(
    r'EXTRA_START_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_START_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_START_TIME =>
      _id_EXTRA_START_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_STREAM = _class.staticFieldId(
    r'EXTRA_STREAM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_STREAM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_STREAM =>
      _id_EXTRA_STREAM.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SUBJECT = _class.staticFieldId(
    r'EXTRA_SUBJECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUBJECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SUBJECT =>
      _id_EXTRA_SUBJECT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS = _class.staticFieldId(
    r'EXTRA_SUSPENDED_PACKAGE_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SUSPENDED_PACKAGE_EXTRAS =>
      _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS.get(
          _class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TEMPLATE = _class.staticFieldId(
    r'EXTRA_TEMPLATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TEMPLATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TEMPLATE =>
      _id_EXTRA_TEMPLATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TEXT = _class.staticFieldId(
    r'EXTRA_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TEXT =>
      _id_EXTRA_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TIME = _class.staticFieldId(
    r'EXTRA_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TIME =>
      _id_EXTRA_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TIMEZONE = _class.staticFieldId(
    r'EXTRA_TIMEZONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TIMEZONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TIMEZONE =>
      _id_EXTRA_TIMEZONE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TITLE = _class.staticFieldId(
    r'EXTRA_TITLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TITLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TITLE =>
      _id_EXTRA_TITLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_UID = _class.staticFieldId(
    r'EXTRA_UID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_UID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_UID =>
      _id_EXTRA_UID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USER = _class.staticFieldId(
    r'EXTRA_USER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USER =>
      _id_EXTRA_USER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USER_INITIATED = _class.staticFieldId(
    r'EXTRA_USER_INITIATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USER_INITIATED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USER_INITIATED =>
      _id_EXTRA_USER_INITIATED.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USE_STYLUS_MODE = _class.staticFieldId(
    r'EXTRA_USE_STYLUS_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USE_STYLUS_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USE_STYLUS_MODE =>
      _id_EXTRA_USE_STYLUS_MODE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int FILL_IN_ACTION`
  static const FILL_IN_ACTION = 1;

  /// from: `static public final int FILL_IN_CATEGORIES`
  static const FILL_IN_CATEGORIES = 4;

  /// from: `static public final int FILL_IN_CLIP_DATA`
  static const FILL_IN_CLIP_DATA = 128;

  /// from: `static public final int FILL_IN_COMPONENT`
  static const FILL_IN_COMPONENT = 8;

  /// from: `static public final int FILL_IN_DATA`
  static const FILL_IN_DATA = 2;

  /// from: `static public final int FILL_IN_IDENTIFIER`
  static const FILL_IN_IDENTIFIER = 256;

  /// from: `static public final int FILL_IN_PACKAGE`
  static const FILL_IN_PACKAGE = 16;

  /// from: `static public final int FILL_IN_SELECTOR`
  static const FILL_IN_SELECTOR = 64;

  /// from: `static public final int FILL_IN_SOURCE_BOUNDS`
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: `static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT`
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_TASK`
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_TOP`
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET`
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: `static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS`
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: `static public final int FLAG_ACTIVITY_FORWARD_RESULT`
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: `static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY`
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: `static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT`
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: `static public final int FLAG_ACTIVITY_MATCH_EXTERNAL`
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: `static public final int FLAG_ACTIVITY_MULTIPLE_TASK`
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: `static public final int FLAG_ACTIVITY_NEW_DOCUMENT`
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: `static public final int FLAG_ACTIVITY_NEW_TASK`
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: `static public final int FLAG_ACTIVITY_NO_ANIMATION`
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: `static public final int FLAG_ACTIVITY_NO_HISTORY`
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: `static public final int FLAG_ACTIVITY_NO_USER_ACTION`
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: `static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP`
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: `static public final int FLAG_ACTIVITY_REORDER_TO_FRONT`
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: `static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT`
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: `static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER`
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: `static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED`
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: `static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS`
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: `static public final int FLAG_ACTIVITY_SINGLE_TOP`
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: `static public final int FLAG_ACTIVITY_TASK_ON_HOME`
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: `static public final int FLAG_DEBUG_LOG_RESOLUTION`
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: `static public final int FLAG_DIRECT_BOOT_AUTO`
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: `static public final int FLAG_EXCLUDE_STOPPED_PACKAGES`
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: `static public final int FLAG_FROM_BACKGROUND`
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: `static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION`
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: `static public final int FLAG_GRANT_PREFIX_URI_PERMISSION`
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: `static public final int FLAG_GRANT_READ_URI_PERMISSION`
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: `static public final int FLAG_GRANT_WRITE_URI_PERMISSION`
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: `static public final int FLAG_INCLUDE_STOPPED_PACKAGES`
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: `static public final int FLAG_RECEIVER_FOREGROUND`
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: `static public final int FLAG_RECEIVER_NO_ABORT`
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: `static public final int FLAG_RECEIVER_REGISTERED_ONLY`
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: `static public final int FLAG_RECEIVER_REPLACE_PENDING`
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: `static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;
  static final _id_METADATA_DOCK_HOME = _class.staticFieldId(
    r'METADATA_DOCK_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String METADATA_DOCK_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get METADATA_DOCK_HOME =>
      _id_METADATA_DOCK_HOME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int URI_ALLOW_UNSAFE`
  static const URI_ALLOW_UNSAFE = 4;

  /// from: `static public final int URI_ANDROID_APP_SCHEME`
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: `static public final int URI_INTENT_SCHEME`
  static const URI_INTENT_SCHEME = 1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$1(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$intent.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$2(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$2(_class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr, _$string.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;)V',
  );

  static final _new$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$3(
    jni$_.JString? string,
    jni$_.JObject? uri,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$3(_class.reference.pointer,
            _id_new$3 as jni$_.JMethodIDPtr, _$string.pointer, _$uri.pointer)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new$4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$4(
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$4(
            _class.reference.pointer,
            _id_new$4 as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$class$.pointer)
        .reference);
  }

  static final _id_new$5 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new$5 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$5(
    jni$_.JString? string,
    jni$_.JObject? uri,
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(_new$5(
            _class.reference.pointer,
            _id_new$5 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$uri.pointer,
            _$context.pointer,
            _$class$.pointer)
        .reference);
  }

  static final _id_createChooser = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _createChooser = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? createChooser(
    Intent? intent,
    jni$_.JObject? charSequence,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _createChooser(
            _class.reference.pointer,
            _id_createChooser as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$charSequence.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_createChooser$1 = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;',
  );

  static final _createChooser$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? createChooser$1(
    Intent? intent,
    jni$_.JObject? charSequence,
    jni$_.JObject? intentSender,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    return _createChooser$1(
            _class.reference.pointer,
            _id_createChooser$1 as jni$_.JMethodIDPtr,
            _$intent.pointer,
            _$charSequence.pointer,
            _$intentSender.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_clone = _class.instanceMethodId(
    r'clone',
    r'()Ljava/lang/Object;',
  );

  static final _clone = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.Object clone()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? clone() {
    return _clone(reference.pointer, _id_clone as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_cloneFilter = _class.instanceMethodId(
    r'cloneFilter',
    r'()Landroid/content/Intent;',
  );

  static final _cloneFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent cloneFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? cloneFilter() {
    return _cloneFilter(
            reference.pointer, _id_cloneFilter as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeMainActivity = _class.staticMethodId(
    r'makeMainActivity',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeMainActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeMainActivity(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _makeMainActivity(_class.reference.pointer,
            _id_makeMainActivity as jni$_.JMethodIDPtr, _$componentName.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeMainSelectorActivity = _class.staticMethodId(
    r'makeMainSelectorActivity',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _makeMainSelectorActivity = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeMainSelectorActivity(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _makeMainSelectorActivity(
            _class.reference.pointer,
            _id_makeMainSelectorActivity as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeRestartActivityTask = _class.staticMethodId(
    r'makeRestartActivityTask',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeRestartActivityTask = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeRestartActivityTask(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _makeRestartActivityTask(
            _class.reference.pointer,
            _id_makeRestartActivityTask as jni$_.JMethodIDPtr,
            _$componentName.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getIntent = _class.staticMethodId(
    r'getIntent',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent getIntent(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? getIntent(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntent(_class.reference.pointer,
            _id_getIntent as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_parseUri = _class.staticMethodId(
    r'parseUri',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _parseUri = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public android.content.Intent parseUri(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? parseUri(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _parseUri(_class.reference.pointer,
            _id_parseUri as jni$_.JMethodIDPtr, _$string.pointer, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getIntentOld = _class.staticMethodId(
    r'getIntentOld',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntentOld = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent getIntentOld(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? getIntentOld(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntentOld(_class.reference.pointer,
            _id_getIntentOld as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'()Ljava/lang/String;',
  );

  static final _getAction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getAction()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAction() {
    return _getAction(reference.pointer, _id_getAction as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getData = _class.instanceMethodId(
    r'getData',
    r'()Landroid/net/Uri;',
  );

  static final _getData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.net.Uri getData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getData() {
    return _getData(reference.pointer, _id_getData as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataString = _class.instanceMethodId(
    r'getDataString',
    r'()Ljava/lang/String;',
  );

  static final _getDataString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getDataString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDataString() {
    return _getDataString(
            reference.pointer, _id_getDataString as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Ljava/lang/String;',
  );

  static final _getScheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()Ljava/lang/String;',
  );

  static final _getType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getType()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getType() {
    return _getType(reference.pointer, _id_getType as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveType = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _resolveType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String resolveType(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveType(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _resolveType(reference.pointer,
            _id_resolveType as jni$_.JMethodIDPtr, _$context.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveType$1 = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveType$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String resolveType(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveType$1(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    return _resolveType$1(reference.pointer,
            _id_resolveType$1 as jni$_.JMethodIDPtr, _$contentResolver.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveTypeIfNeeded = _class.instanceMethodId(
    r'resolveTypeIfNeeded',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveTypeIfNeeded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveTypeIfNeeded(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    return _resolveTypeIfNeeded(
            reference.pointer,
            _id_resolveTypeIfNeeded as jni$_.JMethodIDPtr,
            _$contentResolver.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getIdentifier = _class.instanceMethodId(
    r'getIdentifier',
    r'()Ljava/lang/String;',
  );

  static final _getIdentifier = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getIdentifier()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getIdentifier() {
    return _getIdentifier(
            reference.pointer, _id_getIdentifier as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean hasCategory(java.lang.String string)`
  bool hasCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasCategory(reference.pointer,
            _id_hasCategory as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_getCategories = _class.instanceMethodId(
    r'getCategories',
    r'()Ljava/util/Set;',
  );

  static final _getCategories = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.Set getCategories()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JString?>? getCategories() {
    return _getCategories(
            reference.pointer, _id_getCategories as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<jni$_.JString?>?>(
            const jni$_.JSetNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getSelector = _class.instanceMethodId(
    r'getSelector',
    r'()Landroid/content/Intent;',
  );

  static final _getSelector = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.Intent getSelector()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getSelector() {
    return _getSelector(
            reference.pointer, _id_getSelector as jni$_.JMethodIDPtr)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getClipData = _class.instanceMethodId(
    r'getClipData',
    r'()Landroid/content/ClipData;',
  );

  static final _getClipData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ClipData getClipData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClipData() {
    return _getClipData(
            reference.pointer, _id_getClipData as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setExtrasClassLoader = _class.instanceMethodId(
    r'setExtrasClassLoader',
    r'(Ljava/lang/ClassLoader;)V',
  );

  static final _setExtrasClassLoader = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setExtrasClassLoader(java.lang.ClassLoader classLoader)`
  void setExtrasClassLoader(
    jni$_.JObject? classLoader,
  ) {
    final _$classLoader = classLoader?.reference ?? jni$_.jNullReference;
    _setExtrasClassLoader(
            reference.pointer,
            _id_setExtrasClassLoader as jni$_.JMethodIDPtr,
            _$classLoader.pointer)
        .check();
  }

  static final _id_hasExtra = _class.instanceMethodId(
    r'hasExtra',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean hasExtra(java.lang.String string)`
  bool hasExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasExtra(reference.pointer, _id_hasExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_hasFileDescriptors = _class.instanceMethodId(
    r'hasFileDescriptors',
    r'()Z',
  );

  static final _hasFileDescriptors = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean hasFileDescriptors()`
  bool hasFileDescriptors() {
    return _hasFileDescriptors(
            reference.pointer, _id_hasFileDescriptors as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getBooleanExtra = _class.instanceMethodId(
    r'getBooleanExtra',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _getBooleanExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public boolean getBooleanExtra(java.lang.String string, boolean z)`
  bool getBooleanExtra(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanExtra(
            reference.pointer,
            _id_getBooleanExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_getByteExtra = _class.instanceMethodId(
    r'getByteExtra',
    r'(Ljava/lang/String;B)B',
  );

  static final _getByteExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallByteMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public byte getByteExtra(java.lang.String string, byte b)`
  int getByteExtra(
    jni$_.JString? string,
    int b,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getByteExtra(reference.pointer,
            _id_getByteExtra as jni$_.JMethodIDPtr, _$string.pointer, b)
        .byte;
  }

  static final _id_getShortExtra = _class.instanceMethodId(
    r'getShortExtra',
    r'(Ljava/lang/String;S)S',
  );

  static final _getShortExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallShortMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public short getShortExtra(java.lang.String string, short s)`
  int getShortExtra(
    jni$_.JString? string,
    int s,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getShortExtra(reference.pointer,
            _id_getShortExtra as jni$_.JMethodIDPtr, _$string.pointer, s)
        .short;
  }

  static final _id_getCharExtra = _class.instanceMethodId(
    r'getCharExtra',
    r'(Ljava/lang/String;C)C',
  );

  static final _getCharExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallCharMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public char getCharExtra(java.lang.String string, char c)`
  int getCharExtra(
    jni$_.JString? string,
    int c,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharExtra(reference.pointer,
            _id_getCharExtra as jni$_.JMethodIDPtr, _$string.pointer, c)
        .char;
  }

  static final _id_getIntExtra = _class.instanceMethodId(
    r'getIntExtra',
    r'(Ljava/lang/String;I)I',
  );

  static final _getIntExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public int getIntExtra(java.lang.String string, int i)`
  int getIntExtra(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntExtra(reference.pointer,
            _id_getIntExtra as jni$_.JMethodIDPtr, _$string.pointer, i)
        .integer;
  }

  static final _id_getLongExtra = _class.instanceMethodId(
    r'getLongExtra',
    r'(Ljava/lang/String;J)J',
  );

  static final _getLongExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public long getLongExtra(java.lang.String string, long j)`
  int getLongExtra(
    jni$_.JString? string,
    int j,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLongExtra(reference.pointer,
            _id_getLongExtra as jni$_.JMethodIDPtr, _$string.pointer, j)
        .long;
  }

  static final _id_getFloatExtra = _class.instanceMethodId(
    r'getFloatExtra',
    r'(Ljava/lang/String;F)F',
  );

  static final _getFloatExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallFloatMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public float getFloatExtra(java.lang.String string, float f)`
  double getFloatExtra(
    jni$_.JString? string,
    double f,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFloatExtra(reference.pointer,
            _id_getFloatExtra as jni$_.JMethodIDPtr, _$string.pointer, f)
        .float;
  }

  static final _id_getDoubleExtra = _class.instanceMethodId(
    r'getDoubleExtra',
    r'(Ljava/lang/String;D)D',
  );

  static final _getDoubleExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public double getDoubleExtra(java.lang.String string, double d)`
  double getDoubleExtra(
    jni$_.JString? string,
    double d,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDoubleExtra(reference.pointer,
            _id_getDoubleExtra as jni$_.JMethodIDPtr, _$string.pointer, d)
        .doubleFloat;
  }

  static final _id_getStringExtra = _class.instanceMethodId(
    r'getStringExtra',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getStringExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String getStringExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getStringExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringExtra(reference.pointer,
            _id_getStringExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCharSequenceExtra = _class.instanceMethodId(
    r'getCharSequenceExtra',
    r'(Ljava/lang/String;)Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCharSequenceExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceExtra(reference.pointer,
            _id_getCharSequenceExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParcelableExtra = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;)Landroid/os/Parcelable;',
  );

  static final _getParcelableExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public T getParcelableExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getParcelableExtra<$T extends jni$_.JObject?>(
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableExtra(reference.pointer,
            _id_getParcelableExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getParcelableExtra$1 = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getParcelableExtra$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public T getParcelableExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getParcelableExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableExtra$1(
            reference.pointer,
            _id_getParcelableExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getParcelableArrayExtra = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;)[Landroid/os/Parcelable;',
  );

  static final _getParcelableArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getParcelableArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayExtra(reference.pointer,
            _id_getParcelableArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getParcelableArrayExtra$1 = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;',
  );

  static final _getParcelableArrayExtra$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object[] getParcelableArrayExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<$T?>? getParcelableArrayExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayExtra$1(
            reference.pointer,
            _id_getParcelableArrayExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<jni$_.JArray<$T?>?>(
            jni$_.JArrayNullableType<$T?>(T.nullableType));
  }

  static final _id_getParcelableArrayListExtra = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParcelableArrayListExtra<$T extends jni$_.JObject?>(
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayListExtra(
            reference.pointer,
            _id_getParcelableArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParcelableArrayListExtra$1 = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParcelableArrayListExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayListExtra$1(
            reference.pointer,
            _id_getParcelableArrayListExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSerializableExtra = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.io.Serializable getSerializableExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSerializableExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSerializableExtra(reference.pointer,
            _id_getSerializableExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSerializableExtra$1 = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public T getSerializableExtra(java.lang.String string, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSerializableExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSerializableExtra$1(
            reference.pointer,
            _id_getSerializableExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$class$.pointer)
        .object<$T?>(T.nullableType);
  }

  static final _id_getIntegerArrayListExtra = _class.instanceMethodId(
    r'getIntegerArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getIntegerArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getIntegerArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getIntegerArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntegerArrayListExtra(
            reference.pointer,
            _id_getIntegerArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getStringArrayListExtra = _class.instanceMethodId(
    r'getStringArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getStringArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getStringArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getStringArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringArrayListExtra(reference.pointer,
            _id_getStringArrayListExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCharSequenceArrayListExtra = _class.instanceMethodId(
    r'getCharSequenceArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getCharSequenceArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCharSequenceArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceArrayListExtra(
            reference.pointer,
            _id_getCharSequenceArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getBooleanArrayExtra = _class.instanceMethodId(
    r'getBooleanArrayExtra',
    r'(Ljava/lang/String;)[Z',
  );

  static final _getBooleanArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean[] getBooleanArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBooleanArray? getBooleanArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanArrayExtra(reference.pointer,
            _id_getBooleanArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JBooleanArray?>(const jni$_.JBooleanArrayNullableType());
  }

  static final _id_getByteArrayExtra = _class.instanceMethodId(
    r'getByteArrayExtra',
    r'(Ljava/lang/String;)[B',
  );

  static final _getByteArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public byte[] getByteArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getByteArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getByteArrayExtra(reference.pointer,
            _id_getByteArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getShortArrayExtra = _class.instanceMethodId(
    r'getShortArrayExtra',
    r'(Ljava/lang/String;)[S',
  );

  static final _getShortArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public short[] getShortArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JShortArray? getShortArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getShortArrayExtra(reference.pointer,
            _id_getShortArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JShortArray?>(const jni$_.JShortArrayNullableType());
  }

  static final _id_getCharArrayExtra = _class.instanceMethodId(
    r'getCharArrayExtra',
    r'(Ljava/lang/String;)[C',
  );

  static final _getCharArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public char[] getCharArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JCharArray? getCharArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharArrayExtra(reference.pointer,
            _id_getCharArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JCharArray?>(const jni$_.JCharArrayNullableType());
  }

  static final _id_getIntArrayExtra = _class.instanceMethodId(
    r'getIntArrayExtra',
    r'(Ljava/lang/String;)[I',
  );

  static final _getIntArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int[] getIntArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? getIntArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntArrayExtra(reference.pointer,
            _id_getIntArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_getLongArrayExtra = _class.instanceMethodId(
    r'getLongArrayExtra',
    r'(Ljava/lang/String;)[J',
  );

  static final _getLongArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public long[] getLongArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLongArray? getLongArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLongArrayExtra(reference.pointer,
            _id_getLongArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JLongArray?>(const jni$_.JLongArrayNullableType());
  }

  static final _id_getFloatArrayExtra = _class.instanceMethodId(
    r'getFloatArrayExtra',
    r'(Ljava/lang/String;)[F',
  );

  static final _getFloatArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public float[] getFloatArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JFloatArray? getFloatArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFloatArrayExtra(reference.pointer,
            _id_getFloatArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JFloatArray?>(const jni$_.JFloatArrayNullableType());
  }

  static final _id_getDoubleArrayExtra = _class.instanceMethodId(
    r'getDoubleArrayExtra',
    r'(Ljava/lang/String;)[D',
  );

  static final _getDoubleArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public double[] getDoubleArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDoubleArray? getDoubleArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDoubleArrayExtra(reference.pointer,
            _id_getDoubleArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JDoubleArray?>(const jni$_.JDoubleArrayNullableType());
  }

  static final _id_getStringArrayExtra = _class.instanceMethodId(
    r'getStringArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getStringArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String[] getStringArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? getStringArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringArrayExtra(reference.pointer,
            _id_getStringArrayExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JArray<jni$_.JString?>?>(
            const jni$_.JArrayNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_getCharSequenceArrayExtra = _class.instanceMethodId(
    r'getCharSequenceArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceArrayExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getCharSequenceArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceArrayExtra(
            reference.pointer,
            _id_getCharSequenceArrayExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JArray<jni$_.JObject?>?>(
            const jni$_.JArrayNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_getBundleExtra = _class.instanceMethodId(
    r'getBundleExtra',
    r'(Ljava/lang/String;)Landroid/os/Bundle;',
  );

  static final _getBundleExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.os.Bundle getBundleExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBundleExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBundleExtra(reference.pointer,
            _id_getBundleExtra as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExtras = _class.instanceMethodId(
    r'getExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getExtras = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle getExtras()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFlags = _class.instanceMethodId(
    r'getFlags',
    r'()I',
  );

  static final _getFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getFlags()`
  int getFlags() {
    return _getFlags(reference.pointer, _id_getFlags as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPackage = _class.instanceMethodId(
    r'getPackage',
    r'()Ljava/lang/String;',
  );

  static final _getPackage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackage() {
    return _getPackage(reference.pointer, _id_getPackage as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getComponent = _class.instanceMethodId(
    r'getComponent',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getComponent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponent() {
    return _getComponent(
            reference.pointer, _id_getComponent as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSourceBounds = _class.instanceMethodId(
    r'getSourceBounds',
    r'()Landroid/graphics/Rect;',
  );

  static final _getSourceBounds = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Rect getSourceBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSourceBounds() {
    return _getSourceBounds(
            reference.pointer, _id_getSourceBounds as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;',
  );

  static final _resolveActivity = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? resolveActivity(
    jni$_.JObject? packageManager,
  ) {
    final _$packageManager = packageManager?.reference ?? jni$_.jNullReference;
    return _resolveActivity(reference.pointer,
            _id_resolveActivity as jni$_.JMethodIDPtr, _$packageManager.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_resolveActivityInfo = _class.instanceMethodId(
    r'resolveActivityInfo',
    r'(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _resolveActivityInfo = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? resolveActivityInfo(
    jni$_.JObject? packageManager,
    int i,
  ) {
    final _$packageManager = packageManager?.reference ?? jni$_.jNullReference;
    return _resolveActivityInfo(
            reference.pointer,
            _id_resolveActivityInfo as jni$_.JMethodIDPtr,
            _$packageManager.pointer,
            i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setAction = _class.instanceMethodId(
    r'setAction',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setAction = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setAction(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setAction(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAction(reference.pointer, _id_setAction as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setData = _class.instanceMethodId(
    r'setData',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setData(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setData(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setData(
            reference.pointer, _id_setData as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndNormalize = _class.instanceMethodId(
    r'setDataAndNormalize',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setDataAndNormalize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setDataAndNormalize(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndNormalize(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setDataAndNormalize(reference.pointer,
            _id_setDataAndNormalize as jni$_.JMethodIDPtr, _$uri.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setType = _class.instanceMethodId(
    r'setType',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setType(reference.pointer, _id_setType as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setTypeAndNormalize = _class.instanceMethodId(
    r'setTypeAndNormalize',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setTypeAndNormalize = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setTypeAndNormalize(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setTypeAndNormalize(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setTypeAndNormalize(reference.pointer,
            _id_setTypeAndNormalize as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndType = _class.instanceMethodId(
    r'setDataAndType',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndType(
    jni$_.JObject? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDataAndType(
            reference.pointer,
            _id_setDataAndType as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndTypeAndNormalize = _class.instanceMethodId(
    r'setDataAndTypeAndNormalize',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndTypeAndNormalize =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndTypeAndNormalize(
    jni$_.JObject? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDataAndTypeAndNormalize(
            reference.pointer,
            _id_setDataAndTypeAndNormalize as jni$_.JMethodIDPtr,
            _$uri.pointer,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setIdentifier = _class.instanceMethodId(
    r'setIdentifier',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setIdentifier = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setIdentifier(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setIdentifier(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setIdentifier(reference.pointer,
            _id_setIdentifier as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _addCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent addCategory(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? addCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _addCategory(reference.pointer,
            _id_addCategory as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeCategory = _class.instanceMethodId(
    r'removeCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _removeCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void removeCategory(java.lang.String string)`
  void removeCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _removeCategory(reference.pointer, _id_removeCategory as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_setSelector = _class.instanceMethodId(
    r'setSelector',
    r'(Landroid/content/Intent;)V',
  );

  static final _setSelector = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setSelector(android.content.Intent intent)`
  void setSelector(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setSelector(reference.pointer, _id_setSelector as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .check();
  }

  static final _id_setClipData = _class.instanceMethodId(
    r'setClipData',
    r'(Landroid/content/ClipData;)V',
  );

  static final _setClipData = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setClipData(android.content.ClipData clipData)`
  void setClipData(
    jni$_.JObject? clipData,
  ) {
    final _$clipData = clipData?.reference ?? jni$_.jNullReference;
    _setClipData(reference.pointer, _id_setClipData as jni$_.JMethodIDPtr,
            _$clipData.pointer)
        .check();
  }

  static final _id_putExtra = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Z)Landroid/content/Intent;',
  );

  static final _putExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra(reference.pointer, _id_putExtra as jni$_.JMethodIDPtr,
            _$string.pointer, z ? 1 : 0)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$1 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;B)Landroid/content/Intent;',
  );

  static final _putExtra$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, byte b)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$1(
    jni$_.JString? string,
    int b,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$1(reference.pointer, _id_putExtra$1 as jni$_.JMethodIDPtr,
            _$string.pointer, b)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$2 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;C)Landroid/content/Intent;',
  );

  static final _putExtra$2 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, char c)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$2(
    jni$_.JString? string,
    int c,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$2(reference.pointer, _id_putExtra$2 as jni$_.JMethodIDPtr,
            _$string.pointer, c)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$3 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;S)Landroid/content/Intent;',
  );

  static final _putExtra$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, short s)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$3(
    jni$_.JString? string,
    int s,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$3(reference.pointer, _id_putExtra$3 as jni$_.JMethodIDPtr,
            _$string.pointer, s)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$4 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _putExtra$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$4(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$4(reference.pointer, _id_putExtra$4 as jni$_.JMethodIDPtr,
            _$string.pointer, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$5 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;J)Landroid/content/Intent;',
  );

  static final _putExtra$5 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$5(
    jni$_.JString? string,
    int j,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$5(reference.pointer, _id_putExtra$5 as jni$_.JMethodIDPtr,
            _$string.pointer, j)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$6 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;F)Landroid/content/Intent;',
  );

  static final _putExtra$6 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, float f)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$6(
    jni$_.JString? string,
    double f,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$6(reference.pointer, _id_putExtra$6 as jni$_.JMethodIDPtr,
            _$string.pointer, f)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$7 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;D)Landroid/content/Intent;',
  );

  static final _putExtra$7 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Double
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$7(
    jni$_.JString? string,
    double d,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$7(reference.pointer, _id_putExtra$7 as jni$_.JMethodIDPtr,
            _$string.pointer, d)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$8 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra$8 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$8(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _putExtra$8(reference.pointer, _id_putExtra$8 as jni$_.JMethodIDPtr,
            _$string.pointer, _$string1.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$9 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra$9 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$9(
    jni$_.JString? string,
    jni$_.JObject? charSequence,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _putExtra$9(reference.pointer, _id_putExtra$9 as jni$_.JMethodIDPtr,
            _$string.pointer, _$charSequence.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$10 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra$10 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$10(
    jni$_.JString? string,
    jni$_.JObject? parcelable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$parcelable = parcelable?.reference ?? jni$_.jNullReference;
    return _putExtra$10(
            reference.pointer,
            _id_putExtra$10 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$parcelable.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$11 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra$11 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$11(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JObject?>? parcelables,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$parcelables = parcelables?.reference ?? jni$_.jNullReference;
    return _putExtra$11(
            reference.pointer,
            _id_putExtra$11 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$parcelables.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putParcelableArrayListExtra = _class.instanceMethodId(
    r'putParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putParcelableArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putParcelableArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putParcelableArrayListExtra(
            reference.pointer,
            _id_putParcelableArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putIntegerArrayListExtra = _class.instanceMethodId(
    r'putIntegerArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putIntegerArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putIntegerArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putIntegerArrayListExtra(
            reference.pointer,
            _id_putIntegerArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putStringArrayListExtra = _class.instanceMethodId(
    r'putStringArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putStringArrayListExtra = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putStringArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putStringArrayListExtra(
            reference.pointer,
            _id_putStringArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putCharSequenceArrayListExtra = _class.instanceMethodId(
    r'putCharSequenceArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putCharSequenceArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putCharSequenceArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putCharSequenceArrayListExtra(
            reference.pointer,
            _id_putCharSequenceArrayListExtra as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$arrayList.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$12 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/io/Serializable;)Landroid/content/Intent;',
  );

  static final _putExtra$12 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$12(
    jni$_.JString? string,
    jni$_.JObject? serializable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$serializable = serializable?.reference ?? jni$_.jNullReference;
    return _putExtra$12(
            reference.pointer,
            _id_putExtra$12 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$serializable.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$13 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Z)Landroid/content/Intent;',
  );

  static final _putExtra$13 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, boolean[] zs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$13(
    jni$_.JString? string,
    jni$_.JBooleanArray? zs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$zs = zs?.reference ?? jni$_.jNullReference;
    return _putExtra$13(
            reference.pointer,
            _id_putExtra$13 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$zs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$14 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[B)Landroid/content/Intent;',
  );

  static final _putExtra$14 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$14(
    jni$_.JString? string,
    jni$_.JByteArray? bs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _putExtra$14(
            reference.pointer,
            _id_putExtra$14 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$15 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[S)Landroid/content/Intent;',
  );

  static final _putExtra$15 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, short[] ss)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$15(
    jni$_.JString? string,
    jni$_.JShortArray? ss,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$ss = ss?.reference ?? jni$_.jNullReference;
    return _putExtra$15(
            reference.pointer,
            _id_putExtra$15 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$ss.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$16 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[C)Landroid/content/Intent;',
  );

  static final _putExtra$16 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, char[] cs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$16(
    jni$_.JString? string,
    jni$_.JCharArray? cs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cs = cs?.reference ?? jni$_.jNullReference;
    return _putExtra$16(
            reference.pointer,
            _id_putExtra$16 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$cs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$17 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[I)Landroid/content/Intent;',
  );

  static final _putExtra$17 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$17(
    jni$_.JString? string,
    jni$_.JIntArray? is$,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _putExtra$17(
            reference.pointer,
            _id_putExtra$17 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$is$.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$18 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[J)Landroid/content/Intent;',
  );

  static final _putExtra$18 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, long[] js)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$18(
    jni$_.JString? string,
    jni$_.JLongArray? js,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$js = js?.reference ?? jni$_.jNullReference;
    return _putExtra$18(
            reference.pointer,
            _id_putExtra$18 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$js.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$19 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[F)Landroid/content/Intent;',
  );

  static final _putExtra$19 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, float[] fs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$19(
    jni$_.JString? string,
    jni$_.JFloatArray? fs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fs = fs?.reference ?? jni$_.jNullReference;
    return _putExtra$19(
            reference.pointer,
            _id_putExtra$19 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$fs.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$20 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[D)Landroid/content/Intent;',
  );

  static final _putExtra$20 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$20(
    jni$_.JString? string,
    jni$_.JDoubleArray? ds,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return _putExtra$20(
            reference.pointer,
            _id_putExtra$20 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$ds.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$21 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra$21 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$21(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    return _putExtra$21(
            reference.pointer,
            _id_putExtra$21 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$strings.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$22 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra$22 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$22(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JObject?>? charSequences,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$charSequences = charSequences?.reference ?? jni$_.jNullReference;
    return _putExtra$22(
            reference.pointer,
            _id_putExtra$22 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$charSequences.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$23 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtra$23 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$23(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _putExtra$23(
            reference.pointer,
            _id_putExtra$23 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$bundle.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtras = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _putExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _putExtras(reference.pointer, _id_putExtras as jni$_.JMethodIDPtr,
            _$intent.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtras$1 = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtras$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent putExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtras$1(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _putExtras$1(reference.pointer,
            _id_putExtras$1 as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_replaceExtras = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _replaceExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent replaceExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? replaceExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _replaceExtras(reference.pointer,
            _id_replaceExtras as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_replaceExtras$1 = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _replaceExtras$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent replaceExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? replaceExtras$1(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _replaceExtras$1(reference.pointer,
            _id_replaceExtras$1 as jni$_.JMethodIDPtr, _$bundle.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeExtra = _class.instanceMethodId(
    r'removeExtra',
    r'(Ljava/lang/String;)V',
  );

  static final _removeExtra = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void removeExtra(java.lang.String string)`
  void removeExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _removeExtra(reference.pointer, _id_removeExtra as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_setFlags = _class.instanceMethodId(
    r'setFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _setFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Intent setFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setFlags(
    int i,
  ) {
    return _setFlags(reference.pointer, _id_setFlags as jni$_.JMethodIDPtr, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_addFlags = _class.instanceMethodId(
    r'addFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _addFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Intent addFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? addFlags(
    int i,
  ) {
    return _addFlags(reference.pointer, _id_addFlags as jni$_.JMethodIDPtr, i)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeFlags = _class.instanceMethodId(
    r'removeFlags',
    r'(I)V',
  );

  static final _removeFlags = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void removeFlags(int i)`
  void removeFlags(
    int i,
  ) {
    _removeFlags(reference.pointer, _id_removeFlags as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_setPackage = _class.instanceMethodId(
    r'setPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setPackage = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setPackage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setPackage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setPackage(reference.pointer, _id_setPackage as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setComponent = _class.instanceMethodId(
    r'setComponent',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _setComponent = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setComponent(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setComponent(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _setComponent(reference.pointer,
            _id_setComponent as jni$_.JMethodIDPtr, _$componentName.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClassName = _class.instanceMethodId(
    r'setClassName',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setClassName(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClassName(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setClassName(
            reference.pointer,
            _id_setClassName as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClassName$1 = _class.instanceMethodId(
    r'setClassName',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClassName$1(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _setClassName$1(
            reference.pointer,
            _id_setClassName$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClass = _class.instanceMethodId(
    r'setClass',
    r'(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;',
  );

  static final _setClass = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public android.content.Intent setClass(android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClass(
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _setClass(reference.pointer, _id_setClass as jni$_.JMethodIDPtr,
            _$context.pointer, _$class$.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setSourceBounds = _class.instanceMethodId(
    r'setSourceBounds',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setSourceBounds = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setSourceBounds(android.graphics.Rect rect)`
  void setSourceBounds(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _setSourceBounds(reference.pointer,
            _id_setSourceBounds as jni$_.JMethodIDPtr, _$rect.pointer)
        .check();
  }

  static final _id_fillIn = _class.instanceMethodId(
    r'fillIn',
    r'(Landroid/content/Intent;I)I',
  );

  static final _fillIn = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public int fillIn(android.content.Intent intent, int i)`
  int fillIn(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _fillIn(reference.pointer, _id_fillIn as jni$_.JMethodIDPtr,
            _$intent.pointer, i)
        .integer;
  }

  static final _id_filterEquals = _class.instanceMethodId(
    r'filterEquals',
    r'(Landroid/content/Intent;)Z',
  );

  static final _filterEquals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean filterEquals(android.content.Intent intent)`
  bool filterEquals(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _filterEquals(reference.pointer,
            _id_filterEquals as jni$_.JMethodIDPtr, _$intent.pointer)
        .boolean;
  }

  static final _id_filterHashCode = _class.instanceMethodId(
    r'filterHashCode',
    r'()I',
  );

  static final _filterHashCode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int filterHashCode()`
  int filterHashCode() {
    return _filterHashCode(
            reference.pointer, _id_filterHashCode as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r'toURI',
    r'()Ljava/lang/String;',
  );

  static final _toURI = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toURI()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toURI() {
    return _toURI(reference.pointer, _id_toURI as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toUri = _class.instanceMethodId(
    r'toUri',
    r'(I)Ljava/lang/String;',
  );

  static final _toUri = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.lang.String toUri(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toUri(
    int i,
  ) {
    return _toUri(reference.pointer, _id_toUri as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void readFromParcel(android.os.Parcel parcel)`
  void readFromParcel(
    jni$_.JObject? parcel,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _readFromParcel(reference.pointer, _id_readFromParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer)
        .check();
  }

  static final _id_parseIntent = _class.staticMethodId(
    r'parseIntent',
    r'(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/content/Intent;',
  );

  static final _parseIntent = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? parseIntent(
    jni$_.JObject? resources,
    jni$_.JObject? xmlPullParser,
    jni$_.JObject? attributeSet,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$xmlPullParser = xmlPullParser?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _parseIntent(
            _class.reference.pointer,
            _id_parseIntent as jni$_.JMethodIDPtr,
            _$resources.pointer,
            _$xmlPullParser.pointer,
            _$attributeSet.pointer)
        .object<Intent?>(const $Intent$NullableType());
  }

  static final _id_normalizeMimeType = _class.staticMethodId(
    r'normalizeMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _normalizeMimeType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public java.lang.String normalizeMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? normalizeMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _normalizeMimeType(_class.reference.pointer,
            _id_normalizeMimeType as jni$_.JMethodIDPtr, _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_isMismatchingFilter = _class.instanceMethodId(
    r'isMismatchingFilter',
    r'()Z',
  );

  static final _isMismatchingFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public boolean isMismatchingFilter()`
  bool isMismatchingFilter() {
    return _isMismatchingFilter(
            reference.pointer, _id_isMismatchingFilter as jni$_.JMethodIDPtr)
        .boolean;
  }
}

final class $Intent$NullableType extends jni$_.JObjType<Intent?> {
  @jni$_.internal
  const $Intent$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent;';

  @jni$_.internal
  @core$_.override
  Intent? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Intent.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$NullableType) &&
        other is $Intent$NullableType;
  }
}

final class $Intent$Type extends jni$_.JObjType<Intent> {
  @jni$_.internal
  const $Intent$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent;';

  @jni$_.internal
  @core$_.override
  Intent fromReference(jni$_.JReference reference) => Intent.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent?> get nullableType => const $Intent$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$Type) && other is $Intent$Type;
  }
}

/// from: `android.content.IntentFilter$AuthorityEntry`
class IntentFilter$AuthorityEntry extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<IntentFilter$AuthorityEntry> $type;

  @jni$_.internal
  IntentFilter$AuthorityEntry.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'android/content/IntentFilter$AuthorityEntry');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $IntentFilter$AuthorityEntry$NullableType();
  static const type = $IntentFilter$AuthorityEntry$Type();
  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter$AuthorityEntry(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return IntentFilter$AuthorityEntry.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .reference);
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Ljava/lang/String;',
  );

  static final _getHost = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getHost()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getHost() {
    return _getHost(reference.pointer, _id_getHost as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getPort()`
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_match = _class.instanceMethodId(
    r'match',
    r'(Landroid/net/Uri;)I',
  );

  static final _match = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public int match(android.net.Uri uri)`
  int match(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _match(
            reference.pointer, _id_match as jni$_.JMethodIDPtr, _$uri.pointer)
        .integer;
  }
}

final class $IntentFilter$AuthorityEntry$NullableType
    extends jni$_.JObjType<IntentFilter$AuthorityEntry?> {
  @jni$_.internal
  const $IntentFilter$AuthorityEntry$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/IntentFilter$AuthorityEntry;';

  @jni$_.internal
  @core$_.override
  IntentFilter$AuthorityEntry? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : IntentFilter$AuthorityEntry.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<IntentFilter$AuthorityEntry?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($IntentFilter$AuthorityEntry$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilter$AuthorityEntry$NullableType) &&
        other is $IntentFilter$AuthorityEntry$NullableType;
  }
}

final class $IntentFilter$AuthorityEntry$Type
    extends jni$_.JObjType<IntentFilter$AuthorityEntry> {
  @jni$_.internal
  const $IntentFilter$AuthorityEntry$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/IntentFilter$AuthorityEntry;';

  @jni$_.internal
  @core$_.override
  IntentFilter$AuthorityEntry fromReference(jni$_.JReference reference) =>
      IntentFilter$AuthorityEntry.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<IntentFilter$AuthorityEntry?> get nullableType =>
      const $IntentFilter$AuthorityEntry$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($IntentFilter$AuthorityEntry$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilter$AuthorityEntry$Type) &&
        other is $IntentFilter$AuthorityEntry$Type;
  }
}

/// from: `android.content.IntentFilter$MalformedMimeTypeException`
class IntentFilter$MalformedMimeTypeException extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<IntentFilter$MalformedMimeTypeException> $type;

  @jni$_.internal
  IntentFilter$MalformedMimeTypeException.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'android/content/IntentFilter$MalformedMimeTypeException');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $IntentFilter$MalformedMimeTypeException$NullableType();
  static const type = $IntentFilter$MalformedMimeTypeException$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter$MalformedMimeTypeException() {
    return IntentFilter$MalformedMimeTypeException.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter$MalformedMimeTypeException.new$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return IntentFilter$MalformedMimeTypeException.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .reference);
  }
}

final class $IntentFilter$MalformedMimeTypeException$NullableType
    extends jni$_.JObjType<IntentFilter$MalformedMimeTypeException?> {
  @jni$_.internal
  const $IntentFilter$MalformedMimeTypeException$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/content/IntentFilter$MalformedMimeTypeException;';

  @jni$_.internal
  @core$_.override
  IntentFilter$MalformedMimeTypeException? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : IntentFilter$MalformedMimeTypeException.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<IntentFilter$MalformedMimeTypeException?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($IntentFilter$MalformedMimeTypeException$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($IntentFilter$MalformedMimeTypeException$NullableType) &&
        other is $IntentFilter$MalformedMimeTypeException$NullableType;
  }
}

final class $IntentFilter$MalformedMimeTypeException$Type
    extends jni$_.JObjType<IntentFilter$MalformedMimeTypeException> {
  @jni$_.internal
  const $IntentFilter$MalformedMimeTypeException$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/content/IntentFilter$MalformedMimeTypeException;';

  @jni$_.internal
  @core$_.override
  IntentFilter$MalformedMimeTypeException fromReference(
          jni$_.JReference reference) =>
      IntentFilter$MalformedMimeTypeException.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<IntentFilter$MalformedMimeTypeException?> get nullableType =>
      const $IntentFilter$MalformedMimeTypeException$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($IntentFilter$MalformedMimeTypeException$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($IntentFilter$MalformedMimeTypeException$Type) &&
        other is $IntentFilter$MalformedMimeTypeException$Type;
  }
}

/// from: `android.content.IntentFilter`
class IntentFilter extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<IntentFilter> $type;

  @jni$_.internal
  IntentFilter.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/IntentFilter');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $IntentFilter$NullableType();
  static const type = $IntentFilter$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int MATCH_ADJUSTMENT_MASK`
  static const MATCH_ADJUSTMENT_MASK = 65535;

  /// from: `static public final int MATCH_ADJUSTMENT_NORMAL`
  static const MATCH_ADJUSTMENT_NORMAL = 32768;

  /// from: `static public final int MATCH_CATEGORY_EMPTY`
  static const MATCH_CATEGORY_EMPTY = 1048576;

  /// from: `static public final int MATCH_CATEGORY_HOST`
  static const MATCH_CATEGORY_HOST = 3145728;

  /// from: `static public final int MATCH_CATEGORY_MASK`
  static const MATCH_CATEGORY_MASK = 268369920;

  /// from: `static public final int MATCH_CATEGORY_PATH`
  static const MATCH_CATEGORY_PATH = 5242880;

  /// from: `static public final int MATCH_CATEGORY_PORT`
  static const MATCH_CATEGORY_PORT = 4194304;

  /// from: `static public final int MATCH_CATEGORY_SCHEME`
  static const MATCH_CATEGORY_SCHEME = 2097152;

  /// from: `static public final int MATCH_CATEGORY_SCHEME_SPECIFIC_PART`
  static const MATCH_CATEGORY_SCHEME_SPECIFIC_PART = 5767168;

  /// from: `static public final int MATCH_CATEGORY_TYPE`
  static const MATCH_CATEGORY_TYPE = 6291456;

  /// from: `static public final int NO_MATCH_ACTION`
  static const NO_MATCH_ACTION = -3;

  /// from: `static public final int NO_MATCH_CATEGORY`
  static const NO_MATCH_CATEGORY = -4;

  /// from: `static public final int NO_MATCH_DATA`
  static const NO_MATCH_DATA = -2;

  /// from: `static public final int NO_MATCH_TYPE`
  static const NO_MATCH_TYPE = -1;

  /// from: `static public final int SYSTEM_HIGH_PRIORITY`
  static const SYSTEM_HIGH_PRIORITY = 1000;

  /// from: `static public final int SYSTEM_LOW_PRIORITY`
  static const SYSTEM_LOW_PRIORITY = -1000;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter() {
    return IntentFilter.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new$1(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return IntentFilter.fromReference(_new$1(_class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new$2(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return IntentFilter.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Landroid/content/IntentFilter;)V',
  );

  static final _new$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  factory IntentFilter.new$3(
    IntentFilter? intentFilter,
  ) {
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return IntentFilter.fromReference(_new$3(_class.reference.pointer,
            _id_new$3 as jni$_.JMethodIDPtr, _$intentFilter.pointer)
        .reference);
  }

  static final _id_create = _class.staticMethodId(
    r'create',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;',
  );

  static final _create = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.IntentFilter create(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static IntentFilter? create(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _create(_class.reference.pointer, _id_create as jni$_.JMethodIDPtr,
            _$string.pointer, _$string1.pointer)
        .object<IntentFilter?>(const $IntentFilter$NullableType());
  }

  static final _id_setPriority = _class.instanceMethodId(
    r'setPriority',
    r'(I)V',
  );

  static final _setPriority = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setPriority(int i)`
  void setPriority(
    int i,
  ) {
    _setPriority(reference.pointer, _id_setPriority as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_getPriority = _class.instanceMethodId(
    r'getPriority',
    r'()I',
  );

  static final _getPriority = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getPriority()`
  int getPriority() {
    return _getPriority(
            reference.pointer, _id_getPriority as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_addAction = _class.instanceMethodId(
    r'addAction',
    r'(Ljava/lang/String;)V',
  );

  static final _addAction = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addAction(java.lang.String string)`
  void addAction(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _addAction(reference.pointer, _id_addAction as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_countActions = _class.instanceMethodId(
    r'countActions',
    r'()I',
  );

  static final _countActions = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int countActions()`
  int countActions() {
    return _countActions(
            reference.pointer, _id_countActions as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'(I)Ljava/lang/String;',
  );

  static final _getAction = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getAction(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAction(
    int i,
  ) {
    return _getAction(reference.pointer, _id_getAction as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hasAction = _class.instanceMethodId(
    r'hasAction',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasAction = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasAction(java.lang.String string)`
  bool hasAction(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasAction(reference.pointer, _id_hasAction as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_matchAction = _class.instanceMethodId(
    r'matchAction',
    r'(Ljava/lang/String;)Z',
  );

  static final _matchAction = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean matchAction(java.lang.String string)`
  bool matchAction(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _matchAction(reference.pointer,
            _id_matchAction as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_actionsIterator = _class.instanceMethodId(
    r'actionsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _actionsIterator = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator actionsIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<jni$_.JString?>? actionsIterator() {
    return _actionsIterator(
            reference.pointer, _id_actionsIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<jni$_.JString?>?>(
            const jni$_.JIteratorNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_addDataType = _class.instanceMethodId(
    r'addDataType',
    r'(Ljava/lang/String;)V',
  );

  static final _addDataType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addDataType(java.lang.String string)`
  void addDataType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _addDataType(reference.pointer, _id_addDataType as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_hasDataType = _class.instanceMethodId(
    r'hasDataType',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasDataType(java.lang.String string)`
  bool hasDataType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasDataType(reference.pointer,
            _id_hasDataType as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_countDataTypes = _class.instanceMethodId(
    r'countDataTypes',
    r'()I',
  );

  static final _countDataTypes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int countDataTypes()`
  int countDataTypes() {
    return _countDataTypes(
            reference.pointer, _id_countDataTypes as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataType = _class.instanceMethodId(
    r'getDataType',
    r'(I)Ljava/lang/String;',
  );

  static final _getDataType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getDataType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDataType(
    int i,
  ) {
    return _getDataType(
            reference.pointer, _id_getDataType as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_typesIterator = _class.instanceMethodId(
    r'typesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _typesIterator = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator typesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<jni$_.JString?>? typesIterator() {
    return _typesIterator(
            reference.pointer, _id_typesIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<jni$_.JString?>?>(
            const jni$_.JIteratorNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_addDataScheme = _class.instanceMethodId(
    r'addDataScheme',
    r'(Ljava/lang/String;)V',
  );

  static final _addDataScheme = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addDataScheme(java.lang.String string)`
  void addDataScheme(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _addDataScheme(reference.pointer, _id_addDataScheme as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_countDataSchemes = _class.instanceMethodId(
    r'countDataSchemes',
    r'()I',
  );

  static final _countDataSchemes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int countDataSchemes()`
  int countDataSchemes() {
    return _countDataSchemes(
            reference.pointer, _id_countDataSchemes as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataScheme = _class.instanceMethodId(
    r'getDataScheme',
    r'(I)Ljava/lang/String;',
  );

  static final _getDataScheme = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getDataScheme(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDataScheme(
    int i,
  ) {
    return _getDataScheme(
            reference.pointer, _id_getDataScheme as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hasDataScheme = _class.instanceMethodId(
    r'hasDataScheme',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataScheme = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasDataScheme(java.lang.String string)`
  bool hasDataScheme(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasDataScheme(reference.pointer,
            _id_hasDataScheme as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_schemesIterator = _class.instanceMethodId(
    r'schemesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _schemesIterator = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator schemesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<jni$_.JString?>? schemesIterator() {
    return _schemesIterator(
            reference.pointer, _id_schemesIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<jni$_.JString?>?>(
            const jni$_.JIteratorNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_addDataSchemeSpecificPart = _class.instanceMethodId(
    r'addDataSchemeSpecificPart',
    r'(Ljava/lang/String;I)V',
  );

  static final _addDataSchemeSpecificPart = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void addDataSchemeSpecificPart(java.lang.String string, int i)`
  void addDataSchemeSpecificPart(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _addDataSchemeSpecificPart(
            reference.pointer,
            _id_addDataSchemeSpecificPart as jni$_.JMethodIDPtr,
            _$string.pointer,
            i)
        .check();
  }

  static final _id_countDataSchemeSpecificParts = _class.instanceMethodId(
    r'countDataSchemeSpecificParts',
    r'()I',
  );

  static final _countDataSchemeSpecificParts =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final int countDataSchemeSpecificParts()`
  int countDataSchemeSpecificParts() {
    return _countDataSchemeSpecificParts(reference.pointer,
            _id_countDataSchemeSpecificParts as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataSchemeSpecificPart = _class.instanceMethodId(
    r'getDataSchemeSpecificPart',
    r'(I)Landroid/os/PatternMatcher;',
  );

  static final _getDataSchemeSpecificPart = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.os.PatternMatcher getDataSchemeSpecificPart(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataSchemeSpecificPart(
    int i,
  ) {
    return _getDataSchemeSpecificPart(reference.pointer,
            _id_getDataSchemeSpecificPart as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_hasDataSchemeSpecificPart = _class.instanceMethodId(
    r'hasDataSchemeSpecificPart',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataSchemeSpecificPart = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasDataSchemeSpecificPart(java.lang.String string)`
  bool hasDataSchemeSpecificPart(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasDataSchemeSpecificPart(
            reference.pointer,
            _id_hasDataSchemeSpecificPart as jni$_.JMethodIDPtr,
            _$string.pointer)
        .boolean;
  }

  static final _id_schemeSpecificPartsIterator = _class.instanceMethodId(
    r'schemeSpecificPartsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _schemeSpecificPartsIterator =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final java.util.Iterator schemeSpecificPartsIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<jni$_.JObject?>? schemeSpecificPartsIterator() {
    return _schemeSpecificPartsIterator(reference.pointer,
            _id_schemeSpecificPartsIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<jni$_.JObject?>?>(
            const jni$_.JIteratorNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_addDataAuthority = _class.instanceMethodId(
    r'addDataAuthority',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _addDataAuthority = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addDataAuthority(java.lang.String string, java.lang.String string1)`
  void addDataAuthority(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _addDataAuthority(
            reference.pointer,
            _id_addDataAuthority as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer)
        .check();
  }

  static final _id_countDataAuthorities = _class.instanceMethodId(
    r'countDataAuthorities',
    r'()I',
  );

  static final _countDataAuthorities = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int countDataAuthorities()`
  int countDataAuthorities() {
    return _countDataAuthorities(
            reference.pointer, _id_countDataAuthorities as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataAuthority = _class.instanceMethodId(
    r'getDataAuthority',
    r'(I)Landroid/content/IntentFilter$AuthorityEntry;',
  );

  static final _getDataAuthority = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.IntentFilter$AuthorityEntry getDataAuthority(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  IntentFilter$AuthorityEntry? getDataAuthority(
    int i,
  ) {
    return _getDataAuthority(
            reference.pointer, _id_getDataAuthority as jni$_.JMethodIDPtr, i)
        .object<IntentFilter$AuthorityEntry?>(
            const $IntentFilter$AuthorityEntry$NullableType());
  }

  static final _id_hasDataAuthority = _class.instanceMethodId(
    r'hasDataAuthority',
    r'(Landroid/net/Uri;)Z',
  );

  static final _hasDataAuthority = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasDataAuthority(android.net.Uri uri)`
  bool hasDataAuthority(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _hasDataAuthority(reference.pointer,
            _id_hasDataAuthority as jni$_.JMethodIDPtr, _$uri.pointer)
        .boolean;
  }

  static final _id_authoritiesIterator = _class.instanceMethodId(
    r'authoritiesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _authoritiesIterator = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator authoritiesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<IntentFilter$AuthorityEntry?>? authoritiesIterator() {
    return _authoritiesIterator(
            reference.pointer, _id_authoritiesIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<IntentFilter$AuthorityEntry?>?>(
            const jni$_.JIteratorNullableType<IntentFilter$AuthorityEntry?>(
                $IntentFilter$AuthorityEntry$NullableType()));
  }

  static final _id_addDataPath = _class.instanceMethodId(
    r'addDataPath',
    r'(Ljava/lang/String;I)V',
  );

  static final _addDataPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void addDataPath(java.lang.String string, int i)`
  void addDataPath(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _addDataPath(reference.pointer, _id_addDataPath as jni$_.JMethodIDPtr,
            _$string.pointer, i)
        .check();
  }

  static final _id_countDataPaths = _class.instanceMethodId(
    r'countDataPaths',
    r'()I',
  );

  static final _countDataPaths = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int countDataPaths()`
  int countDataPaths() {
    return _countDataPaths(
            reference.pointer, _id_countDataPaths as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getDataPath = _class.instanceMethodId(
    r'getDataPath',
    r'(I)Landroid/os/PatternMatcher;',
  );

  static final _getDataPath = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.os.PatternMatcher getDataPath(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataPath(
    int i,
  ) {
    return _getDataPath(
            reference.pointer, _id_getDataPath as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_hasDataPath = _class.instanceMethodId(
    r'hasDataPath',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasDataPath = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasDataPath(java.lang.String string)`
  bool hasDataPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasDataPath(reference.pointer,
            _id_hasDataPath as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_pathsIterator = _class.instanceMethodId(
    r'pathsIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _pathsIterator = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator pathsIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<jni$_.JObject?>? pathsIterator() {
    return _pathsIterator(
            reference.pointer, _id_pathsIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<jni$_.JObject?>?>(
            const jni$_.JIteratorNullableType<jni$_.JObject?>(
                jni$_.JObjectNullableType()));
  }

  static final _id_addUriRelativeFilterGroup = _class.instanceMethodId(
    r'addUriRelativeFilterGroup',
    r'(Landroid/content/UriRelativeFilterGroup;)V',
  );

  static final _addUriRelativeFilterGroup = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addUriRelativeFilterGroup(android.content.UriRelativeFilterGroup uriRelativeFilterGroup)`
  void addUriRelativeFilterGroup(
    jni$_.JObject? uriRelativeFilterGroup,
  ) {
    final _$uriRelativeFilterGroup =
        uriRelativeFilterGroup?.reference ?? jni$_.jNullReference;
    _addUriRelativeFilterGroup(
            reference.pointer,
            _id_addUriRelativeFilterGroup as jni$_.JMethodIDPtr,
            _$uriRelativeFilterGroup.pointer)
        .check();
  }

  static final _id_countUriRelativeFilterGroups = _class.instanceMethodId(
    r'countUriRelativeFilterGroups',
    r'()I',
  );

  static final _countUriRelativeFilterGroups =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final int countUriRelativeFilterGroups()`
  int countUriRelativeFilterGroups() {
    return _countUriRelativeFilterGroups(reference.pointer,
            _id_countUriRelativeFilterGroups as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getUriRelativeFilterGroup = _class.instanceMethodId(
    r'getUriRelativeFilterGroup',
    r'(I)Landroid/content/UriRelativeFilterGroup;',
  );

  static final _getUriRelativeFilterGroup = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.UriRelativeFilterGroup getUriRelativeFilterGroup(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getUriRelativeFilterGroup(
    int i,
  ) {
    return _getUriRelativeFilterGroup(reference.pointer,
            _id_getUriRelativeFilterGroup as jni$_.JMethodIDPtr, i)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_clearUriRelativeFilterGroups = _class.instanceMethodId(
    r'clearUriRelativeFilterGroups',
    r'()V',
  );

  static final _clearUriRelativeFilterGroups =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final void clearUriRelativeFilterGroups()`
  void clearUriRelativeFilterGroups() {
    _clearUriRelativeFilterGroups(reference.pointer,
            _id_clearUriRelativeFilterGroups as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_matchDataAuthority = _class.instanceMethodId(
    r'matchDataAuthority',
    r'(Landroid/net/Uri;)I',
  );

  static final _matchDataAuthority = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int matchDataAuthority(android.net.Uri uri)`
  int matchDataAuthority(
    jni$_.JObject? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _matchDataAuthority(reference.pointer,
            _id_matchDataAuthority as jni$_.JMethodIDPtr, _$uri.pointer)
        .integer;
  }

  static final _id_matchData = _class.instanceMethodId(
    r'matchData',
    r'(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)I',
  );

  static final _matchData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int matchData(java.lang.String string, java.lang.String string1, android.net.Uri uri)`
  int matchData(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? uri,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _matchData(reference.pointer, _id_matchData as jni$_.JMethodIDPtr,
            _$string.pointer, _$string1.pointer, _$uri.pointer)
        .integer;
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _addCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void addCategory(java.lang.String string)`
  void addCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _addCategory(reference.pointer, _id_addCategory as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_countCategories = _class.instanceMethodId(
    r'countCategories',
    r'()I',
  );

  static final _countCategories = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int countCategories()`
  int countCategories() {
    return _countCategories(
            reference.pointer, _id_countCategories as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCategory = _class.instanceMethodId(
    r'getCategory',
    r'(I)Ljava/lang/String;',
  );

  static final _getCategory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getCategory(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCategory(
    int i,
  ) {
    return _getCategory(
            reference.pointer, _id_getCategory as jni$_.JMethodIDPtr, i)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean hasCategory(java.lang.String string)`
  bool hasCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasCategory(reference.pointer,
            _id_hasCategory as jni$_.JMethodIDPtr, _$string.pointer)
        .boolean;
  }

  static final _id_categoriesIterator = _class.instanceMethodId(
    r'categoriesIterator',
    r'()Ljava/util/Iterator;',
  );

  static final _categoriesIterator = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Iterator categoriesIterator()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIterator<jni$_.JString?>? categoriesIterator() {
    return _categoriesIterator(
            reference.pointer, _id_categoriesIterator as jni$_.JMethodIDPtr)
        .object<jni$_.JIterator<jni$_.JString?>?>(
            const jni$_.JIteratorNullableType<jni$_.JString?>(
                jni$_.JStringNullableType()));
  }

  static final _id_matchCategories = _class.instanceMethodId(
    r'matchCategories',
    r'(Ljava/util/Set;)Ljava/lang/String;',
  );

  static final _matchCategories = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String matchCategories(java.util.Set set)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? matchCategories(
    jni$_.JSet<jni$_.JString?>? set,
  ) {
    final _$set = set?.reference ?? jni$_.jNullReference;
    return _matchCategories(reference.pointer,
            _id_matchCategories as jni$_.JMethodIDPtr, _$set.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_asPredicate = _class.instanceMethodId(
    r'asPredicate',
    r'()Ljava/util/function/Predicate;',
  );

  static final _asPredicate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.function.Predicate asPredicate()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? asPredicate() {
    return _asPredicate(
            reference.pointer, _id_asPredicate as jni$_.JMethodIDPtr)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_asPredicateWithTypeResolution = _class.instanceMethodId(
    r'asPredicateWithTypeResolution',
    r'(Landroid/content/ContentResolver;)Ljava/util/function/Predicate;',
  );

  static final _asPredicateWithTypeResolution =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? asPredicateWithTypeResolution(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    return _asPredicateWithTypeResolution(
            reference.pointer,
            _id_asPredicateWithTypeResolution as jni$_.JMethodIDPtr,
            _$contentResolver.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_match = _class.instanceMethodId(
    r'match',
    r'(Landroid/content/ContentResolver;Landroid/content/Intent;ZLjava/lang/String;)I',
  );

  static final _match = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int match(android.content.ContentResolver contentResolver, android.content.Intent intent, boolean z, java.lang.String string)`
  int match(
    jni$_.JObject? contentResolver,
    Intent? intent,
    bool z,
    jni$_.JString? string,
  ) {
    final _$contentResolver =
        contentResolver?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _match(
            reference.pointer,
            _id_match as jni$_.JMethodIDPtr,
            _$contentResolver.pointer,
            _$intent.pointer,
            z ? 1 : 0,
            _$string.pointer)
        .integer;
  }

  static final _id_match$1 = _class.instanceMethodId(
    r'match',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/util/Set;Ljava/lang/String;)I',
  );

  static final _match$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int match(java.lang.String string, java.lang.String string1, java.lang.String string2, android.net.Uri uri, java.util.Set set, java.lang.String string3)`
  int match$1(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JString? string2,
    jni$_.JObject? uri,
    jni$_.JSet<jni$_.JString?>? set,
    jni$_.JString? string3,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$string3 = string3?.reference ?? jni$_.jNullReference;
    return _match$1(
            reference.pointer,
            _id_match$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$string1.pointer,
            _$string2.pointer,
            _$uri.pointer,
            _$set.pointer,
            _$string3.pointer)
        .integer;
  }

  static final _id_writeToXml = _class.instanceMethodId(
    r'writeToXml',
    r'(Lorg/xmlpull/v1/XmlSerializer;)V',
  );

  static final _writeToXml = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void writeToXml(org.xmlpull.v1.XmlSerializer xmlSerializer)`
  void writeToXml(
    jni$_.JObject? xmlSerializer,
  ) {
    final _$xmlSerializer = xmlSerializer?.reference ?? jni$_.jNullReference;
    _writeToXml(reference.pointer, _id_writeToXml as jni$_.JMethodIDPtr,
            _$xmlSerializer.pointer)
        .check();
  }

  static final _id_readFromXml = _class.instanceMethodId(
    r'readFromXml',
    r'(Lorg/xmlpull/v1/XmlPullParser;)V',
  );

  static final _readFromXml = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void readFromXml(org.xmlpull.v1.XmlPullParser xmlPullParser)`
  void readFromXml(
    jni$_.JObject? xmlPullParser,
  ) {
    final _$xmlPullParser = xmlPullParser?.reference ?? jni$_.jNullReference;
    _readFromXml(reference.pointer, _id_readFromXml as jni$_.JMethodIDPtr,
            _$xmlPullParser.pointer)
        .check();
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Landroid/util/Printer;Ljava/lang/String;)V',
  );

  static final _dump = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void dump(android.util.Printer printer, java.lang.String string)`
  void dump(
    jni$_.JObject? printer,
    jni$_.JString? string,
  ) {
    final _$printer = printer?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _dump(reference.pointer, _id_dump as jni$_.JMethodIDPtr, _$printer.pointer,
            _$string.pointer)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }
}

final class $IntentFilter$NullableType extends jni$_.JObjType<IntentFilter?> {
  @jni$_.internal
  const $IntentFilter$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/IntentFilter;';

  @jni$_.internal
  @core$_.override
  IntentFilter? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : IntentFilter.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<IntentFilter?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($IntentFilter$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilter$NullableType) &&
        other is $IntentFilter$NullableType;
  }
}

final class $IntentFilter$Type extends jni$_.JObjType<IntentFilter> {
  @jni$_.internal
  const $IntentFilter$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/IntentFilter;';

  @jni$_.internal
  @core$_.override
  IntentFilter fromReference(jni$_.JReference reference) =>
      IntentFilter.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<IntentFilter?> get nullableType =>
      const $IntentFilter$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($IntentFilter$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentFilter$Type) &&
        other is $IntentFilter$Type;
  }
}

/// from: `android.os.ParcelUuid`
class ParcelUuid extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ParcelUuid> $type;

  @jni$_.internal
  ParcelUuid.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/os/ParcelUuid');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ParcelUuid$NullableType();
  static const type = $ParcelUuid$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_new$ = _class.constructorId(
    r'(Ljava/util/UUID;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.util.UUID uUID)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ParcelUuid(
    UUID? uUID,
  ) {
    final _$uUID = uUID?.reference ?? jni$_.jNullReference;
    return ParcelUuid.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$uUID.pointer)
        .reference);
  }

  static final _id_fromString = _class.staticMethodId(
    r'fromString',
    r'(Ljava/lang/String;)Landroid/os/ParcelUuid;',
  );

  static final _fromString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.os.ParcelUuid fromString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static ParcelUuid? fromString(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fromString(_class.reference.pointer,
            _id_fromString as jni$_.JMethodIDPtr, _$string.pointer)
        .object<ParcelUuid?>(const $ParcelUuid$NullableType());
  }

  static final _id_getUuid = _class.instanceMethodId(
    r'getUuid',
    r'()Ljava/util/UUID;',
  );

  static final _getUuid = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.util.UUID getUuid()`
  /// The returned object must be released after use, by calling the [release] method.
  UUID? getUuid() {
    return _getUuid(reference.pointer, _id_getUuid as jni$_.JMethodIDPtr)
        .object<UUID?>(const $UUID$NullableType());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr,
            _$parcel.pointer, i)
        .check();
  }
}

final class $ParcelUuid$NullableType extends jni$_.JObjType<ParcelUuid?> {
  @jni$_.internal
  const $ParcelUuid$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/ParcelUuid;';

  @jni$_.internal
  @core$_.override
  ParcelUuid? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ParcelUuid.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ParcelUuid?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ParcelUuid$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ParcelUuid$NullableType) &&
        other is $ParcelUuid$NullableType;
  }
}

final class $ParcelUuid$Type extends jni$_.JObjType<ParcelUuid> {
  @jni$_.internal
  const $ParcelUuid$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/ParcelUuid;';

  @jni$_.internal
  @core$_.override
  ParcelUuid fromReference(jni$_.JReference reference) =>
      ParcelUuid.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ParcelUuid?> get nullableType =>
      const $ParcelUuid$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ParcelUuid$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ParcelUuid$Type) && other is $ParcelUuid$Type;
  }
}

/// from: `com.lastgimbus.the.lastbluetooth.TheLastUtils$Companion`
class TheLastUtils$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TheLastUtils$Companion> $type;

  @jni$_.internal
  TheLastUtils$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'com/lastgimbus/the/lastbluetooth/TheLastUtils$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TheLastUtils$Companion$NullableType();
  static const type = $TheLastUtils$Companion$Type();
  static final _id_isBluetoothDeviceConnected = _class.instanceMethodId(
    r'isBluetoothDeviceConnected',
    r'(Landroid/bluetooth/BluetoothDevice;)Z',
  );

  static final _isBluetoothDeviceConnected =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final boolean isBluetoothDeviceConnected(android.bluetooth.BluetoothDevice bluetoothDevice)`
  bool isBluetoothDeviceConnected(
    BluetoothDevice bluetoothDevice,
  ) {
    final _$bluetoothDevice = bluetoothDevice.reference;
    return _isBluetoothDeviceConnected(
            reference.pointer,
            _id_isBluetoothDeviceConnected as jni$_.JMethodIDPtr,
            _$bluetoothDevice.pointer)
        .boolean;
  }

  static final _id_bluetoothDeviceBatteryLevel = _class.instanceMethodId(
    r'bluetoothDeviceBatteryLevel',
    r'(Landroid/bluetooth/BluetoothDevice;)I',
  );

  static final _bluetoothDeviceBatteryLevel =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int bluetoothDeviceBatteryLevel(android.bluetooth.BluetoothDevice bluetoothDevice)`
  int bluetoothDeviceBatteryLevel(
    BluetoothDevice bluetoothDevice,
  ) {
    final _$bluetoothDevice = bluetoothDevice.reference;
    return _bluetoothDeviceBatteryLevel(
            reference.pointer,
            _id_bluetoothDeviceBatteryLevel as jni$_.JMethodIDPtr,
            _$bluetoothDevice.pointer)
        .integer;
  }

  static final _id_getIntentExtras = _class.instanceMethodId(
    r'getIntentExtras',
    r'(Landroid/content/Intent;)Ljava/util/Map;',
  );

  static final _getIntentExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.util.Map getIntentExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JMap<jni$_.JString, jni$_.JObject?> getIntentExtras(
    Intent intent,
  ) {
    final _$intent = intent.reference;
    return _getIntentExtras(reference.pointer,
            _id_getIntentExtras as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JMap<jni$_.JString, jni$_.JObject?>>(
            const jni$_.JMapType<jni$_.JString, jni$_.JObject?>(
                jni$_.JStringType(), jni$_.JObjectNullableType()));
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory TheLastUtils$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return TheLastUtils$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $TheLastUtils$Companion$NullableType
    extends jni$_.JObjType<TheLastUtils$Companion?> {
  @jni$_.internal
  const $TheLastUtils$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils$Companion;';

  @jni$_.internal
  @core$_.override
  TheLastUtils$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : TheLastUtils$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TheLastUtils$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TheLastUtils$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastUtils$Companion$NullableType) &&
        other is $TheLastUtils$Companion$NullableType;
  }
}

final class $TheLastUtils$Companion$Type
    extends jni$_.JObjType<TheLastUtils$Companion> {
  @jni$_.internal
  const $TheLastUtils$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils$Companion;';

  @jni$_.internal
  @core$_.override
  TheLastUtils$Companion fromReference(jni$_.JReference reference) =>
      TheLastUtils$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TheLastUtils$Companion?> get nullableType =>
      const $TheLastUtils$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TheLastUtils$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastUtils$Companion$Type) &&
        other is $TheLastUtils$Companion$Type;
  }
}

/// from: `com.lastgimbus.the.lastbluetooth.TheLastUtils`
class TheLastUtils extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TheLastUtils> $type;

  @jni$_.internal
  TheLastUtils.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/lastgimbus/the/lastbluetooth/TheLastUtils');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TheLastUtils$NullableType();
  static const type = $TheLastUtils$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils$Companion;',
  );

  /// from: `static public final com.lastgimbus.the.lastbluetooth.TheLastUtils$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static TheLastUtils$Companion? get Companion =>
      _id_Companion.get(_class, const $TheLastUtils$Companion$NullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory TheLastUtils() {
    return TheLastUtils.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_isBluetoothDeviceConnected = _class.staticMethodId(
    r'isBluetoothDeviceConnected',
    r'(Landroid/bluetooth/BluetoothDevice;)Z',
  );

  static final _isBluetoothDeviceConnected =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticBooleanMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final boolean isBluetoothDeviceConnected(android.bluetooth.BluetoothDevice bluetoothDevice)`
  static bool isBluetoothDeviceConnected(
    BluetoothDevice? bluetoothDevice,
  ) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    return _isBluetoothDeviceConnected(
            _class.reference.pointer,
            _id_isBluetoothDeviceConnected as jni$_.JMethodIDPtr,
            _$bluetoothDevice.pointer)
        .boolean;
  }

  static final _id_bluetoothDeviceBatteryLevel = _class.staticMethodId(
    r'bluetoothDeviceBatteryLevel',
    r'(Landroid/bluetooth/BluetoothDevice;)I',
  );

  static final _bluetoothDeviceBatteryLevel =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticIntMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final int bluetoothDeviceBatteryLevel(android.bluetooth.BluetoothDevice bluetoothDevice)`
  static int bluetoothDeviceBatteryLevel(
    BluetoothDevice? bluetoothDevice,
  ) {
    final _$bluetoothDevice =
        bluetoothDevice?.reference ?? jni$_.jNullReference;
    return _bluetoothDeviceBatteryLevel(
            _class.reference.pointer,
            _id_bluetoothDeviceBatteryLevel as jni$_.JMethodIDPtr,
            _$bluetoothDevice.pointer)
        .integer;
  }

  static final _id_getIntentExtras = _class.staticMethodId(
    r'getIntentExtras',
    r'(Landroid/content/Intent;)Ljava/util/Map;',
  );

  static final _getIntentExtras = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.util.Map getIntentExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JMap<jni$_.JString?, jni$_.JObject?>? getIntentExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _getIntentExtras(_class.reference.pointer,
            _id_getIntentExtras as jni$_.JMethodIDPtr, _$intent.pointer)
        .object<jni$_.JMap<jni$_.JString?, jni$_.JObject?>?>(
            const jni$_.JMapNullableType<jni$_.JString?, jni$_.JObject?>(
                jni$_.JStringNullableType(), jni$_.JObjectNullableType()));
  }
}

final class $TheLastUtils$NullableType extends jni$_.JObjType<TheLastUtils?> {
  @jni$_.internal
  const $TheLastUtils$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils;';

  @jni$_.internal
  @core$_.override
  TheLastUtils? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : TheLastUtils.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TheLastUtils?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TheLastUtils$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastUtils$NullableType) &&
        other is $TheLastUtils$NullableType;
  }
}

final class $TheLastUtils$Type extends jni$_.JObjType<TheLastUtils> {
  @jni$_.internal
  const $TheLastUtils$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/lastgimbus/the/lastbluetooth/TheLastUtils;';

  @jni$_.internal
  @core$_.override
  TheLastUtils fromReference(jni$_.JReference reference) =>
      TheLastUtils.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TheLastUtils?> get nullableType =>
      const $TheLastUtils$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($TheLastUtils$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastUtils$Type) &&
        other is $TheLastUtils$Type;
  }
}

/// from: `com.lastgimbus.the.lastbluetooth.BroadcastReceiverInterface`
class BroadcastReceiverInterface extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BroadcastReceiverInterface> $type;

  @jni$_.internal
  BroadcastReceiverInterface.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'com/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BroadcastReceiverInterface$NullableType();
  static const type = $BroadcastReceiverInterface$Type();
  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onReceive(android.content.Context context, android.content.Intent intent)`
  void onReceive(
    Context? context,
    Intent? intent,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onReceive(reference.pointer, _id_onReceive as jni$_.JMethodIDPtr,
            _$context.pointer, _$intent.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BroadcastReceiverInterface> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onReceive(Landroid/content/Context;Landroid/content/Intent;)V') {
        _$impls[$p]!.onReceive(
          $a![0]?.as(const $Context$Type(), releaseOriginal: true),
          $a![1]?.as(const $Intent$Type(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BroadcastReceiverInterface $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.lastgimbus.the.lastbluetooth.BroadcastReceiverInterface',
      $p,
      _$invokePointer,
      [
        if ($impl.onReceive$async)
          r'onReceive(Landroid/content/Context;Landroid/content/Intent;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BroadcastReceiverInterface.implement(
    $BroadcastReceiverInterface $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BroadcastReceiverInterface.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BroadcastReceiverInterface {
  factory $BroadcastReceiverInterface({
    required void Function(Context? context, Intent? intent) onReceive,
    bool onReceive$async,
  }) = _$BroadcastReceiverInterface;

  void onReceive(Context? context, Intent? intent);
  bool get onReceive$async => false;
}

final class _$BroadcastReceiverInterface with $BroadcastReceiverInterface {
  _$BroadcastReceiverInterface({
    required void Function(Context? context, Intent? intent) onReceive,
    this.onReceive$async = false,
  }) : _onReceive = onReceive;

  final void Function(Context? context, Intent? intent) _onReceive;
  final bool onReceive$async;

  void onReceive(Context? context, Intent? intent) {
    return _onReceive(context, intent);
  }
}

final class $BroadcastReceiverInterface$NullableType
    extends jni$_.JObjType<BroadcastReceiverInterface?> {
  @jni$_.internal
  const $BroadcastReceiverInterface$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface;';

  @jni$_.internal
  @core$_.override
  BroadcastReceiverInterface? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BroadcastReceiverInterface.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BroadcastReceiverInterface?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BroadcastReceiverInterface$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiverInterface$NullableType) &&
        other is $BroadcastReceiverInterface$NullableType;
  }
}

final class $BroadcastReceiverInterface$Type
    extends jni$_.JObjType<BroadcastReceiverInterface> {
  @jni$_.internal
  const $BroadcastReceiverInterface$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface;';

  @jni$_.internal
  @core$_.override
  BroadcastReceiverInterface fromReference(jni$_.JReference reference) =>
      BroadcastReceiverInterface.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BroadcastReceiverInterface?> get nullableType =>
      const $BroadcastReceiverInterface$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BroadcastReceiverInterface$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BroadcastReceiverInterface$Type) &&
        other is $BroadcastReceiverInterface$Type;
  }
}

/// from: `com.lastgimbus.the.lastbluetooth.TheLastBroadcastReceiver`
class TheLastBroadcastReceiver extends BroadcastReceiver {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<TheLastBroadcastReceiver> $type;

  @jni$_.internal
  TheLastBroadcastReceiver.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'com/lastgimbus/the/lastbluetooth/TheLastBroadcastReceiver');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $TheLastBroadcastReceiver$NullableType();
  static const type = $TheLastBroadcastReceiver$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lcom/lastgimbus/the/lastbluetooth/BroadcastReceiverInterface;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(com.lastgimbus.the.lastbluetooth.BroadcastReceiverInterface broadcastReceiverInterface)`
  /// The returned object must be released after use, by calling the [release] method.
  factory TheLastBroadcastReceiver(
    BroadcastReceiverInterface broadcastReceiverInterface,
  ) {
    final _$broadcastReceiverInterface = broadcastReceiverInterface.reference;
    return TheLastBroadcastReceiver.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$broadcastReceiverInterface.pointer)
        .reference);
  }

  static final _id_onReceive = _class.instanceMethodId(
    r'onReceive',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _onReceive = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onReceive(android.content.Context context, android.content.Intent intent)`
  void onReceive(
    Context? context,
    Intent? intent,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onReceive(reference.pointer, _id_onReceive as jni$_.JMethodIDPtr,
            _$context.pointer, _$intent.pointer)
        .check();
  }
}

final class $TheLastBroadcastReceiver$NullableType
    extends jni$_.JObjType<TheLastBroadcastReceiver?> {
  @jni$_.internal
  const $TheLastBroadcastReceiver$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/TheLastBroadcastReceiver;';

  @jni$_.internal
  @core$_.override
  TheLastBroadcastReceiver? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : TheLastBroadcastReceiver.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $BroadcastReceiver$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TheLastBroadcastReceiver?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($TheLastBroadcastReceiver$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastBroadcastReceiver$NullableType) &&
        other is $TheLastBroadcastReceiver$NullableType;
  }
}

final class $TheLastBroadcastReceiver$Type
    extends jni$_.JObjType<TheLastBroadcastReceiver> {
  @jni$_.internal
  const $TheLastBroadcastReceiver$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/lastgimbus/the/lastbluetooth/TheLastBroadcastReceiver;';

  @jni$_.internal
  @core$_.override
  TheLastBroadcastReceiver fromReference(jni$_.JReference reference) =>
      TheLastBroadcastReceiver.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $BroadcastReceiver$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<TheLastBroadcastReceiver?> get nullableType =>
      const $TheLastBroadcastReceiver$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($TheLastBroadcastReceiver$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($TheLastBroadcastReceiver$Type) &&
        other is $TheLastBroadcastReceiver$Type;
  }
}
